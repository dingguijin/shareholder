{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addFirstInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addSecondInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aggBlsPublicKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        }
      ],
      "name": "calculateDividends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareholderAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        }
      ],
      "name": "getShareholderDividends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "_bls_public_key",
          "type": "uint256[4]"
        }
      ],
      "name": "setAggBlsPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_income",
          "type": "uint256"
        }
      ],
      "name": "setShareholderIncome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shareholderAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shareholders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "income",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tempMemHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFirstInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSecondInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_aggSignature",
          "type": "uint256[2]"
        }
      ],
      "name": "verifyProposal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/BLS.sol",
    "1": "contracts/BN256G2.sol",
    "2": "contracts/Dividends.sol"
  },
  "ast": {
    "absolutePath": "contracts/Dividends.sol",
    "exportedSymbols": {
      "BLS": [
        2328
      ],
      "Dividends": [
        503
      ]
    },
    "id": 504,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:24:2"
      },
      {
        "absolutePath": "contracts/BLS.sol",
        "file": "./BLS.sol",
        "id": 3,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 504,
        "sourceUnit": 2329,
        "src": "63:30:2",
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "BLS",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2328,
              "src": "71:3:2",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Dividends",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 503,
        "linearizedBaseContracts": [
          503
        ],
        "name": "Dividends",
        "nameLocation": "104:9:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 5,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "135:5:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "120:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "120:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "10ea13df",
            "id": 7,
            "mutability": "mutable",
            "name": "totalInvestment",
            "nameLocation": "161:15:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "146:30:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 6,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "146:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b2b233d2",
            "id": 9,
            "mutability": "mutable",
            "name": "totalFirstInvestment",
            "nameLocation": "197:20:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "182:35:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "182:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a5872c72",
            "id": 11,
            "mutability": "mutable",
            "name": "totalSecondInvestment",
            "nameLocation": "238:21:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "223:36:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "223:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "ce7e03f0",
            "id": 15,
            "mutability": "mutable",
            "name": "aggBlsPublicKey",
            "nameLocation": "283:15:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "265:33:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$4_storage",
              "typeString": "uint256[4]"
            },
            "typeName": {
              "baseType": {
                "id": 12,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "265:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 14,
              "length": {
                "hexValue": "34",
                "id": 13,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "273:1:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_4_by_1",
                  "typeString": "int_const 4"
                },
                "value": "4"
              },
              "nodeType": "ArrayTypeName",
              "src": "265:10:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                "typeString": "uint256[4]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "1c063c41",
            "id": 19,
            "mutability": "mutable",
            "name": "tempMemHash",
            "nameLocation": "322:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "304:29:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$2_storage",
              "typeString": "uint256[2]"
            },
            "typeName": {
              "baseType": {
                "id": 16,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "304:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 18,
              "length": {
                "hexValue": "32",
                "id": 17,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "312:1:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_2_by_1",
                  "typeString": "int_const 2"
                },
                "value": "2"
              },
              "nodeType": "ArrayTypeName",
              "src": "304:10:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                "typeString": "uint256[2]"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "Dividends.Shareholder",
            "id": 26,
            "members": [
              {
                "constant": false,
                "id": 21,
                "mutability": "mutable",
                "name": "firstInvestment",
                "nameLocation": "381:15:2",
                "nodeType": "VariableDeclaration",
                "scope": 26,
                "src": "373:23:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 20,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "373:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23,
                "mutability": "mutable",
                "name": "secondInvestment",
                "nameLocation": "414:16:2",
                "nodeType": "VariableDeclaration",
                "scope": 26,
                "src": "406:24:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 22,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "406:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 25,
                "mutability": "mutable",
                "name": "income",
                "nameLocation": "448:6:2",
                "nodeType": "VariableDeclaration",
                "scope": 26,
                "src": "440:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 24,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "440:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Shareholder",
            "nameLocation": "351:11:2",
            "nodeType": "StructDefinition",
            "scope": 503,
            "src": "344:117:2",
            "visibility": "public"
          },
          {
            "canonicalName": "Dividends.DividendProposal",
            "id": 35,
            "members": [
              {
                "constant": false,
                "id": 28,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "509:2:2",
                "nodeType": "VariableDeclaration",
                "scope": 35,
                "src": "501:10:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 27,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "501:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 30,
                "mutability": "mutable",
                "name": "hasVerified",
                "nameLocation": "526:11:2",
                "nodeType": "VariableDeclaration",
                "scope": 35,
                "src": "521:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 29,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "521:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 34,
                "mutability": "mutable",
                "name": "shareholderDividends",
                "nameLocation": "575:20:2",
                "nodeType": "VariableDeclaration",
                "scope": 35,
                "src": "547:48:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 33,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 31,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "555:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "547:27:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 32,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "566:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "DividendProposal",
            "nameLocation": "474:16:2",
            "nodeType": "StructDefinition",
            "scope": 503,
            "src": "467:135:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5c2930ad",
            "id": 40,
            "mutability": "mutable",
            "name": "shareholders",
            "nameLocation": "647:12:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "608:51:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
              "typeString": "mapping(address => struct Dividends.Shareholder)"
            },
            "typeName": {
              "id": 39,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 36,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "616:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "608:31:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                "typeString": "mapping(address => struct Dividends.Shareholder)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 38,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 37,
                  "name": "Shareholder",
                  "nameLocations": [
                    "627:11:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26,
                  "src": "627:11:2"
                },
                "referencedDeclaration": 26,
                "src": "627:11:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Shareholder_$26_storage_ptr",
                  "typeString": "struct Dividends.Shareholder"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5c3184dc",
            "id": 43,
            "mutability": "mutable",
            "name": "shareholderAddresses",
            "nameLocation": "682:20:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "665:37:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 41,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "665:7:2",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 42,
              "nodeType": "ArrayTypeName",
              "src": "665:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "013cf08b",
            "id": 48,
            "mutability": "mutable",
            "name": "proposals",
            "nameLocation": "752:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "708:53:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
              "typeString": "mapping(uint256 => struct Dividends.DividendProposal)"
            },
            "typeName": {
              "id": 47,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 44,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "716:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "708:36:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                "typeString": "mapping(uint256 => struct Dividends.DividendProposal)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 46,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 45,
                  "name": "DividendProposal",
                  "nameLocations": [
                    "727:16:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 35,
                  "src": "727:16:2"
                },
                "referencedDeclaration": 35,
                "src": "727:16:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                  "typeString": "struct Dividends.DividendProposal"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "da35c664",
            "id": 50,
            "mutability": "mutable",
            "name": "proposalCount",
            "nameLocation": "782:13:2",
            "nodeType": "VariableDeclaration",
            "scope": 503,
            "src": "767:28:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 49,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "767:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 61,
              "nodeType": "Block",
              "src": "823:94:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 53,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "841:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "845:6:2",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "841:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 55,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "855:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "841:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6e2e",
                        "id": 57,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "862:36:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0fcea41e877c4f84237ea6b9061acc9b3fc97555de5ba31615eb7b8cf7110239",
                          "typeString": "literal_string \"Only owner can call this function.\""
                        },
                        "value": "Only owner can call this function."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0fcea41e877c4f84237ea6b9061acc9b3fc97555de5ba31615eb7b8cf7110239",
                          "typeString": "literal_string \"Only owner can call this function.\""
                        }
                      ],
                      "id": 52,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "833:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 58,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "833:66:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59,
                  "nodeType": "ExpressionStatement",
                  "src": "833:66:2"
                },
                {
                  "id": 60,
                  "nodeType": "PlaceholderStatement",
                  "src": "909:1:2"
                }
              ]
            },
            "id": 62,
            "name": "onlyOwner",
            "nameLocation": "811:9:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "820:2:2"
            },
            "src": "802:115:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "937:62:2",
              "statements": [
                {
                  "expression": {
                    "id": 68,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "947:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 66,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "955:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 67,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "959:6:2",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "955:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "947:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 69,
                  "nodeType": "ExpressionStatement",
                  "src": "947:18:2"
                },
                {
                  "expression": {
                    "id": 72,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 70,
                      "name": "proposalCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "975:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "991:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "975:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 73,
                  "nodeType": "ExpressionStatement",
                  "src": "975:17:2"
                }
              ]
            },
            "id": 75,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "934:2:2"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "937:0:2"
            },
            "scope": 503,
            "src": "923:76:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 115,
              "nodeType": "Block",
              "src": "1089:295:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 85,
                              "name": "shareholders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1107:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                              }
                            },
                            "id": 87,
                            "indexExpression": {
                              "id": 86,
                              "name": "_shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "1120:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1107:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                              "typeString": "struct Dividends.Shareholder storage ref"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1134:15:2",
                          "memberName": "firstInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "1107:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 89,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1153:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1107:47:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466972737420696e766573746d656e7420616c7265616479206d6164652e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1156:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a34bc9329f15edefed43e22fbb96d5affa6544422fd8a35b82df3e370fb704d7",
                          "typeString": "literal_string \"First investment already made.\""
                        },
                        "value": "First investment already made."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a34bc9329f15edefed43e22fbb96d5affa6544422fd8a35b82df3e370fb704d7",
                          "typeString": "literal_string \"First investment already made.\""
                        }
                      ],
                      "id": 84,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1099:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1099:90:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1099:90:2"
                },
                {
                  "expression": {
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 94,
                          "name": "shareholders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1199:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                            "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                          }
                        },
                        "id": 96,
                        "indexExpression": {
                          "id": 95,
                          "name": "_shareholder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 77,
                          "src": "1212:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1199:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                          "typeString": "struct Dividends.Shareholder storage ref"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "1226:15:2",
                      "memberName": "firstInvestment",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 21,
                      "src": "1199:42:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 98,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1244:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1199:52:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 100,
                  "nodeType": "ExpressionStatement",
                  "src": "1199:52:2"
                },
                {
                  "expression": {
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 101,
                      "name": "totalInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1261:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 102,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1280:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1261:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1261:26:2"
                },
                {
                  "expression": {
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 105,
                      "name": "totalFirstInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "1297:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 106,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1321:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1297:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "1297:31:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 112,
                        "name": "_shareholder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 77,
                        "src": "1364:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 109,
                        "name": "shareholderAddresses",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "1338:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 111,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1359:4:2",
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "1338:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
                        "typeString": "function (address[] storage pointer,address)"
                      }
                    },
                    "id": 113,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1338:39:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 114,
                  "nodeType": "ExpressionStatement",
                  "src": "1338:39:2"
                }
              ]
            },
            "functionSelector": "fb8159eb",
            "id": 116,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 82,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 81,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1079:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "1079:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1079:9:2"
              }
            ],
            "name": "addFirstInvestment",
            "nameLocation": "1014:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "1041:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 116,
                  "src": "1033:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 76,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1033:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "1063:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 116,
                  "src": "1055:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 78,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1055:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1032:39:2"
            },
            "returnParameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1089:0:2"
            },
            "scope": 503,
            "src": "1005:379:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 148,
              "nodeType": "Block",
              "src": "1465:248:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 124,
                              "name": "shareholders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1483:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                              }
                            },
                            "id": 126,
                            "indexExpression": {
                              "id": 125,
                              "name": "_shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 118,
                              "src": "1496:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1483:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                              "typeString": "struct Dividends.Shareholder storage ref"
                            }
                          },
                          "id": 127,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1510:15:2",
                          "memberName": "firstInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "1483:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1528:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1483:46:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466972737420696e766573746d656e74206e6f74206d616465207965742e",
                        "id": 130,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1531:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        },
                        "value": "First investment not made yet."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        }
                      ],
                      "id": 123,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1475:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1475:89:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 132,
                  "nodeType": "ExpressionStatement",
                  "src": "1475:89:2"
                },
                {
                  "expression": {
                    "id": 138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 133,
                          "name": "shareholders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1574:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                            "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                          }
                        },
                        "id": 135,
                        "indexExpression": {
                          "id": 134,
                          "name": "_shareholder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 118,
                          "src": "1587:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1574:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                          "typeString": "struct Dividends.Shareholder storage ref"
                        }
                      },
                      "id": 136,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "1601:16:2",
                      "memberName": "secondInvestment",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 23,
                      "src": "1574:43:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 137,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "1621:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1574:54:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 139,
                  "nodeType": "ExpressionStatement",
                  "src": "1574:54:2"
                },
                {
                  "expression": {
                    "id": 142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 140,
                      "name": "totalSecondInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "1638:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 141,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "1663:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1638:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 143,
                  "nodeType": "ExpressionStatement",
                  "src": "1638:32:2"
                },
                {
                  "expression": {
                    "id": 146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 144,
                      "name": "totalInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1680:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 145,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "1699:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1680:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 147,
                  "nodeType": "ExpressionStatement",
                  "src": "1680:26:2"
                }
              ]
            },
            "functionSelector": "ac30b1ff",
            "id": 149,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addSecondInvestment",
            "nameLocation": "1399:19:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 118,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "1427:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1419:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 117,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1419:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 120,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "1449:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1441:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 119,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1418:39:2"
            },
            "returnParameters": {
              "id": 122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1465:0:2"
            },
            "scope": 503,
            "src": "1390:323:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 175,
              "nodeType": "Block",
              "src": "1805:159:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 164,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 159,
                              "name": "shareholders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1823:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                              }
                            },
                            "id": 161,
                            "indexExpression": {
                              "id": 160,
                              "name": "_shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "1836:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1823:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                              "typeString": "struct Dividends.Shareholder storage ref"
                            }
                          },
                          "id": 162,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1850:15:2",
                          "memberName": "firstInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "1823:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1868:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1823:46:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466972737420696e766573746d656e74206e6f74206d616465207965742e",
                        "id": 165,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1871:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        },
                        "value": "First investment not made yet."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        }
                      ],
                      "id": 158,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1815:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1815:89:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 167,
                  "nodeType": "ExpressionStatement",
                  "src": "1815:89:2"
                },
                {
                  "expression": {
                    "id": 173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 168,
                          "name": "shareholders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1914:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                            "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                          }
                        },
                        "id": 170,
                        "indexExpression": {
                          "id": 169,
                          "name": "_shareholder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 151,
                          "src": "1927:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1914:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                          "typeString": "struct Dividends.Shareholder storage ref"
                        }
                      },
                      "id": 171,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "1941:6:2",
                      "memberName": "income",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25,
                      "src": "1914:33:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 172,
                      "name": "_income",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 153,
                      "src": "1950:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1914:43:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 174,
                  "nodeType": "ExpressionStatement",
                  "src": "1914:43:2"
                }
              ]
            },
            "functionSelector": "4c06d9e3",
            "id": 176,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 156,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 155,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1795:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "1795:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1795:9:2"
              }
            ],
            "name": "setShareholderIncome",
            "nameLocation": "1728:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 151,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "1757:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 176,
                  "src": "1749:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 150,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1749:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 153,
                  "mutability": "mutable",
                  "name": "_income",
                  "nameLocation": "1779:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 176,
                  "src": "1771:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 152,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1771:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1748:39:2"
            },
            "returnParameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1805:0:2"
            },
            "scope": 503,
            "src": "1719:245:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 217,
              "nodeType": "Block",
              "src": "2052:203:2",
              "statements": [
                {
                  "expression": {
                    "id": 191,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 185,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2062:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 187,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 186,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2078:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2062:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 188,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2083:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 190,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2099:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2083:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2062:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 192,
                  "nodeType": "ExpressionStatement",
                  "src": "2062:39:2"
                },
                {
                  "expression": {
                    "id": 199,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 193,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2111:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 195,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2127:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2111:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 196,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2132:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 198,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 197,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2148:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2132:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2111:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 200,
                  "nodeType": "ExpressionStatement",
                  "src": "2111:39:2"
                },
                {
                  "expression": {
                    "id": 207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 201,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2160:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 203,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2176:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2160:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 204,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2181:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 206,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2197:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2181:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2160:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 208,
                  "nodeType": "ExpressionStatement",
                  "src": "2160:39:2"
                },
                {
                  "expression": {
                    "id": 215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 209,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2209:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 211,
                      "indexExpression": {
                        "hexValue": "33",
                        "id": 210,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2225:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2209:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 212,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2230:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 214,
                      "indexExpression": {
                        "hexValue": "33",
                        "id": 213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2246:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2230:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2209:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 216,
                  "nodeType": "ExpressionStatement",
                  "src": "2209:39:2"
                }
              ]
            },
            "functionSelector": "65efb3cd",
            "id": 218,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 183,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 182,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2042:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "2042:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "2042:9:2"
              }
            ],
            "name": "setAggBlsPublicKey",
            "nameLocation": "1979:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 180,
                  "mutability": "mutable",
                  "name": "_bls_public_key",
                  "nameLocation": "2018:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 218,
                  "src": "1998:35:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                    "typeString": "uint256[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 177,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1998:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 179,
                    "length": {
                      "hexValue": "34",
                      "id": 178,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2006:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_4_by_1",
                        "typeString": "int_const 4"
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1998:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                      "typeString": "uint256[4]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1997:37:2"
            },
            "returnParameters": {
              "id": 184,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:0:2"
            },
            "scope": 503,
            "src": "1970:285:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 255,
              "nodeType": "Block",
              "src": "2328:268:2",
              "statements": [
                {
                  "assignments": [
                    224
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 224,
                      "mutability": "mutable",
                      "name": "totalIncome",
                      "nameLocation": "2346:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 255,
                      "src": "2338:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 223,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2338:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 226,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2360:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2338:23:2"
                },
                {
                  "body": {
                    "id": 251,
                    "nodeType": "Block",
                    "src": "2429:133:2",
                    "statements": [
                      {
                        "assignments": [
                          239
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 239,
                            "mutability": "mutable",
                            "name": "_shareholder",
                            "nameLocation": "2451:12:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 251,
                            "src": "2443:20:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 238,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2443:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 243,
                        "initialValue": {
                          "baseExpression": {
                            "id": 240,
                            "name": "shareholderAddresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43,
                            "src": "2466:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 242,
                          "indexExpression": {
                            "id": 241,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 228,
                            "src": "2487:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2466:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2443:46:2"
                      },
                      {
                        "expression": {
                          "id": 249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 244,
                            "name": "totalIncome",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 224,
                            "src": "2503:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 245,
                                "name": "shareholders",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "2518:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                  "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                                }
                              },
                              "id": 247,
                              "indexExpression": {
                                "id": 246,
                                "name": "_shareholder",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 239,
                                "src": "2531:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2518:26:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                                "typeString": "struct Dividends.Shareholder storage ref"
                              }
                            },
                            "id": 248,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2545:6:2",
                            "memberName": "income",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 25,
                            "src": "2518:33:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2503:48:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 250,
                        "nodeType": "ExpressionStatement",
                        "src": "2503:48:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 231,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 228,
                      "src": "2391:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 232,
                        "name": "shareholderAddresses",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "2395:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 233,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2416:6:2",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2395:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2391:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 252,
                  "initializationExpression": {
                    "assignments": [
                      228
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 228,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2384:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 252,
                        "src": "2376:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 227,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2376:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 230,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 229,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2388:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2376:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2424:3:2",
                      "subExpression": {
                        "id": 235,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 228,
                        "src": "2424:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 237,
                    "nodeType": "ExpressionStatement",
                    "src": "2424:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "2371:191:2"
                },
                {
                  "expression": {
                    "id": 253,
                    "name": "totalIncome",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 224,
                    "src": "2578:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 222,
                  "id": 254,
                  "nodeType": "Return",
                  "src": "2571:18:2"
                }
              ]
            },
            "id": 256,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateTotalIncome",
            "nameLocation": "2274:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2294:2:2"
            },
            "returnParameters": {
              "id": 222,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 221,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 256,
                  "src": "2319:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 220,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2319:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2318:9:2"
            },
            "scope": 503,
            "src": "2265:331:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 336,
              "nodeType": "Block",
              "src": "2682:592:2",
              "statements": [
                {
                  "assignments": [
                    265
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 265,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "2711:1:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "2692:20:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                        "typeString": "struct Dividends.Shareholder"
                      },
                      "typeName": {
                        "id": 264,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 263,
                          "name": "Shareholder",
                          "nameLocations": [
                            "2692:11:2"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 26,
                          "src": "2692:11:2"
                        },
                        "referencedDeclaration": 26,
                        "src": "2692:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage_ptr",
                          "typeString": "struct Dividends.Shareholder"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 269,
                  "initialValue": {
                    "baseExpression": {
                      "id": 266,
                      "name": "shareholders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "2715:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                        "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                      }
                    },
                    "id": 268,
                    "indexExpression": {
                      "id": 267,
                      "name": "_shareholder",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 258,
                      "src": "2728:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2715:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                      "typeString": "struct Dividends.Shareholder storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2692:49:2"
                },
                {
                  "assignments": [
                    271
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 271,
                      "mutability": "mutable",
                      "name": "totalIncome",
                      "nameLocation": "2759:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "2751:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 270,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2751:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 274,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 272,
                      "name": "calculateTotalIncome",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 256,
                      "src": "2773:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2773:22:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2751:44:2"
                },
                {
                  "assignments": [
                    276
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 276,
                      "mutability": "mutable",
                      "name": "conversionShares",
                      "nameLocation": "2813:16:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "2805:24:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 275,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2805:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 287,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 286,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 280,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "31303030",
                                  "id": 277,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2834:4:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000_by_1",
                                    "typeString": "int_const 1000"
                                  },
                                  "value": "1000"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "expression": {
                                    "id": 278,
                                    "name": "s",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 265,
                                    "src": "2841:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                                      "typeString": "struct Dividends.Shareholder memory"
                                    }
                                  },
                                  "id": 279,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2843:15:2",
                                  "memberName": "firstInvestment",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 21,
                                  "src": "2841:17:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2834:24:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 281,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "2833:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 282,
                            "name": "totalFirstInvestment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "2860:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2833:47:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 284,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "2832:49:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "32",
                      "id": 285,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2884:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "2832:53:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2805:80:2"
                },
                {
                  "assignments": [
                    289
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 289,
                      "mutability": "mutable",
                      "name": "conversionEarnings",
                      "nameLocation": "2903:18:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "2895:26:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 288,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2895:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 291,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 290,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2924:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2895:30:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 294,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 292,
                      "name": "totalIncome",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 271,
                      "src": "2939:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 293,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2954:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2939:16:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 306,
                  "nodeType": "IfStatement",
                  "src": "2935:99:2",
                  "trueBody": {
                    "id": 305,
                    "nodeType": "Block",
                    "src": "2957:77:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 295,
                            "name": "conversionEarnings",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 289,
                            "src": "2971:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 302,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 299,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "hexValue": "31303030",
                                    "id": 296,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2993:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1000_by_1",
                                      "typeString": "int_const 1000"
                                    },
                                    "value": "1000"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 297,
                                      "name": "s",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 265,
                                      "src": "3000:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                                        "typeString": "struct Dividends.Shareholder memory"
                                      }
                                    },
                                    "id": 298,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3002:6:2",
                                    "memberName": "income",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 25,
                                    "src": "3000:8:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "2993:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 300,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "2992:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 301,
                              "name": "totalIncome",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 271,
                              "src": "3012:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2992:31:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2971:52:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 304,
                        "nodeType": "ExpressionStatement",
                        "src": "2971:52:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    308
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 308,
                      "mutability": "mutable",
                      "name": "secondInvestmentRatio",
                      "nameLocation": "3051:21:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "3043:29:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 307,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3043:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 316,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 315,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31303030",
                            "id": 309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3076:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            },
                            "value": "1000"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "expression": {
                              "id": 310,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 265,
                              "src": "3083:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                                "typeString": "struct Dividends.Shareholder memory"
                              }
                            },
                            "id": 311,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3085:16:2",
                            "memberName": "secondInvestment",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 23,
                            "src": "3083:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3076:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 313,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3075:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "id": 314,
                      "name": "totalInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "3105:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3075:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3043:77:2"
                },
                {
                  "assignments": [
                    318
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 318,
                      "mutability": "mutable",
                      "name": "actualDividends",
                      "nameLocation": "3138:15:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "3130:23:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 317,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3130:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 333,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 327,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 319,
                              "name": "conversionShares",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 276,
                              "src": "3157:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "34",
                              "id": 320,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3176:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "src": "3157:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 322,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "3156:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 323,
                              "name": "conversionEarnings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "3182:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "32",
                              "id": 324,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3203:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "3182:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 326,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "3181:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "3156:49:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 328,
                            "name": "secondInvestmentRatio",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 308,
                            "src": "3209:21:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "34",
                            "id": 329,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3233:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_4_by_1",
                              "typeString": "int_const 4"
                            },
                            "value": "4"
                          },
                          "src": "3209:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 331,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3208:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3156:79:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3130:105:2"
                },
                {
                  "expression": {
                    "id": 334,
                    "name": "actualDividends",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 318,
                    "src": "3252:15:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 262,
                  "id": 335,
                  "nodeType": "Return",
                  "src": "3245:22:2"
                }
              ]
            },
            "functionSelector": "912c1555",
            "id": 337,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateDividends",
            "nameLocation": "2611:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 258,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "2638:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 337,
                  "src": "2630:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 257,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2630:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2629:22:2"
            },
            "returnParameters": {
              "id": 262,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 261,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 337,
                  "src": "2673:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 260,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2673:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2672:9:2"
            },
            "scope": 503,
            "src": "2602:672:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 390,
              "nodeType": "Block",
              "src": "3368:342:2",
              "statements": [
                {
                  "expression": {
                    "id": 349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 345,
                        "name": "proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 340,
                        "src": "3378:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        }
                      },
                      "id": 347,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "3387:2:2",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28,
                      "src": "3378:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 348,
                      "name": "_id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 342,
                      "src": "3392:3:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3378:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 350,
                  "nodeType": "ExpressionStatement",
                  "src": "3378:17:2"
                },
                {
                  "expression": {
                    "id": 355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 351,
                        "name": "proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 340,
                        "src": "3405:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        }
                      },
                      "id": 353,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "3414:11:2",
                      "memberName": "hasVerified",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30,
                      "src": "3405:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 354,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3428:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3405:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 356,
                  "nodeType": "ExpressionStatement",
                  "src": "3405:28:2"
                },
                {
                  "body": {
                    "id": 388,
                    "nodeType": "Block",
                    "src": "3501:203:2",
                    "statements": [
                      {
                        "assignments": [
                          369
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 369,
                            "mutability": "mutable",
                            "name": "shareholder",
                            "nameLocation": "3523:11:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 388,
                            "src": "3515:19:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 368,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3515:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 373,
                        "initialValue": {
                          "baseExpression": {
                            "id": 370,
                            "name": "shareholderAddresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43,
                            "src": "3537:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 372,
                          "indexExpression": {
                            "id": 371,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 358,
                            "src": "3558:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3537:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3515:45:2"
                      },
                      {
                        "assignments": [
                          375
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 375,
                            "mutability": "mutable",
                            "name": "dividends",
                            "nameLocation": "3582:9:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 388,
                            "src": "3574:17:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 374,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3574:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 379,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 377,
                              "name": "shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 369,
                              "src": "3613:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 376,
                            "name": "calculateDividends",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 337,
                            "src": "3594:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3594:31:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3574:51:2"
                      },
                      {
                        "expression": {
                          "id": 386,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 380,
                                "name": "proposal",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 340,
                                "src": "3639:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                                  "typeString": "struct Dividends.DividendProposal storage pointer"
                                }
                              },
                              "id": 383,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3648:20:2",
                              "memberName": "shareholderDividends",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 34,
                              "src": "3639:29:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 384,
                            "indexExpression": {
                              "id": 382,
                              "name": "shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 369,
                              "src": "3669:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3639:42:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 385,
                            "name": "dividends",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 375,
                            "src": "3684:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3639:54:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 387,
                        "nodeType": "ExpressionStatement",
                        "src": "3639:54:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 361,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 358,
                      "src": "3463:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 362,
                        "name": "shareholderAddresses",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "3467:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 363,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3488:6:2",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3467:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3463:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 389,
                  "initializationExpression": {
                    "assignments": [
                      358
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 358,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3456:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 389,
                        "src": "3448:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 357,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3448:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 360,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 359,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3460:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3448:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 366,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "3496:3:2",
                      "subExpression": {
                        "id": 365,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 358,
                        "src": "3496:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 367,
                    "nodeType": "ExpressionStatement",
                    "src": "3496:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "3443:261:2"
                }
              ]
            },
            "id": 391,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createProposalStruct",
            "nameLocation": "3289:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 343,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 340,
                  "mutability": "mutable",
                  "name": "proposal",
                  "nameLocation": "3336:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 391,
                  "src": "3311:33:2",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                    "typeString": "struct Dividends.DividendProposal"
                  },
                  "typeName": {
                    "id": 339,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 338,
                      "name": "DividendProposal",
                      "nameLocations": [
                        "3311:16:2"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 35,
                      "src": "3311:16:2"
                    },
                    "referencedDeclaration": 35,
                    "src": "3311:16:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                      "typeString": "struct Dividends.DividendProposal"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 342,
                  "mutability": "mutable",
                  "name": "_id",
                  "nameLocation": "3354:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 391,
                  "src": "3346:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 341,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3346:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3310:48:2"
            },
            "returnParameters": {
              "id": 344,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3368:0:2"
            },
            "scope": 503,
            "src": "3280:430:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 412,
              "nodeType": "Block",
              "src": "3759:166:2",
              "statements": [
                {
                  "assignments": [
                    398
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 398,
                      "mutability": "mutable",
                      "name": "newProposal",
                      "nameLocation": "3794:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 412,
                      "src": "3769:36:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                        "typeString": "struct Dividends.DividendProposal"
                      },
                      "typeName": {
                        "id": 397,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 396,
                          "name": "DividendProposal",
                          "nameLocations": [
                            "3769:16:2"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 35,
                          "src": "3769:16:2"
                        },
                        "referencedDeclaration": 35,
                        "src": "3769:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 402,
                  "initialValue": {
                    "baseExpression": {
                      "id": 399,
                      "name": "proposals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48,
                      "src": "3808:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                        "typeString": "mapping(uint256 => struct Dividends.DividendProposal storage ref)"
                      }
                    },
                    "id": 401,
                    "indexExpression": {
                      "id": 400,
                      "name": "proposalCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "3818:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3808:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DividendProposal_$35_storage",
                      "typeString": "struct Dividends.DividendProposal storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3769:63:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 404,
                        "name": "newProposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "3863:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        }
                      },
                      {
                        "id": 405,
                        "name": "proposalCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "3876:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 403,
                      "name": "createProposalStruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 391,
                      "src": "3842:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_DividendProposal_$35_storage_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (struct Dividends.DividendProposal storage pointer,uint256)"
                      }
                    },
                    "id": 406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3842:48:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 407,
                  "nodeType": "ExpressionStatement",
                  "src": "3842:48:2"
                },
                {
                  "expression": {
                    "id": 410,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 408,
                      "name": "proposalCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "3900:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 409,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3917:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3900:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 411,
                  "nodeType": "ExpressionStatement",
                  "src": "3900:18:2"
                }
              ]
            },
            "functionSelector": "180fd87f",
            "id": 413,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 394,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 393,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "3749:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "3749:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "3749:9:2"
              }
            ],
            "name": "createProposal",
            "nameLocation": "3725:14:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 392,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3739:2:2"
            },
            "returnParameters": {
              "id": 395,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3759:0:2"
            },
            "scope": 503,
            "src": "3716:209:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 475,
              "nodeType": "Block",
              "src": "4069:338:2",
              "statements": [
                {
                  "assignments": [
                    431
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 431,
                      "mutability": "mutable",
                      "name": "_memHash",
                      "nameLocation": "4097:8:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 475,
                      "src": "4079:26:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                        "typeString": "uint256[2]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 429,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4079:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 430,
                        "length": {
                          "hexValue": "32",
                          "id": 428,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4087:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "4079:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                          "typeString": "uint256[2]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 439,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 436,
                            "name": "_proposalId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 415,
                            "src": "4141:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 434,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4124:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 435,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4128:12:2",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4124:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 437,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4124:29:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 432,
                        "name": "BLS",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2328,
                        "src": "4108:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BLS_$2328_$",
                          "typeString": "type(library BLS)"
                        }
                      },
                      "id": 433,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4112:11:2",
                      "memberName": "hashToPoint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 883,
                      "src": "4108:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$2_memory_ptr_$",
                        "typeString": "function (bytes memory) view returns (uint256[2] memory)"
                      }
                    },
                    "id": 438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4108:46:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                      "typeString": "uint256[2] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4079:75:2"
                },
                {
                  "expression": {
                    "id": 446,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 440,
                        "name": "tempMemHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "4164:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_storage",
                          "typeString": "uint256[2] storage ref"
                        }
                      },
                      "id": 442,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 441,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4176:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4164:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 443,
                        "name": "_memHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "4181:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      "id": 445,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4190:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4181:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4164:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 447,
                  "nodeType": "ExpressionStatement",
                  "src": "4164:28:2"
                },
                {
                  "expression": {
                    "id": 454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 448,
                        "name": "tempMemHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "4202:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_storage",
                          "typeString": "uint256[2] storage ref"
                        }
                      },
                      "id": 450,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 449,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4214:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4202:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 451,
                        "name": "_memHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "4219:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      "id": 453,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 452,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4228:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4219:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4202:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 455,
                  "nodeType": "ExpressionStatement",
                  "src": "4202:28:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 459,
                            "name": "_aggSignature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 419,
                            "src": "4265:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          },
                          {
                            "id": 460,
                            "name": "aggBlsPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15,
                            "src": "4280:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$4_storage",
                              "typeString": "uint256[4] storage ref"
                            }
                          },
                          {
                            "id": 461,
                            "name": "_memHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "4297:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$4_storage",
                              "typeString": "uint256[4] storage ref"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          ],
                          "expression": {
                            "id": 457,
                            "name": "BLS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2328,
                            "src": "4248:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_BLS_$2328_$",
                              "typeString": "type(library BLS)"
                            }
                          },
                          "id": 458,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4252:12:2",
                          "memberName": "verifySingle",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 649,
                          "src": "4248:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$4_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (uint256[2] memory,uint256[4] memory,uint256[2] memory) view returns (bool)"
                          }
                        },
                        "id": 462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4248:58:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "424c53206e6f742076657269666965642e",
                        "id": 463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4308:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_83a0712a26eed63ed1c7163a1f13a2912b8911c5157de4d6e22dfca5625ceb23",
                          "typeString": "literal_string \"BLS not verified.\""
                        },
                        "value": "BLS not verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_83a0712a26eed63ed1c7163a1f13a2912b8911c5157de4d6e22dfca5625ceb23",
                          "typeString": "literal_string \"BLS not verified.\""
                        }
                      ],
                      "id": 456,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4240:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4240:88:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 465,
                  "nodeType": "ExpressionStatement",
                  "src": "4240:88:2"
                },
                {
                  "expression": {
                    "id": 471,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 466,
                          "name": "proposals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48,
                          "src": "4338:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                            "typeString": "mapping(uint256 => struct Dividends.DividendProposal storage ref)"
                          }
                        },
                        "id": 468,
                        "indexExpression": {
                          "id": 467,
                          "name": "_proposalId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 415,
                          "src": "4348:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4338:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage",
                          "typeString": "struct Dividends.DividendProposal storage ref"
                        }
                      },
                      "id": 469,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "4361:11:2",
                      "memberName": "hasVerified",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30,
                      "src": "4338:34:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 470,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4375:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4338:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 472,
                  "nodeType": "ExpressionStatement",
                  "src": "4338:41:2"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 473,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4396:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 425,
                  "id": 474,
                  "nodeType": "Return",
                  "src": "4389:11:2"
                }
              ]
            },
            "functionSelector": "c40c6c5c",
            "id": 476,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 422,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 421,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "4044:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "4044:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "4044:9:2"
              }
            ],
            "name": "verifyProposal",
            "nameLocation": "3940:14:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 420,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 415,
                  "mutability": "mutable",
                  "name": "_proposalId",
                  "nameLocation": "3963:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "3955:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 414,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3955:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 419,
                  "mutability": "mutable",
                  "name": "_aggSignature",
                  "nameLocation": "4022:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "4004:31:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 416,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4004:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 418,
                    "length": {
                      "hexValue": "32",
                      "id": 417,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4012:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "4004:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3954:82:2"
            },
            "returnParameters": {
              "id": 425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 424,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "4063:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 423,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4063:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4062:6:2"
            },
            "scope": 503,
            "src": "3931:476:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 484,
              "nodeType": "Block",
              "src": "4516:44:2",
              "statements": [
                {
                  "expression": {
                    "id": 482,
                    "name": "shareholderAddresses",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 43,
                    "src": "4533:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "functionReturnParameters": 481,
                  "id": 483,
                  "nodeType": "Return",
                  "src": "4526:27:2"
                }
              ]
            },
            "functionSelector": "0039b55c",
            "id": 485,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getShareholderAddresses",
            "nameLocation": "4451:23:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4474:2:2"
            },
            "returnParameters": {
              "id": 481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 480,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "4498:16:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 478,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4498:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 479,
                    "nodeType": "ArrayTypeName",
                    "src": "4498:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4497:18:2"
            },
            "scope": 503,
            "src": "4442:118:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 501,
              "nodeType": "Block",
              "src": "4672:81:2",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 494,
                          "name": "proposals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48,
                          "src": "4689:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                            "typeString": "mapping(uint256 => struct Dividends.DividendProposal storage ref)"
                          }
                        },
                        "id": 496,
                        "indexExpression": {
                          "id": 495,
                          "name": "_proposalId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 487,
                          "src": "4699:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4689:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage",
                          "typeString": "struct Dividends.DividendProposal storage ref"
                        }
                      },
                      "id": 497,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4712:20:2",
                      "memberName": "shareholderDividends",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 34,
                      "src": "4689:43:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 499,
                    "indexExpression": {
                      "id": 498,
                      "name": "_shareholder",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 489,
                      "src": "4733:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4689:57:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 493,
                  "id": 500,
                  "nodeType": "Return",
                  "src": "4682:64:2"
                }
              ]
            },
            "functionSelector": "deb1557d",
            "id": 502,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getShareholderDividends",
            "nameLocation": "4575:23:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 490,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 487,
                  "mutability": "mutable",
                  "name": "_proposalId",
                  "nameLocation": "4607:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 502,
                  "src": "4599:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 486,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4599:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 489,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "4628:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 502,
                  "src": "4620:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 488,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4620:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4598:43:2"
            },
            "returnParameters": {
              "id": 493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 492,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 502,
                  "src": "4663:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 491,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4663:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4662:9:2"
            },
            "scope": 503,
            "src": "4566:187:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 504,
        "src": "95:4665:2",
        "usedErrors": []
      }
    ],
    "src": "37:4724:2"
  },
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b03191633178155600d556110f2806100356000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c80638da5cb5b116100ad578063c40c6c5c11610071578063c40c6c5c1461029c578063ce7e03f0146102bf578063da35c664146102d2578063deb1557d146102db578063fb8159eb1461031557600080fd5b80638da5cb5b14610251578063912c155514610264578063a5872c7214610277578063ac30b1ff14610280578063b2b233d21461029357600080fd5b80631c063c41116100f45780631c063c41146101a35780634c06d9e3146101b65780635c2930ad146101c95780635c3184dc1461021357806365efb3cd1461023e57600080fd5b806239b55c14610125578063013cf08b1461014357806310ea13df14610182578063180fd87f14610199575b600080fd5b61012d610328565b60405161013a9190610df1565b60405180910390f35b61016d610151366004610e3e565b600c602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161013a565b61018b60015481565b60405190815260200161013a565b6101a161038a565b005b61018b6101b1366004610e3e565b6103f5565b6101a16101c4366004610e73565b61040c565b6101f86101d7366004610e9d565b600a6020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161013a565b610226610221366004610e3e565b6104ba565b6040516001600160a01b03909116815260200161013a565b6101a161024c366004610ebf565b6104e4565b600054610226906001600160a01b031681565b61018b610272366004610e9d565b61052c565b61018b60035481565b6101a161028e366004610e73565b61062c565b61018b60025481565b6102af6102aa366004610ef7565b6106f7565b604051901515815260200161013a565b61018b6102cd366004610e3e565b6107fc565b61018b600d5481565b61018b6102e9366004610f81565b6000828152600c602090815260408083206001600160a01b038516845260020190915290205492915050565b6101a1610323366004610e73565b61080c565b6060600b80548060200260200160405190810160405280929190818152602001828054801561038057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610362575b5050505050905090565b6000546001600160a01b031633146103bd5760405162461bcd60e51b81526004016103b490610fad565b60405180910390fd5b600d546000818152600c60205260409020906103da90829061093b565b6001600d60008282546103ed9190611005565b909155505050565b6008816002811061040557600080fd5b0154905081565b6000546001600160a01b031633146104365760405162461bcd60e51b81526004016103b490610fad565b6001600160a01b0382166000908152600a602052604090205461049b5760405162461bcd60e51b815260206004820152601e60248201527f466972737420696e766573746d656e74206e6f74206d616465207965742e000060448201526064016103b4565b6001600160a01b039091166000908152600a6020526040902060020155565b600b81815481106104ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461050e5760405162461bcd60e51b81526004016103b490610fad565b80356004556020810135600555604081013560065560600135600755565b6001600160a01b0381166000908152600a602090815260408083208151606081018352815481526001820154938101939093526002015490820152816105706109c2565b600280548451929350600092610588906103e861102e565b610592919061105b565b61059c919061105b565b9050600082156105c6578284604001516103e86105b9919061102e565b6105c3919061105b565b90505b600060015485602001516103e86105dd919061102e565b6105e7919061105b565b905060006105f660048361105b565b61060160028561105b565b61060c60048761105b565b6106169190611005565b6106209190611005565b98975050505050505050565b6001600160a01b0382166000908152600a60205260409020546106915760405162461bcd60e51b815260206004820152601e60248201527f466972737420696e766573746d656e74206e6f74206d616465207965742e000060448201526064016103b4565b6001600160a01b0382166000908152600a6020526040812060010180548392906106bc908490611005565b9250508190555080600360008282546106d59190611005565b9250508190555080600160008282546106ee9190611005565b90915550505050565b600080546001600160a01b031633146107225760405162461bcd60e51b81526004016103b490610fad565b600061074e8460405160200161073a91815260200190565b604051602081830303815290604052610a37565b80516008556020810151600955604080516080810191829052919250610796918591600490819081845b81548152602001906001019080831161077857505050505083610a4f565b6107d65760405162461bcd60e51b8152602060048201526011602482015270212629903737ba103b32b934b334b2b21760791b60448201526064016103b4565b50506000828152600c602052604090206001908101805460ff1916821790555b92915050565b6004816004811061040557600080fd5b6000546001600160a01b031633146108365760405162461bcd60e51b81526004016103b490610fad565b6001600160a01b0382166000908152600a60205260409020541561089c5760405162461bcd60e51b815260206004820152601e60248201527f466972737420696e766573746d656e7420616c7265616479206d6164652e000060448201526064016103b4565b6001600160a01b0382166000908152600a60205260408120829055600180548392906108c9908490611005565b9250508190555080600260008282546108e29190611005565b9091555050600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b03939093169290921790915550565b80825560018201805460ff1916905560005b600b548110156109bd576000600b828154811061096c5761096c611018565b60009182526020822001546001600160a01b0316915061098b8261052c565b6001600160a01b03909216600090815260028601602052604090209190915550806109b58161106f565b91505061094d565b505050565b600080805b600b54811015610a31576000600b82815481106109e6576109e6611018565b60009182526020808320909101546001600160a01b0316808352600a909152604090912060020154909150610a1b9084611005565b9250508080610a299061106f565b9150506109c7565b50919050565b610a3f610db5565b6107f68280519060200120610c35565b60008060405180610180016040528086600060028110610a7157610a71611018565b6020020151815260200186600160028110610a8e57610a8e611018565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200184600060028110610b4357610b43611018565b6020020151815260200184600160028110610b6057610b60611018565b6020020151815260200185600160048110610b7d57610b7d611018565b6020020151815260200185600060048110610b9a57610b9a611018565b6020020151815260200185600360048110610bb757610bb7611018565b6020020151815260200185600260048110610bd457610bd4611018565b602002015190529050610be5610dd3565b60006020826101808560086107d05a03fa90508080610c0057fe5b5080610c285760405162461bcd60e51b815260206004820152600060248201526044016103b4565b5051151595945050505050565b610c3d610db5565b6000610c5760008051602061109d83398151915284611088565b90506000805b60008051602061109d833981519152838409915060008051602061109d833981519152838309915060008051602061109d833981519152600383089150610ca382610cdf565b90925090508015610cbd5782845260208401829052610cd7565b60008051602061109d833981519152600184089250610c5d565b505050919050565b600080600060405160208152602080820152602060408201528460608201527f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52608082015260008051602061109d83398151915260a082015260208160c08360056107d05a03fa90519350905060008051602061109d8339815191528380098414915080610daf5760405162461bcd60e51b815260206004820152601c60248201527f424c533a2073717274206d6f646578702063616c6c206661696c65640000000060448201526064016103b4565b50915091565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6020808252825182820181905260009190848201906040850190845b81811015610e325783516001600160a01b031683529284019291840191600101610e0d565b50909695505050505050565b600060208284031215610e5057600080fd5b5035919050565b80356001600160a01b0381168114610e6e57600080fd5b919050565b60008060408385031215610e8657600080fd5b610e8f83610e57565b946020939093013593505050565b600060208284031215610eaf57600080fd5b610eb882610e57565b9392505050565b600060808284031215610ed157600080fd5b82608083011115610a3157600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060608385031215610f0a57600080fd5b82359150602084603f850112610f1f57600080fd5b6040516040810181811067ffffffffffffffff82111715610f4257610f42610ee1565b604052806060860187811115610f5757600080fd5b8387015b81811015610f725780358352918401918401610f5b565b50505080925050509250929050565b60008060408385031215610f9457600080fd5b82359150610fa460208401610e57565b90509250929050565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156107f6576107f6610fef565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176107f6576107f6610fef565b634e487b7160e01b600052601260045260246000fd5b60008261106a5761106a611045565b500490565b60006001820161108157611081610fef565b5060010190565b60008261109757611097611045565b50069056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122061d151eebbed3d4701eff32bf552042383537b7a5c577218e366d0386b6d5a2164736f6c63430008130033",
  "bytecodeSha1": "71480cc5ff771fdb8838b09b12c0668241a03a99",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.19+commit.7dd6d404"
  },
  "contractName": "Dividends",
  "coverageMap": {
    "branches": {
      "0": {
        "BLS.sqrt": {
          "47": [
            15912,
            15923,
            true
          ]
        },
        "BLS.verifySingle": {
          "46": [
            3334,
            3341,
            true
          ]
        }
      },
      "1": {},
      "2": {
        "Dividends.addFirstInvestment": {
          "45": [
            1107,
            1154,
            true
          ]
        },
        "Dividends.calculateDividends": {
          "43": [
            2939,
            2955,
            false
          ]
        },
        "Dividends.verifyProposal": {
          "44": [
            4248,
            4306,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "BLS.hashToPoint": {
          "31": [
            4873,
            4907
          ]
        },
        "BLS.mapToPoint": {
          "34": [
            5117,
            5136
          ],
          "35": [
            5150,
            5169
          ],
          "36": [
            5183,
            5202
          ],
          "37": [
            5216,
            5236
          ],
          "38": [
            5279,
            5287
          ],
          "39": [
            5305,
            5313
          ],
          "40": [
            5331,
            5336
          ],
          "41": [
            5364,
            5383
          ]
        },
        "BLS.sqrt": {
          "42": [
            15904,
            15956
          ]
        },
        "BLS.verifySingle": {
          "32": [
            3326,
            3346
          ],
          "33": [
            3356,
            3374
          ]
        }
      },
      "1": {},
      "2": {
        "Dividends.addFirstInvestment": {
          "19": [
            1099,
            1189
          ],
          "20": [
            1199,
            1251
          ],
          "21": [
            1261,
            1287
          ],
          "22": [
            1297,
            1328
          ],
          "23": [
            1338,
            1377
          ]
        },
        "Dividends.addSecondInvestment": {
          "11": [
            1475,
            1564
          ],
          "12": [
            1574,
            1628
          ],
          "13": [
            1638,
            1670
          ],
          "14": [
            1680,
            1706
          ]
        },
        "Dividends.calculateDividends": {
          "10": [
            2971,
            3023
          ]
        },
        "Dividends.calculateTotalIncome": {
          "28": [
            2503,
            2551
          ],
          "29": [
            2424,
            2427
          ],
          "30": [
            2571,
            2589
          ]
        },
        "Dividends.createProposal": {
          "2": [
            3842,
            3890
          ],
          "3": [
            3900,
            3918
          ]
        },
        "Dividends.createProposalStruct": {
          "24": [
            3378,
            3395
          ],
          "25": [
            3405,
            3433
          ],
          "26": [
            3639,
            3693
          ],
          "27": [
            3496,
            3499
          ]
        },
        "Dividends.getShareholderAddresses": {
          "1": [
            4526,
            4553
          ]
        },
        "Dividends.getShareholderDividends": {
          "0": [
            4682,
            4746
          ]
        },
        "Dividends.setAggBlsPublicKey": {
          "6": [
            2062,
            2101
          ],
          "7": [
            2111,
            2150
          ],
          "8": [
            2160,
            2199
          ],
          "9": [
            2209,
            2248
          ]
        },
        "Dividends.setShareholderIncome": {
          "4": [
            1815,
            1904
          ],
          "5": [
            1914,
            1957
          ]
        },
        "Dividends.verifyProposal": {
          "15": [
            4164,
            4192
          ],
          "16": [
            4202,
            4230
          ],
          "17": [
            4240,
            4328
          ],
          "18": [
            4338,
            4379
          ]
        }
      }
    }
  },
  "dependencies": [
    "BLS",
    "BN256G2"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "95:4665:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4442:118;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;708:53;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;1030:25:3;;;1098:14;;1091:22;1086:2;1071:18;;1064:50;1003:18;708:53:2;862:258:3;146:30:2;;;;;;;;;1271:25:3;;;1259:2;1244:18;146:30:2;1125:177:3;3716:209:2;;;:::i;:::-;;304:29;;;;;;:::i;:::-;;:::i;1719:245::-;;;;;;:::i;:::-;;:::i;608:51::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2137:25:3;;;2193:2;2178:18;;2171:34;;;;2221:18;;;2214:34;2125:2;2110:18;608:51:2;1935:319:3;665:37:2;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2423:32:3;;;2405:51;;2393:2;2378:18;665:37:2;2259:203:3;1970:285:2;;;;;;:::i;:::-;;:::i;120:20::-;;;;;-1:-1:-1;;;;;120:20:2;;;2602:672;;;;;;:::i;:::-;;:::i;223:36::-;;;;;;1390:323;;;;;;:::i;:::-;;:::i;182:35::-;;;;;;3931:476;;;;;;:::i;:::-;;:::i;:::-;;;3868:14:3;;3861:22;3843:41;;3831:2;3816:18;3931:476:2;3703:187:3;265:33:2;;;;;;:::i;:::-;;:::i;767:28::-;;;;;;4566:187;;;;;;:::i;:::-;4663:7;4689:22;;;:9;:22;;;;;;;;-1:-1:-1;;;;;4689:57:2;;;;:43;;:57;;;;;;4566:187;;;;;1005:379;;;;;;:::i;:::-;;:::i;4442:118::-;4498:16;4533:20;4526:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4526:27:2;;;;;;;;;;;;;;;;;;;;;;;4442:118;:::o;3716:209::-;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;;;;;;;;;3818:13:::1;::::0;3769:36:::1;3808:24:::0;;;:9:::1;:24;::::0;;;;;3842:48:::1;::::0;3808:24;;3842:20:::1;:48::i;:::-;3917:1;3900:13;;:18;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;3716:209:2:o;304:29::-;;;;;;;;;;;;;;;-1:-1:-1;304:29:2;:::o;1719:245::-;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;1823:26:2;::::1;1868:1;1823:26:::0;;;:12:::1;:26;::::0;;;;:42;1815:89:::1;;;::::0;-1:-1:-1;;;1815:89:2;;5021:2:3;1815:89:2::1;::::0;::::1;5003:21:3::0;5060:2;5040:18;;;5033:30;5099:32;5079:18;;;5072:60;5149:18;;1815:89:2::1;4819:354:3::0;1815:89:2::1;-1:-1:-1::0;;;;;1914:26:2;;::::1;;::::0;;;:12:::1;:26;::::0;;;;:33:::1;;:43:::0;1719:245::o;665:37::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;665:37:2;;-1:-1:-1;665:37:2;:::o;1970:285::-;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;2083:18;::::1;2062:15;:39:::0;2083:18:::1;2132::::0;::::1;;2111::::0;:39;2181:18;;::::1;;2160::::0;:39;2230:18;::::1;;2209::::0;:39;1970:285::o;2602:672::-;-1:-1:-1;;;;;2715:26:2;;2673:7;2715:26;;;:12;:26;;;;;;;;2692:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2673:7;2773:22;:20;:22::i;:::-;2884:1;2860:20;;2841:17;;2751:44;;-1:-1:-1;2805:24:2;;2834;;:4;:24;:::i;:::-;2833:47;;;;:::i;:::-;2832:53;;;;:::i;:::-;2805:80;-1:-1:-1;2895:26:2;2939:16;;2935:99;;3012:11;3000:1;:8;;;2993:4;:15;;;;:::i;:::-;2992:31;;;;:::i;:::-;2971:52;;2935:99;3043:29;3105:15;;3083:1;:18;;;3076:4;:25;;;;:::i;:::-;3075:45;;;;:::i;:::-;3043:77;-1:-1:-1;3130:23:2;3209:25;3233:1;3043:77;3209:25;:::i;:::-;3182:22;3203:1;3182:18;:22;:::i;:::-;3157:20;3176:1;3157:16;:20;:::i;:::-;3156:49;;;;:::i;:::-;:79;;;;:::i;:::-;3130:105;2602:672;-1:-1:-1;;;;;;;;2602:672:2:o;1390:323::-;-1:-1:-1;;;;;1483:26:2;;1528:1;1483:26;;;:12;:26;;;;;:42;1475:89;;;;-1:-1:-1;;;1475:89:2;;5021:2:3;1475:89:2;;;5003:21:3;5060:2;5040:18;;;5033:30;5099:32;5079:18;;;5072:60;5149:18;;1475:89:2;4819:354:3;1475:89:2;-1:-1:-1;;;;;1574:26:2;;;;;;:12;:26;;;;;:43;;:54;;1621:7;;1574:26;:54;;1621:7;;1574:54;:::i;:::-;;;;;;;;1663:7;1638:21;;:32;;;;;;;:::i;:::-;;;;;;;;1699:7;1680:15;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;1390:323:2:o;3931:476::-;4063:4;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;4079:26:::1;4108:46;4141:11;4124:29;;;;;;5869:19:3::0;;5913:2;5904:12;;5740:182;4124:29:2::1;;;;;;;;;;;;;4108:15;:46::i;:::-;4181:11:::0;;4164::::1;:28:::0;4181:11:::1;4219::::0;::::1;::::0;4202:14;:28;4248:58:::1;::::0;;;;::::1;::::0;;;;4079:75;;-1:-1:-1;4248:58:2::1;::::0;4265:13;;4280:15:::1;::::0;;;;4248:58;::::1;;;;;;;;;;;;;;;;;;;;;4297:8;4248:16;:58::i;:::-;4240:88;;;::::0;-1:-1:-1;;;4240:88:2;;6129:2:3;4240:88:2::1;::::0;::::1;6111:21:3::0;6168:2;6148:18;;;6141:30;-1:-1:-1;;;6187:18:3;;;6180:47;6244:18;;4240:88:2::1;5927:341:3::0;4240:88:2::1;-1:-1:-1::0;;4338:22:2::1;::::0;;;:9:::1;:22;::::0;;;;4375:4:::1;4338:34:::0;;::::1;:41:::0;;-1:-1:-1;;4338:41:2::1;::::0;::::1;::::0;;909:1:::1;3931:476:::0;;;;:::o;265:33::-;;;;;;;;;;;1005:379;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;1107:26:2;::::1;;::::0;;;:12:::1;:26;::::0;;;;:42;:47;1099:90:::1;;;::::0;-1:-1:-1;;;1099:90:2;;6475:2:3;1099:90:2::1;::::0;::::1;6457:21:3::0;6514:2;6494:18;;;6487:30;6553:32;6533:18;;;6526:60;6603:18;;1099:90:2::1;6273:354:3::0;1099:90:2::1;-1:-1:-1::0;;;;;1199:26:2;::::1;;::::0;;;:12:::1;:26;::::0;;;;:52;;;1261:15:::1;:26:::0;;1244:7;;1199:26;1261::::1;::::0;1244:7;;1261:26:::1;:::i;:::-;;;;;;;;1321:7;1297:20;;:31;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;1338:20:2::1;:39:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1338:39:2;;;;;::::1;::::0;;-1:-1:-1;;;;;;1338:39:2::1;-1:-1:-1::0;;;;;1338:39:2;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;1005:379:2:o;3280:430::-;3378:17;;;3405:20;;;:28;;-1:-1:-1;;3405:28:2;;;3378:11;3443:261;3467:20;:27;3463:31;;3443:261;;;3515:19;3537:20;3558:1;3537:23;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;3537:23:2;;-1:-1:-1;3594:31:2;3537:23;3594:18;:31::i;:::-;-1:-1:-1;;;;;3639:42:2;;;;;;;:29;;;:42;;;;;:54;;;;-1:-1:-1;3496:3:2;;;;:::i;:::-;;;;3443:261;;;;3280:430;;:::o;2265:331::-;2319:7;;;2371:191;2395:20;:27;2391:31;;2371:191;;;2443:20;2466;2487:1;2466:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;2466:23:2;2518:26;;;:12;:26;;;;;;;:33;;;2466:23;;-1:-1:-1;2503:48:2;;;;:::i;:::-;;;2429:133;2424:3;;;;;:::i;:::-;;;;2371:191;;;-1:-1:-1;2578:11:2;2265:331;-1:-1:-1;2265:331:2:o;4779:135:0:-;4842:19;;:::i;:::-;4880:27;4901:4;4891:15;;;;;;4880:10;:27::i;2535:846::-;2692:4;2708:24;:259;;;;;;;;2736:9;2746:1;2736:12;;;;;;;:::i;:::-;;;;;2708:259;;;;2750:9;2760:1;2750:12;;;;;;;:::i;:::-;;;;;2708:259;;;;1177:77;2708:259;;;;1285:77;2708:259;;;;1393:77;2708:259;;;;1501:77;2708:259;;;;2864:7;2872:1;2864:10;;;;;;;:::i;:::-;;;;;2708:259;;;;2876:7;2884:1;2876:10;;;;;;;:::i;:::-;;;;;2708:259;;;;2924:6;2931:1;2924:9;;;;;;;:::i;:::-;;;;;2708:259;;;;2935:6;2942:1;2935:9;;;;;;;:::i;:::-;;;;;2708:259;;;;2946:6;2953:1;2946:9;;;;;;;:::i;:::-;;;;;2708:259;;;;2957:6;2964:1;2957:9;;;;;;;:::i;:::-;;;;;2708:259;;;-1:-1:-1;3014:21:0;;:::i;:::-;3045:12;3214:4;3209:3;3204;3197:5;3194:1;3187:4;3180:5;3176:16;3165:54;3154:65;-1:-1:-1;3154:65:0;;3232:75;3259:48;3284:9;3232:75;;3334:7;3326:20;;;;-1:-1:-1;;;3326:20:0;;6974:2:3;3326:20:0;;;6956:21:3;-1:-1:-1;6993:18:3;;;6986:29;7032:18;;3326:20:0;6772:284:3;3326:20:0;-1:-1:-1;3363:6:0;:11;;;;-1:-1:-1;;;;;2535:846:0:o;4920:480::-;4975:19;;:::i;:::-;5006:9;5018:15;-1:-1:-1;;;;;;;;;;;5026:2:0;5018:15;:::i;:::-;5006:27;-1:-1:-1;5043:9:0;;5090:304;-1:-1:-1;;;;;;;;;;;5131:1:0;5128;5121:15;5117:19;-1:-1:-1;;;;;;;;;;;;5164:1:0;5161;5154:15;5150:19;-1:-1:-1;;;;;;;;;;;;5197:1:0;5194;5187:15;5183:19;;5229:7;5234:1;5229:4;:7::i;:::-;5216:20;;-1:-1:-1;5216:20:0;-1:-1:-1;5250:101:0;;;;5279:8;;;:4;5305;;:8;;;5331:5;;5250:101;-1:-1:-1;;;;;;;;;;;5378:1:0;5375;5368:15;5364:19;;5090:304;;;4996:404;;;4920:480;;;:::o;14933:1030::-;14982:9;14993:12;15017:16;15151:4;15145:11;15185:4;15176:7;15169:21;15230:4;15223;15214:7;15210:18;15203:32;15275:4;15268;15259:7;15255:18;15248:32;15320:2;15313:4;15304:7;15300:18;15293:30;15458:65;15451:4;15442:7;15438:18;15431:93;-1:-1:-1;;;;;;;;;;;15643:4:0;15634:7;15630:18;15623:94;15801:4;15792:7;15786:4;15777:7;15774:1;15767:4;15760:5;15756:16;15745:61;15824:14;;;-1:-1:-1;15730:76:0;-1:-1:-1;;;;;;;;;;;;15824:14:0;;15869:15;15865:2;15862:23;15851:34;;15912:11;15904:52;;;;-1:-1:-1;;;15904:52:0;;7380:2:3;15904:52:0;;;7362:21:3;7419:2;7399:18;;;7392:30;7458;7438:18;;;7431:58;7506:18;;15904:52:0;7178:352:3;15904:52:0;15007:956;14933:1030;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:658:3:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:3;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:3;;14:658;-1:-1:-1;;;;;;14:658:3:o;677:180::-;736:6;789:2;777:9;768:7;764:23;760:32;757:52;;;805:1;802;795:12;757:52;-1:-1:-1;828:23:3;;677:180;-1:-1:-1;677:180:3:o;1307:173::-;1375:20;;-1:-1:-1;;;;;1424:31:3;;1414:42;;1404:70;;1470:1;1467;1460:12;1404:70;1307:173;;;:::o;1485:254::-;1553:6;1561;1614:2;1602:9;1593:7;1589:23;1585:32;1582:52;;;1630:1;1627;1620:12;1582:52;1653:29;1672:9;1653:29;:::i;:::-;1643:39;1729:2;1714:18;;;;1701:32;;-1:-1:-1;;;1485:254:3:o;1744:186::-;1803:6;1856:2;1844:9;1835:7;1831:23;1827:32;1824:52;;;1872:1;1869;1862:12;1824:52;1895:29;1914:9;1895:29;:::i;:::-;1885:39;1744:186;-1:-1:-1;;;1744:186:3:o;2467:253::-;2551:6;2604:3;2592:9;2583:7;2579:23;2575:33;2572:53;;;2621:1;2618;2611:12;2572:53;2661:7;2655:3;2644:9;2640:19;2637:32;2634:52;;;2682:1;2679;2672:12;2725:127;2786:10;2781:3;2777:20;2774:1;2767:31;2817:4;2814:1;2807:15;2841:4;2838:1;2831:15;2857:841;2948:6;2956;3009:2;2997:9;2988:7;2984:23;2980:32;2977:52;;;3025:1;3022;3015:12;2977:52;3061:9;3048:23;3038:33;;3090:2;3135:7;3130:2;3119:9;3115:18;3111:32;3101:60;;3157:1;3154;3147:12;3101:60;3190:2;3184:9;3232:2;3224:6;3220:15;3301:6;3289:10;3286:22;3265:18;3253:10;3250:34;3247:62;3244:88;;;3312:18;;:::i;:::-;3348:2;3341:22;3383:6;3427:2;3412:18;;3442:19;;;3439:39;;;3474:1;3471;3464:12;3439:39;3513:2;3502:9;3498:18;3525:142;3541:6;3536:3;3533:15;3525:142;;;3607:17;;3595:30;;3645:12;;;;3558;;3525:142;;;3529:3;;;3686:6;3676:16;;;;2857:841;;;;;:::o;3895:254::-;3963:6;3971;4024:2;4012:9;4003:7;3999:23;3995:32;3992:52;;;4040:1;4037;4030:12;3992:52;4076:9;4063:23;4053:33;;4105:38;4139:2;4128:9;4124:18;4105:38;:::i;:::-;4095:48;;3895:254;;;;;:::o;4154:398::-;4356:2;4338:21;;;4395:2;4375:18;;;4368:30;4434:34;4429:2;4414:18;;4407:62;-1:-1:-1;;;4500:2:3;4485:18;;4478:32;4542:3;4527:19;;4154:398::o;4557:127::-;4618:10;4613:3;4609:20;4606:1;4599:31;4649:4;4646:1;4639:15;4673:4;4670:1;4663:15;4689:125;4754:9;;;4775:10;;;4772:36;;;4788:18;;:::i;5178:127::-;5239:10;5234:3;5230:20;5227:1;5220:31;5270:4;5267:1;5260:15;5294:4;5291:1;5284:15;5310:168;5383:9;;;5414;;5431:15;;;5425:22;;5411:37;5401:71;;5452:18;;:::i;5483:127::-;5544:10;5539:3;5535:20;5532:1;5525:31;5575:4;5572:1;5565:15;5599:4;5596:1;5589:15;5615:120;5655:1;5681;5671:35;;5686:18;;:::i;:::-;-1:-1:-1;5720:9:3;;5615:120::o;6632:135::-;6671:3;6692:17;;;6689:43;;6712:18;;:::i;:::-;-1:-1:-1;6759:1:3;6748:13;;6632:135::o;7061:112::-;7093:1;7119;7109:35;;7124:18;;:::i;:::-;-1:-1:-1;7158:9:3;;7061:112::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    95,
    4760
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x120 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC40C6C5C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC40C6C5C EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xCE7E03F0 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0xDA35C664 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0xDEB1557D EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0xFB8159EB EQ PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x912C1555 EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0xA5872C72 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xAC30B1FF EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0xB2B233D2 EQ PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1C063C41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x1C063C41 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x4C06D9E3 EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x5C2930AD EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x5C3184DC EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x65EFB3CD EQ PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x39B55C EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x13CF08B EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x10EA13DF EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x180FD87F EQ PUSH2 0x199 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12D PUSH2 0x328 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xDF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3E JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x18B PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x38A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3E JUMP JUMPDEST PUSH2 0x3F5 JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x226 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3E JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0xEBF JUMP JUMPDEST PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x226 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9D JUMP JUMPDEST PUSH2 0x52C JUMP JUMPDEST PUSH2 0x18B PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x62C JUMP JUMPDEST PUSH2 0x18B PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2AF PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0xE3E JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH2 0x18B PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF81 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x323 CALLDATASIZE PUSH1 0x4 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x80C JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x362 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH2 0x3DA SWAP1 DUP3 SWAP1 PUSH2 0x93B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP2 PUSH1 0x2 DUP2 LT PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x436 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x49B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SSTORE JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xFAD JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 SSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x5 SSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x6 SSTORE PUSH1 0x60 ADD CALLDATALOAD PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD MSTORE DUP2 PUSH2 0x570 PUSH2 0x9C2 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD DUP5 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH2 0x588 SWAP1 PUSH2 0x3E8 PUSH2 0x102E JUMP JUMPDEST PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x105B JUMP JUMPDEST PUSH2 0x59C SWAP2 SWAP1 PUSH2 0x105B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x5C6 JUMPI DUP3 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x3E8 PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x102E JUMP JUMPDEST PUSH2 0x5C3 SWAP2 SWAP1 PUSH2 0x105B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x3E8 PUSH2 0x5DD SWAP2 SWAP1 PUSH2 0x102E JUMP JUMPDEST PUSH2 0x5E7 SWAP2 SWAP1 PUSH2 0x105B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5F6 PUSH1 0x4 DUP4 PUSH2 0x105B JUMP JUMPDEST PUSH2 0x601 PUSH1 0x2 DUP6 PUSH2 0x105B JUMP JUMPDEST PUSH2 0x60C PUSH1 0x4 DUP8 PUSH2 0x105B JUMP JUMPDEST PUSH2 0x616 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH2 0x620 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x6BC SWAP1 DUP5 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6D5 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x722 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x74E DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x73A SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xA37 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x8 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x9 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH2 0x796 SWAP2 DUP6 SWAP2 PUSH1 0x4 SWAP1 DUP2 SWAP1 DUP2 DUP5 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x778 JUMPI POP POP POP POP POP DUP4 PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x7D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x212629903737BA103B32B934B334B2B217 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 OR SWAP1 SSTORE JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 LT PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972737420696E766573746D656E7420616C7265616479206D6164652E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x8C9 SWAP1 DUP5 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x8E2 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST DUP1 DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x0 JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x9BD JUMPI PUSH1 0x0 PUSH1 0xB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x96C JUMPI PUSH2 0x96C PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x98B DUP3 PUSH2 0x52C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP DUP1 PUSH2 0x9B5 DUP2 PUSH2 0x106F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x94D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0xA31 JUMPI PUSH1 0x0 PUSH1 0xB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x9E6 JUMPI PUSH2 0x9E6 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0xA SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0xA1B SWAP1 DUP5 PUSH2 0x1005 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0xA29 SWAP1 PUSH2 0x106F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9C7 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA3F PUSH2 0xDB5 JUMP JUMPDEST PUSH2 0x7F6 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xC35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0xA71 JUMPI PUSH2 0xA71 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0xA8E JUMPI PUSH2 0xA8E PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x198E9393920D483A7260BFB731FB5D25F1AA493335A9E71297E485B7AEF312C2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1800DEEF121F1E76426A00665E5C4479674322D4F75EDADD46DEBD5CD992F6ED DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x275DC4A288D1AFB3CBB1AC09187524C7DB36395DF7BE3B99E673B13A075A65EC DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1D9BEFCD05A5323E6DA4D435F3B617CDB3AF83285C2DF711EF39C01571827F9D DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0xB43 JUMPI PUSH2 0xB43 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0xB60 JUMPI PUSH2 0xB60 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x4 DUP2 LT PUSH2 0xB7D JUMPI PUSH2 0xB7D PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 PUSH1 0x4 DUP2 LT PUSH2 0xB9A JUMPI PUSH2 0xB9A PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x3 PUSH1 0x4 DUP2 LT PUSH2 0xBB7 JUMPI PUSH2 0xBB7 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x2 PUSH1 0x4 DUP2 LT PUSH2 0xBD4 JUMPI PUSH2 0xBD4 PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 MSTORE SWAP1 POP PUSH2 0xBE5 PUSH2 0xDD3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 PUSH2 0x180 DUP6 PUSH1 0x8 PUSH2 0x7D0 GAS SUB STATICCALL SWAP1 POP DUP1 DUP1 PUSH2 0xC00 JUMPI INVALID JUMPDEST POP DUP1 PUSH2 0xC28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3B4 JUMP JUMPDEST POP MLOAD ISZERO ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC3D PUSH2 0xDB5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC57 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1088 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP5 MULMOD SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 MULMOD SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x3 DUP4 ADDMOD SWAP2 POP PUSH2 0xCA3 DUP3 PUSH2 0xCDF JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xCBD JUMPI DUP3 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0xCD7 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 DUP5 ADDMOD SWAP3 POP PUSH2 0xC5D JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP3 ADD MSTORE DUP5 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP4 PUSH1 0x5 PUSH2 0x7D0 GAS SUB STATICCALL SWAP1 MLOAD SWAP4 POP SWAP1 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x109D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP1 MULMOD DUP5 EQ SWAP2 POP DUP1 PUSH2 0xDAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x424C533A2073717274206D6F646578702063616C6C206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE32 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xE0D JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8F DUP4 PUSH2 0xE57 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB8 DUP3 PUSH2 0xE57 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x80 DUP4 ADD GT ISZERO PUSH2 0xA31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x3F DUP6 ADD SLT PUSH2 0xF1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xF42 JUMPI PUSH2 0xF42 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP7 ADD DUP8 DUP2 GT ISZERO PUSH2 0xF57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF72 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 DUP5 ADD PUSH2 0xF5B JUMP JUMPDEST POP POP POP DUP1 SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xFA4 PUSH1 0x20 DUP5 ADD PUSH2 0xE57 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3717 PUSH1 0xF1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7F6 JUMPI PUSH2 0x7F6 PUSH2 0xFEF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7F6 JUMPI PUSH2 0x7F6 PUSH2 0xFEF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x106A JUMPI PUSH2 0x106A PUSH2 0x1045 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1081 JUMPI PUSH2 0x1081 PUSH2 0xFEF JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1097 JUMPI PUSH2 0x1097 PUSH2 0x1045 JUMP JUMPDEST POP MOD SWAP1 JUMP INVALID ADDRESS PUSH5 0x4E72E131A0 0x29 0xB8 POP GASLIMIT 0xB6 DUP2 DUP2 PC 0x5D SWAP8 DUP2 PUSH11 0x916871CA8D3C208C16D87C REVERT SELFBALANCE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xD151 0xEE 0xBB 0xED RETURNDATASIZE SELFBALANCE ADD 0xEF RETURN 0x2B CREATE2 MSTORE DIV 0x23 DUP4 MSTORE8 PUSH28 0x7A5C577218E366D0386B6D5A2164736F6C6343000813003300000000 ",
  "pcMap": {
    "0": {
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x120"
    },
    "25": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "38": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAD"
    },
    "42": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC40C6C5C"
    },
    "49": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "GT",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC40C6C5C"
    },
    "60": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x29C"
    },
    "64": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xCE7E03F0"
    },
    "71": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2BF"
    },
    "75": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xDA35C664"
    },
    "82": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2D2"
    },
    "86": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xDEB1557D"
    },
    "93": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2DB"
    },
    "97": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "99": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xFB8159EB"
    },
    "104": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "105": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x315"
    },
    "108": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "109": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "112": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "REVERT",
      "path": "2"
    },
    "113": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "120": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x251"
    },
    "124": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x912C1555"
    },
    "131": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x264"
    },
    "135": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "137": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA5872C72"
    },
    "142": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "143": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x277"
    },
    "146": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "148": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAC30B1FF"
    },
    "153": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "154": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x280"
    },
    "157": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "158": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "159": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xB2B233D2"
    },
    "164": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "165": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x293"
    },
    "168": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "169": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "172": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "REVERT",
      "path": "2"
    },
    "173": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "174": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "175": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x1C063C41"
    },
    "180": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "GT",
      "path": "2"
    },
    "181": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF4"
    },
    "184": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "185": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "186": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x1C063C41"
    },
    "191": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "192": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A3"
    },
    "195": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "196": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "197": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x4C06D9E3"
    },
    "202": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "203": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B6"
    },
    "206": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "207": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "208": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x5C2930AD"
    },
    "213": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "214": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C9"
    },
    "217": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "218": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "219": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x5C3184DC"
    },
    "224": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "225": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x213"
    },
    "228": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "229": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "230": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x65EFB3CD"
    },
    "235": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "236": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x23E"
    },
    "239": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "240": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "242": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "243": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "REVERT",
      "path": "2"
    },
    "244": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "245": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "246": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0x39B55C"
    },
    "250": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "251": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x125"
    },
    "254": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "255": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "256": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x13CF08B"
    },
    "261": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "262": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x143"
    },
    "265": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "266": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "267": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x10EA13DF"
    },
    "272": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "273": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x182"
    },
    "276": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "277": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "278": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x180FD87F"
    },
    "283": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "EQ",
      "path": "2"
    },
    "284": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x199"
    },
    "287": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "288": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "289": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "291": {
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "DUP1",
      "path": "2"
    },
    "292": {
      "first_revert": true,
      "fn": null,
      "offset": [
        95,
        4760
      ],
      "op": "REVERT",
      "path": "2"
    },
    "293": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "294": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12D"
    },
    "297": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x328"
    },
    "300": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "i",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMP",
      "path": "2"
    },
    "301": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "302": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "304": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "305": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "308": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "309": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "310": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDF1"
    },
    "313": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "i",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMP",
      "path": "2"
    },
    "314": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "315": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "317": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "318": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "DUP1",
      "path": "2"
    },
    "319": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "320": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "SUB",
      "path": "2"
    },
    "321": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "322": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "RETURN",
      "path": "2"
    },
    "323": {
      "offset": [
        708,
        761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "324": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16D"
    },
    "327": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x151"
    },
    "330": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "331": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "333": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE3E"
    },
    "336": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "i",
      "offset": [
        708,
        761
      ],
      "op": "JUMP",
      "path": "2"
    },
    "337": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "338": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "340": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "342": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "343": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "345": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "346": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP2",
      "path": "2"
    },
    "347": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "348": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "350": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "351": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "352": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP1",
      "path": "2"
    },
    "353": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "354": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "356": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "357": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "358": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "ADD",
      "path": "2"
    },
    "359": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "360": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "362": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "AND",
      "path": "2"
    },
    "363": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP3",
      "path": "2"
    },
    "364": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "JUMP",
      "path": "2"
    },
    "365": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "366": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "368": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP1",
      "path": "2"
    },
    "369": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "370": {
      "op": "SWAP3"
    },
    "371": {
      "op": "DUP4"
    },
    "372": {
      "op": "MSTORE"
    },
    "373": {
      "op": "SWAP1"
    },
    "374": {
      "op": "ISZERO"
    },
    "375": {
      "op": "ISZERO"
    },
    "376": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "378": {
      "op": "DUP4"
    },
    "379": {
      "op": "ADD"
    },
    "380": {
      "op": "MSTORE"
    },
    "381": {
      "op": "ADD"
    },
    "382": {
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "385": {
      "op": "JUMP"
    },
    "386": {
      "offset": [
        146,
        176
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "387": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "390": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "392": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "393": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "DUP2",
      "path": "2"
    },
    "394": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "JUMP",
      "path": "2"
    },
    "395": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "396": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "398": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "399": {
      "op": "SWAP1"
    },
    "400": {
      "op": "DUP2"
    },
    "401": {
      "op": "MSTORE"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "404": {
      "op": "ADD"
    },
    "405": {
      "offset": [
        146,
        176
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "408": {
      "op": "JUMP"
    },
    "409": {
      "fn": "Dividends.createProposal",
      "offset": [
        3716,
        3925
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "410": {
      "fn": "Dividends.createProposal",
      "offset": [
        3716,
        3925
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "413": {
      "fn": "Dividends.createProposal",
      "offset": [
        3716,
        3925
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x38A"
    },
    "416": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        3716,
        3925
      ],
      "op": "JUMP",
      "path": "2"
    },
    "417": {
      "fn": "Dividends.createProposal",
      "offset": [
        3716,
        3925
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "418": {
      "fn": "Dividends.createProposal",
      "offset": [
        3716,
        3925
      ],
      "op": "STOP",
      "path": "2"
    },
    "419": {
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "420": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "423": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B1"
    },
    "426": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "427": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "429": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE3E"
    },
    "432": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        304,
        333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "433": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "434": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3F5"
    },
    "437": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        304,
        333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "438": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "439": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "442": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C4"
    },
    "445": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "446": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "448": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE73"
    },
    "451": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "452": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "453": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x40C"
    },
    "456": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "457": {
      "offset": [
        608,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "458": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F8"
    },
    "461": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1D7"
    },
    "464": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "465": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "467": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE9D"
    },
    "470": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        608,
        659
      ],
      "op": "JUMP",
      "path": "2"
    },
    "471": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "472": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "474": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "476": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "477": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "479": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "480": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP2",
      "path": "2"
    },
    "481": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "482": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "484": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "485": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "486": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP1",
      "path": "2"
    },
    "487": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "488": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "490": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP3",
      "path": "2"
    },
    "491": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "ADD",
      "path": "2"
    },
    "492": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "493": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "495": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "496": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "497": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "ADD",
      "path": "2"
    },
    "498": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "499": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "500": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "501": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "502": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP4",
      "path": "2"
    },
    "503": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "JUMP",
      "path": "2"
    },
    "504": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "505": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "507": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP1",
      "path": "2"
    },
    "508": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "509": {
      "op": "SWAP4"
    },
    "510": {
      "op": "DUP5"
    },
    "511": {
      "op": "MSTORE"
    },
    "512": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "514": {
      "op": "DUP5"
    },
    "515": {
      "op": "ADD"
    },
    "516": {
      "op": "SWAP3"
    },
    "517": {
      "op": "SWAP1"
    },
    "518": {
      "op": "SWAP3"
    },
    "519": {
      "op": "MSTORE"
    },
    "520": {
      "op": "SWAP1"
    },
    "521": {
      "op": "DUP3"
    },
    "522": {
      "op": "ADD"
    },
    "523": {
      "op": "MSTORE"
    },
    "524": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "526": {
      "op": "ADD"
    },
    "527": {
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "530": {
      "op": "JUMP"
    },
    "531": {
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "532": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x226"
    },
    "535": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x221"
    },
    "538": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "539": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "541": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE3E"
    },
    "544": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        665,
        702
      ],
      "op": "JUMP",
      "path": "2"
    },
    "545": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "546": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4BA"
    },
    "549": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        665,
        702
      ],
      "op": "JUMP",
      "path": "2"
    },
    "550": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "551": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "553": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "558": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "560": {
      "op": "SHL"
    },
    "561": {
      "op": "SUB"
    },
    "562": {
      "op": "SWAP1"
    },
    "563": {
      "op": "SWAP2"
    },
    "564": {
      "op": "AND"
    },
    "565": {
      "op": "DUP2"
    },
    "566": {
      "op": "MSTORE"
    },
    "567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "569": {
      "op": "ADD"
    },
    "570": {
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "573": {
      "op": "JUMP"
    },
    "574": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "575": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "578": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x24C"
    },
    "581": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "582": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "584": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBF"
    },
    "587": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "i",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMP",
      "path": "2"
    },
    "588": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "589": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4E4"
    },
    "592": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "i",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMP",
      "path": "2"
    },
    "593": {
      "offset": [
        120,
        140
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "594": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "596": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "597": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x226"
    },
    "600": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "605": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "607": {
      "op": "SHL"
    },
    "608": {
      "op": "SUB"
    },
    "609": {
      "offset": [
        120,
        140
      ],
      "op": "AND",
      "path": "2"
    },
    "610": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "DUP2",
      "path": "2"
    },
    "611": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "JUMP",
      "path": "2"
    },
    "612": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "613": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "616": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x272"
    },
    "619": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "620": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "622": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE9D"
    },
    "625": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2602,
        3274
      ],
      "op": "JUMP",
      "path": "2"
    },
    "626": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "627": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x52C"
    },
    "630": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2602,
        3274
      ],
      "op": "JUMP",
      "path": "2"
    },
    "631": {
      "offset": [
        223,
        259
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "632": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "635": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "637": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "638": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "DUP2",
      "path": "2"
    },
    "639": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "JUMP",
      "path": "2"
    },
    "640": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "641": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "644": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28E"
    },
    "647": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "648": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "650": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE73"
    },
    "653": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMP",
      "path": "2"
    },
    "654": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "655": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x62C"
    },
    "658": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMP",
      "path": "2"
    },
    "659": {
      "offset": [
        182,
        217
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "660": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "663": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "665": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "666": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "DUP2",
      "path": "2"
    },
    "667": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "JUMP",
      "path": "2"
    },
    "668": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "669": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2AF"
    },
    "672": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2AA"
    },
    "675": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "676": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "678": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF7"
    },
    "681": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMP",
      "path": "2"
    },
    "682": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "683": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6F7"
    },
    "686": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMP",
      "path": "2"
    },
    "687": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "688": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "690": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "691": {
      "op": "SWAP1"
    },
    "692": {
      "op": "ISZERO"
    },
    "693": {
      "op": "ISZERO"
    },
    "694": {
      "op": "DUP2"
    },
    "695": {
      "op": "MSTORE"
    },
    "696": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "698": {
      "op": "ADD"
    },
    "699": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "702": {
      "op": "JUMP"
    },
    "703": {
      "offset": [
        265,
        298
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "704": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "707": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2CD"
    },
    "710": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "711": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "713": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE3E"
    },
    "716": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        265,
        298
      ],
      "op": "JUMP",
      "path": "2"
    },
    "717": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "718": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7FC"
    },
    "721": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        265,
        298
      ],
      "op": "JUMP",
      "path": "2"
    },
    "722": {
      "offset": [
        767,
        795
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "723": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "726": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xD"
    },
    "728": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "729": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "DUP2",
      "path": "2"
    },
    "730": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "JUMP",
      "path": "2"
    },
    "731": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "732": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "735": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2E9"
    },
    "738": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "739": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "741": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF81"
    },
    "744": {
      "fn": "Dividends.getShareholderDividends",
      "jump": "i",
      "offset": [
        4566,
        4753
      ],
      "op": "JUMP",
      "path": "2"
    },
    "745": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "746": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4663,
        4670
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "748": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 0
    },
    "749": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "DUP2",
      "path": "2"
    },
    "750": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "751": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4698
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "753": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "755": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "756": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "DUP2",
      "path": "2"
    },
    "757": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "758": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "760": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "DUP1",
      "path": "2"
    },
    "761": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "DUP4",
      "path": "2"
    },
    "762": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4711
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "763": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "767": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "769": {
      "op": "SHL"
    },
    "770": {
      "op": "SUB"
    },
    "771": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "DUP6",
      "path": "2"
    },
    "772": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "AND",
      "path": "2"
    },
    "773": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "DUP5",
      "path": "2"
    },
    "774": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "775": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4732
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "777": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4732
      ],
      "op": "ADD",
      "path": "2"
    },
    "778": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "779": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "780": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "781": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "782": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "783": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4689,
        4746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "784": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "785": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "786": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "POP",
      "path": "2"
    },
    "787": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "POP",
      "path": "2"
    },
    "788": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4566,
        4753
      ],
      "op": "JUMP",
      "path": "2"
    },
    "789": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "790": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "793": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x323"
    },
    "796": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "797": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "799": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE73"
    },
    "802": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "803": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "804": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x80C"
    },
    "807": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "808": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "809": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4498,
        4514
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "811": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4533,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0xB"
    },
    "813": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "814": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "815": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "816": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "818": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MUL",
      "path": "2"
    },
    "819": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "821": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ADD",
      "path": "2"
    },
    "822": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "824": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "825": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "826": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "827": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ADD",
      "path": "2"
    },
    "828": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "830": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "831": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "832": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "833": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "834": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "835": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "836": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "837": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "838": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "840": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ADD",
      "path": "2"
    },
    "841": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP3",
      "path": "2"
    },
    "842": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "843": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "844": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "845": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "846": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x380"
    },
    "849": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "850": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "852": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MUL",
      "path": "2"
    },
    "853": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP3",
      "path": "2"
    },
    "854": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ADD",
      "path": "2"
    },
    "855": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "856": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "857": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "859": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "860": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "862": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "864": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "865": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "866": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "867": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "868": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "869": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "871": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "873": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "875": {
      "op": "SHL"
    },
    "876": {
      "op": "SUB"
    },
    "877": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "AND",
      "path": "2"
    },
    "878": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "879": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "880": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "882": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "883": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "884": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ADD",
      "path": "2"
    },
    "885": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "886": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "888": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "ADD",
      "path": "2"
    },
    "889": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP1",
      "path": "2"
    },
    "890": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "DUP4",
      "path": "2"
    },
    "891": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "GT",
      "path": "2"
    },
    "892": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x362"
    },
    "895": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "896": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "897": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "POP",
      "path": "2"
    },
    "898": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "POP",
      "path": "2"
    },
    "899": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "POP",
      "path": "2"
    },
    "900": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "POP",
      "path": "2"
    },
    "901": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "POP",
      "path": "2"
    },
    "902": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "903": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4526,
        4553
      ],
      "op": "POP",
      "path": "2"
    },
    "904": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4442,
        4560
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "905": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "o",
      "offset": [
        4442,
        4560
      ],
      "op": "JUMP",
      "path": "2"
    },
    "906": {
      "fn": "Dividends.createProposal",
      "offset": [
        3716,
        3925
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "907": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "909": {
      "fn": "Dividends.createProposal",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "910": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "914": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "916": {
      "op": "SHL"
    },
    "917": {
      "op": "SUB"
    },
    "918": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "919": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "920": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "921": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3BD"
    },
    "924": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "925": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "927": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "928": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "932": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "934": {
      "op": "SHL"
    },
    "935": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "936": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "937": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "939": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "940": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "943": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "944": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFAD"
    },
    "947": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "948": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "949": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "951": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "952": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "DUP1",
      "path": "2"
    },
    "953": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "954": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SUB",
      "path": "2"
    },
    "955": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "956": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "957": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "958": {
      "fn": "Dividends.createProposal",
      "offset": [
        3818,
        3831
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xD"
    },
    "960": {
      "fn": "Dividends.createProposal",
      "offset": [
        3818,
        3831
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "961": {
      "fn": "Dividends.createProposal",
      "offset": [
        3769,
        3805
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "963": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "DUP2",
      "path": "2"
    },
    "964": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "DUP2",
      "path": "2"
    },
    "965": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "966": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3817
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "968": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "970": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "971": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "973": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "974": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "975": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "976": {
      "fn": "Dividends.createProposal",
      "offset": [
        3842,
        3890
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 2,
      "value": "0x3DA"
    },
    "979": {
      "fn": "Dividends.createProposal",
      "offset": [
        3842,
        3890
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "980": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "DUP3",
      "path": "2"
    },
    "981": {
      "fn": "Dividends.createProposal",
      "offset": [
        3808,
        3832
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "982": {
      "fn": "Dividends.createProposal",
      "offset": [
        3842,
        3862
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x93B"
    },
    "985": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        3842,
        3890
      ],
      "op": "JUMP",
      "path": "2"
    },
    "986": {
      "fn": "Dividends.createProposal",
      "offset": [
        3842,
        3890
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "987": {
      "fn": "Dividends.createProposal",
      "offset": [
        3917,
        3918
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x1"
    },
    "989": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3913
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xD"
    },
    "991": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3913
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "993": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "DUP3",
      "path": "2"
    },
    "994": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "DUP3",
      "path": "2"
    },
    "995": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "996": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3ED"
    },
    "999": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1000": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1001": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "1004": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        3900,
        3918
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1005": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1006": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1007": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1008": {
      "fn": "Dividends.createProposal",
      "offset": [
        3900,
        3918
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1009": {
      "op": "POP"
    },
    "1010": {
      "op": "POP"
    },
    "1011": {
      "op": "POP"
    },
    "1012": {
      "fn": "Dividends.createProposal",
      "jump": "o",
      "offset": [
        3716,
        3925
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1013": {
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1014": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "1016": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1017": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1019": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1020": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "LT",
      "path": "2"
    },
    "1021": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x405"
    },
    "1024": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1025": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1027": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1028": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1029": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1030": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "ADD",
      "path": "2"
    },
    "1031": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1032": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1033": {
      "op": "POP"
    },
    "1034": {
      "offset": [
        304,
        333
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1035": {
      "fn": "Dividends.createProposal",
      "jump": "o",
      "offset": [
        304,
        333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1036": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1037": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1039": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1040": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1042": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1044": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1046": {
      "op": "SHL"
    },
    "1047": {
      "op": "SUB"
    },
    "1048": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "1049": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1050": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "1051": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x436"
    },
    "1054": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1055": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1057": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1058": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1064": {
      "op": "SHL"
    },
    "1065": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1066": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1067": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1069": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1070": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1073": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1074": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFAD"
    },
    "1077": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1078": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1085": {
      "op": "SHL"
    },
    "1086": {
      "op": "SUB"
    },
    "1087": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 4
    },
    "1088": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "AND",
      "path": "2"
    },
    "1089": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1868,
        1869
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1091": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1092": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1093": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1094": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1835
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1096": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1098": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1099": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1101": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1102": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1103": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1865
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1104": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x49B"
    },
    "1107": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1108": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1110": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1111": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1117": {
      "op": "SHL"
    },
    "1118": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1119": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1120": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1122": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1124": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1125": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "ADD",
      "path": "2"
    },
    "1126": {
      "op": "MSTORE"
    },
    "1127": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "1129": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1131": {
      "op": "DUP3"
    },
    "1132": {
      "op": "ADD"
    },
    "1133": {
      "op": "MSTORE"
    },
    "1134": {
      "op": "PUSH32",
      "value": "0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1169": {
      "op": "DUP3"
    },
    "1170": {
      "op": "ADD"
    },
    "1171": {
      "op": "MSTORE"
    },
    "1172": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1174": {
      "op": "ADD"
    },
    "1175": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1178": {
      "op": "JUMP"
    },
    "1179": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1180": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1184": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1186": {
      "op": "SHL"
    },
    "1187": {
      "op": "SUB"
    },
    "1188": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 5
    },
    "1189": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1190": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "AND",
      "path": "2"
    },
    "1191": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1193": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1194": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1195": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1196": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1926
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1198": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1200": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1201": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1203": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1204": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1205": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1947
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1207": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1947
      ],
      "op": "ADD",
      "path": "2"
    },
    "1208": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1957
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1209": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "o",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1210": {
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1211": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "1213": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1214": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1215": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1216": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1217": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "LT",
      "path": "2"
    },
    "1218": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4CA"
    },
    "1221": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1222": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1224": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1225": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1226": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1227": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1229": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1230": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1231": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1232": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1234": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1235": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1236": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1237": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "ADD",
      "path": "2"
    },
    "1238": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1243": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1245": {
      "op": "SHL"
    },
    "1246": {
      "op": "SUB"
    },
    "1247": {
      "offset": [
        665,
        702
      ],
      "op": "AND",
      "path": "2"
    },
    "1248": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1249": {
      "op": "POP"
    },
    "1250": {
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1251": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "o",
      "offset": [
        665,
        702
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1252": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1253": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1255": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1260": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1262": {
      "op": "SHL"
    },
    "1263": {
      "op": "SUB"
    },
    "1264": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "1265": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1266": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "1267": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x50E"
    },
    "1270": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1271": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1273": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1274": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1280": {
      "op": "SHL"
    },
    "1281": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1282": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1283": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1285": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1286": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1289": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1290": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFAD"
    },
    "1293": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1294": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1295": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2083,
        2101
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 6
    },
    "1296": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2083,
        2101
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1297": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2062,
        2077
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1299": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2062,
        2101
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1300": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2083,
        2101
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1302": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2132,
        2150
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 7
    },
    "1303": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2132,
        2150
      ],
      "op": "ADD",
      "path": "2"
    },
    "1304": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2132,
        2150
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1305": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2111,
        2129
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1307": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2111,
        2150
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1308": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 8,
      "value": "0x40"
    },
    "1310": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1311": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "ADD",
      "path": "2"
    },
    "1312": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1313": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2160,
        2178
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "1315": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2160,
        2199
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1316": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2230,
        2248
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 9,
      "value": "0x60"
    },
    "1318": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2230,
        2248
      ],
      "op": "ADD",
      "path": "2"
    },
    "1319": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2230,
        2248
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1320": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2209,
        2227
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "1322": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2209,
        2248
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1323": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "o",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1324": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1331": {
      "op": "SHL"
    },
    "1332": {
      "op": "SUB"
    },
    "1333": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1334": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "AND",
      "path": "2"
    },
    "1335": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2673,
        2680
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1337": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1338": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1339": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1340": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1342": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1344": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1345": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1346": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1347": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1349": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1350": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1351": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1352": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1353": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1354": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1356": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1357": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1358": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1359": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1360": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1361": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1362": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1363": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1364": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1366": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1367": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1368": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1369": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1370": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1371": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1372": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1373": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1374": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1375": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1376": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1378": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1379": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1380": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1381": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1382": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1383": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1384": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2673,
        2680
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1385": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2773,
        2795
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x570"
    },
    "1388": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2773,
        2793
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9C2"
    },
    "1391": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2773,
        2795
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1392": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2773,
        2795
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1393": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2884,
        2885
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1395": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2860,
        2880
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1396": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2860,
        2880
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1397": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2841,
        2858
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1398": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2841,
        2858
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1399": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2751,
        2795
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1400": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2751,
        2795
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1401": {
      "op": "POP"
    },
    "1402": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2805,
        2829
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1404": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2805,
        2829
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1405": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2834,
        2858
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x588"
    },
    "1408": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2834,
        2858
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1409": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2834,
        2838
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3E8"
    },
    "1412": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2834,
        2858
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x102E"
    },
    "1415": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2834,
        2858
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1416": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2834,
        2858
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1417": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2880
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x592"
    },
    "1420": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2880
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1421": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2880
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1422": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2880
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1425": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2833,
        2880
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1426": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2880
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1427": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2885
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x59C"
    },
    "1430": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2885
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1431": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2885
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1432": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2885
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1435": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2832,
        2885
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1436": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2885
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1437": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2805,
        2885
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1438": {
      "op": "POP"
    },
    "1439": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2895,
        2921
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1441": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2939,
        2955
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1442": {
      "branch": 43,
      "fn": "Dividends.calculateDividends",
      "offset": [
        2939,
        2955
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1443": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2935,
        3034
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5C6"
    },
    "1446": {
      "branch": 43,
      "fn": "Dividends.calculateDividends",
      "offset": [
        2935,
        3034
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1447": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3012,
        3023
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 10
    },
    "1448": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3000,
        3001
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1449": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3000,
        3008
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1451": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3000,
        3008
      ],
      "op": "ADD",
      "path": "2"
    },
    "1452": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3000,
        3008
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1453": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2993,
        2997
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3E8"
    },
    "1456": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2993,
        3008
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5B9"
    },
    "1459": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2993,
        3008
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1460": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2993,
        3008
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1461": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2993,
        3008
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x102E"
    },
    "1464": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2993,
        3008
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1465": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2993,
        3008
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1466": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2992,
        3023
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5C3"
    },
    "1469": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2992,
        3023
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1470": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2992,
        3023
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1471": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2992,
        3023
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1474": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2992,
        3023
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1475": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2992,
        3023
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1476": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2971,
        3023
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1477": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2971,
        3023
      ],
      "op": "POP",
      "path": "2"
    },
    "1478": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2935,
        3034
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1479": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3043,
        3072
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1481": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3105,
        3120
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1483": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3105,
        3120
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1484": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3083,
        3084
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1485": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3083,
        3101
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1487": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3083,
        3101
      ],
      "op": "ADD",
      "path": "2"
    },
    "1488": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3083,
        3101
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1489": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3076,
        3080
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3E8"
    },
    "1492": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3076,
        3101
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5DD"
    },
    "1495": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3076,
        3101
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1496": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3076,
        3101
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1497": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3076,
        3101
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x102E"
    },
    "1500": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3076,
        3101
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1501": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3076,
        3101
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1502": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3075,
        3120
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5E7"
    },
    "1505": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3075,
        3120
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1506": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3075,
        3120
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1507": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3075,
        3120
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1510": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3075,
        3120
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1511": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3075,
        3120
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1512": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3043,
        3120
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1513": {
      "op": "POP"
    },
    "1514": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3130,
        3153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1516": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3209,
        3234
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5F6"
    },
    "1519": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3233,
        3234
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1521": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3043,
        3120
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1522": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3209,
        3234
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1525": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3209,
        3234
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1526": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3209,
        3234
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1527": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3182,
        3204
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x601"
    },
    "1530": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3203,
        3204
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1532": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3182,
        3200
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1533": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3182,
        3204
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1536": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3182,
        3204
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1537": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3182,
        3204
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1538": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3177
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x60C"
    },
    "1541": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3176,
        3177
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1543": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3173
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1544": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3177
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105B"
    },
    "1547": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3157,
        3177
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1548": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3177
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1549": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3205
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x616"
    },
    "1552": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3205
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1553": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3205
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1554": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3205
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "1557": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3156,
        3205
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1558": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3205
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1559": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3235
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x620"
    },
    "1562": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3235
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1563": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3235
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1564": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3235
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "1567": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3156,
        3235
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1568": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3156,
        3235
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1569": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3130,
        3235
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "1570": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3274
      ],
      "op": "SWAP8",
      "path": "2"
    },
    "1571": {
      "op": "POP"
    },
    "1572": {
      "op": "POP"
    },
    "1573": {
      "op": "POP"
    },
    "1574": {
      "op": "POP"
    },
    "1575": {
      "op": "POP"
    },
    "1576": {
      "op": "POP"
    },
    "1577": {
      "op": "POP"
    },
    "1578": {
      "op": "POP"
    },
    "1579": {
      "fn": "Dividends.calculateDividends",
      "jump": "o",
      "offset": [
        2602,
        3274
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1580": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1581": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1583": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1587": {
      "op": "SHL"
    },
    "1588": {
      "op": "SUB"
    },
    "1589": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 11
    },
    "1590": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "AND",
      "path": "2"
    },
    "1591": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1528,
        1529
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1593": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1594": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1595": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1596": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1495
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1598": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1600": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1601": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1603": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1604": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1605": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1525
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1606": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x691"
    },
    "1609": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1610": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1612": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1613": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1617": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1619": {
      "op": "SHL"
    },
    "1620": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1621": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1624": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1626": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1627": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "ADD",
      "path": "2"
    },
    "1628": {
      "op": "MSTORE"
    },
    "1629": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "1631": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1633": {
      "op": "DUP3"
    },
    "1634": {
      "op": "ADD"
    },
    "1635": {
      "op": "MSTORE"
    },
    "1636": {
      "op": "PUSH32",
      "value": "0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000"
    },
    "1669": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1671": {
      "op": "DUP3"
    },
    "1672": {
      "op": "ADD"
    },
    "1673": {
      "op": "MSTORE"
    },
    "1674": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1676": {
      "op": "ADD"
    },
    "1677": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1680": {
      "op": "JUMP"
    },
    "1681": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1686": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1688": {
      "op": "SHL"
    },
    "1689": {
      "op": "SUB"
    },
    "1690": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 12
    },
    "1691": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "AND",
      "path": "2"
    },
    "1692": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1694": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1695": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1696": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1697": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1586
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1699": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1701": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1702": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1704": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1705": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1706": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1617
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1708": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1617
      ],
      "op": "ADD",
      "path": "2"
    },
    "1709": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1710": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1711": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1712": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1713": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1714": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6BC"
    },
    "1717": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1718": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1719": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1720": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "1723": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1574,
        1628
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1724": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1725": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1726": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "POP",
      "path": "2"
    },
    "1727": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "POP",
      "path": "2"
    },
    "1728": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1729": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1730": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1731": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "POP",
      "path": "2"
    },
    "1732": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1663,
        1670
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 13
    },
    "1733": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1735": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1737": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1738": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1739": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1740": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6D5"
    },
    "1743": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1744": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1745": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "1748": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1638,
        1670
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1749": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1750": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1751": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "POP",
      "path": "2"
    },
    "1752": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "POP",
      "path": "2"
    },
    "1753": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1754": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1755": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1756": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "POP",
      "path": "2"
    },
    "1757": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1699,
        1706
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 14
    },
    "1758": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1695
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1760": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1695
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1762": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1763": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1764": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1765": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6EE"
    },
    "1768": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1769": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1770": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "1773": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1680,
        1706
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1774": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1775": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1776": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1777": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1778": {
      "op": "POP"
    },
    "1779": {
      "op": "POP"
    },
    "1780": {
      "op": "POP"
    },
    "1781": {
      "op": "POP"
    },
    "1782": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "o",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1783": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1784": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4063,
        4067
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1786": {
      "offset": [
        855,
        860
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1787": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1788": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1790": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1792": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1794": {
      "op": "SHL"
    },
    "1795": {
      "op": "SUB"
    },
    "1796": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "1797": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1798": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "1799": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x722"
    },
    "1802": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1803": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1805": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1806": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1810": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1812": {
      "op": "SHL"
    },
    "1813": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1814": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1815": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1817": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1818": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1821": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1822": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFAD"
    },
    "1825": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1826": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1827": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4079,
        4105
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1829": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4108,
        4154
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x74E"
    },
    "1832": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4141,
        4152
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1833": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1835": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1836": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1838": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "ADD",
      "path": "2"
    },
    "1839": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x73A"
    },
    "1842": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1843": {
      "op": "DUP2"
    },
    "1844": {
      "op": "MSTORE"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1847": {
      "op": "ADD"
    },
    "1848": {
      "op": "SWAP1"
    },
    "1849": {
      "op": "JUMP"
    },
    "1850": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1851": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1853": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1854": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1856": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1857": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1858": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "SUB",
      "path": "2"
    },
    "1859": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "SUB",
      "path": "2"
    },
    "1860": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1861": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1862": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1863": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1865": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4124,
        4153
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1866": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4108,
        4123
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA37"
    },
    "1869": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        4108,
        4154
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1870": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4108,
        4154
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1871": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4181,
        4192
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 15
    },
    "1872": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4181,
        4192
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1873": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4164,
        4175
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "1875": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4164,
        4192
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1876": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4181,
        4192
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1878": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4219,
        4230
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 16
    },
    "1879": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4219,
        4230
      ],
      "op": "ADD",
      "path": "2"
    },
    "1880": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4219,
        4230
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1881": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4202,
        4216
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "1883": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4202,
        4230
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1884": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 17,
      "value": "0x40"
    },
    "1886": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1887": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1888": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "1890": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1891": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "ADD",
      "path": "2"
    },
    "1892": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1893": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1894": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1895": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1896": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4079,
        4154
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1897": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4079,
        4154
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1898": {
      "op": "POP"
    },
    "1899": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x796"
    },
    "1902": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1903": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4265,
        4278
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1904": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4265,
        4278
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1905": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4280,
        4295
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1907": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4280,
        4295
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1908": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4280,
        4295
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1909": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4280,
        4295
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1910": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4280,
        4295
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1911": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1912": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1913": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1914": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1915": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1916": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1917": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1919": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "ADD",
      "path": "2"
    },
    "1920": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1921": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1923": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "ADD",
      "path": "2"
    },
    "1924": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1925": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1926": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1927": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "GT",
      "path": "2"
    },
    "1928": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x778"
    },
    "1931": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1932": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "POP",
      "path": "2"
    },
    "1933": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "POP",
      "path": "2"
    },
    "1934": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "POP",
      "path": "2"
    },
    "1935": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "POP",
      "path": "2"
    },
    "1936": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "POP",
      "path": "2"
    },
    "1937": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4297,
        4305
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1938": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4264
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA4F"
    },
    "1941": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        4248,
        4306
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1942": {
      "branch": 44,
      "fn": "Dividends.verifyProposal",
      "offset": [
        4248,
        4306
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1943": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7D6"
    },
    "1946": {
      "branch": 44,
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1947": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1949": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1950": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1956": {
      "op": "SHL"
    },
    "1957": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1958": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1959": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1961": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1963": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1964": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "ADD",
      "path": "2"
    },
    "1965": {
      "op": "MSTORE"
    },
    "1966": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1968": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1970": {
      "op": "DUP3"
    },
    "1971": {
      "op": "ADD"
    },
    "1972": {
      "op": "MSTORE"
    },
    "1973": {
      "op": "PUSH17",
      "value": "0x212629903737BA103B32B934B334B2B217"
    },
    "1991": {
      "op": "PUSH1",
      "value": "0x79"
    },
    "1993": {
      "op": "SHL"
    },
    "1994": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1996": {
      "op": "DUP3"
    },
    "1997": {
      "op": "ADD"
    },
    "1998": {
      "op": "MSTORE"
    },
    "1999": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2001": {
      "op": "ADD"
    },
    "2002": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "2005": {
      "op": "JUMP"
    },
    "2006": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4328
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2007": {
      "op": "POP"
    },
    "2008": {
      "op": "POP"
    },
    "2009": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 18,
      "value": "0x0"
    },
    "2011": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2012": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2013": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2014": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4347
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "2016": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2018": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2019": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2021": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2022": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4360
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2023": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4375,
        4379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2025": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4372
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2026": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4372
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2027": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4372
      ],
      "op": "ADD",
      "path": "2"
    },
    "2028": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2029": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2030": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2032": {
      "op": "NOT"
    },
    "2033": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "AND",
      "path": "2"
    },
    "2034": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2035": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "OR",
      "path": "2"
    },
    "2036": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2037": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4338,
        4379
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2038": {
      "offset": [
        909,
        910
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2039": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2040": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2041": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "POP",
      "path": "2"
    },
    "2042": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3931,
        4407
      ],
      "op": "POP",
      "path": "2"
    },
    "2043": {
      "fn": "Dividends.verifyProposal",
      "jump": "o",
      "offset": [
        3931,
        4407
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2044": {
      "offset": [
        265,
        298
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2045": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2047": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2048": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2050": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2051": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "LT",
      "path": "2"
    },
    "2052": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x405"
    },
    "2055": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2056": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2058": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2059": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2060": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2061": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2063": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2068": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2070": {
      "op": "SHL"
    },
    "2071": {
      "op": "SUB"
    },
    "2072": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "2073": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2074": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "2075": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x836"
    },
    "2078": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2079": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2081": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2082": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2086": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2088": {
      "op": "SHL"
    },
    "2089": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2090": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2091": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2093": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "2094": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "2097": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2098": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFAD"
    },
    "2101": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2102": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2105": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2107": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2109": {
      "op": "SHL"
    },
    "2110": {
      "op": "SUB"
    },
    "2111": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 19
    },
    "2112": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "AND",
      "path": "2"
    },
    "2113": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2115": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2116": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2117": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2118": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1119
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "2120": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2122": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2123": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2125": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2126": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2127": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1149
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2128": {
      "branch": 45,
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1154
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2129": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x89C"
    },
    "2132": {
      "branch": 45,
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2133": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2135": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2136": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2140": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2142": {
      "op": "SHL"
    },
    "2143": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2144": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2145": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2147": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2149": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2150": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "ADD",
      "path": "2"
    },
    "2151": {
      "op": "MSTORE"
    },
    "2152": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2156": {
      "op": "DUP3"
    },
    "2157": {
      "op": "ADD"
    },
    "2158": {
      "op": "MSTORE"
    },
    "2159": {
      "op": "PUSH32",
      "value": "0x466972737420696E766573746D656E7420616C7265616479206D6164652E0000"
    },
    "2192": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2194": {
      "op": "DUP3"
    },
    "2195": {
      "op": "ADD"
    },
    "2196": {
      "op": "MSTORE"
    },
    "2197": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2199": {
      "op": "ADD"
    },
    "2200": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "2203": {
      "op": "JUMP"
    },
    "2204": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2205": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2207": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2209": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2211": {
      "op": "SHL"
    },
    "2212": {
      "op": "SUB"
    },
    "2213": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 20
    },
    "2214": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "AND",
      "path": "2"
    },
    "2215": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2217": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2218": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2219": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2220": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1211
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "2222": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2224": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2225": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2227": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2228": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2229": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1251
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2230": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1251
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2231": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1251
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2232": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1276
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 21,
      "value": "0x1"
    },
    "2234": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2235": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2236": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2237": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2238": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2239": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8C9"
    },
    "2242": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2243": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2244": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2245": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "2248": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1261,
        1287
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2249": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2250": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2251": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "POP",
      "path": "2"
    },
    "2252": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "POP",
      "path": "2"
    },
    "2253": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2254": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2255": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2256": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "POP",
      "path": "2"
    },
    "2257": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1321,
        1328
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 22
    },
    "2258": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1317
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2260": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1317
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2262": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2263": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2264": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2265": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8E2"
    },
    "2268": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2269": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2270": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "2273": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1297,
        1328
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2274": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2275": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2276": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2277": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2278": {
      "op": "POP"
    },
    "2279": {
      "op": "POP"
    },
    "2280": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1358
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 23,
      "value": "0xB"
    },
    "2282": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2283": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2284": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2286": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2287": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "ADD",
      "path": "2"
    },
    "2288": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2289": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2290": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2292": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2293": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2294": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2295": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2296": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9"
    },
    "2329": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "ADD",
      "path": "2"
    },
    "2330": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2331": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2332": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2336": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2338": {
      "op": "SHL"
    },
    "2339": {
      "op": "SUB"
    },
    "2340": {
      "op": "NOT"
    },
    "2341": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "AND",
      "path": "2"
    },
    "2342": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2346": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2348": {
      "op": "SHL"
    },
    "2349": {
      "op": "SUB"
    },
    "2350": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2351": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2352": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2353": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "AND",
      "path": "2"
    },
    "2354": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2355": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2356": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2357": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "OR",
      "path": "2"
    },
    "2358": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2359": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2360": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2361": {
      "op": "POP"
    },
    "2362": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "o",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2363": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3280,
        3710
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2364": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3378,
        3395
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 24
    },
    "2365": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3378,
        3395
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2366": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3378,
        3395
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2367": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3425
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 25,
      "value": "0x1"
    },
    "2369": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3425
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2370": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3425
      ],
      "op": "ADD",
      "path": "2"
    },
    "2371": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3433
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2372": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3433
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2373": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2375": {
      "op": "NOT"
    },
    "2376": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3433
      ],
      "op": "AND",
      "path": "2"
    },
    "2377": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3433
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2378": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3405,
        3433
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2379": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3378,
        3389
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2381": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2382": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3467,
        3487
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2384": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3467,
        3494
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2385": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3463,
        3494
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2386": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3463,
        3494
      ],
      "op": "LT",
      "path": "2"
    },
    "2387": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2388": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9BD"
    },
    "2391": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2392": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3515,
        3534
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2394": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3557
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2396": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3558,
        3559
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2397": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2398": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2399": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2400": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "LT",
      "path": "2"
    },
    "2401": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x96C"
    },
    "2404": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2405": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x96C"
    },
    "2408": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1018"
    },
    "2411": {
      "fn": "Dividends.createProposalStruct",
      "jump": "i",
      "offset": [
        3537,
        3560
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2412": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2413": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2415": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2416": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2417": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2418": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2420": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2421": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2422": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "ADD",
      "path": "2"
    },
    "2423": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2424": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2430": {
      "op": "SHL"
    },
    "2431": {
      "op": "SUB"
    },
    "2432": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "AND",
      "path": "2"
    },
    "2433": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2434": {
      "op": "POP"
    },
    "2435": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3594,
        3625
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x98B"
    },
    "2438": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3537,
        3560
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2439": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3594,
        3612
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x52C"
    },
    "2442": {
      "fn": "Dividends.createProposalStruct",
      "jump": "i",
      "offset": [
        3594,
        3625
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2443": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3594,
        3625
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2444": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2446": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2448": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2450": {
      "op": "SHL"
    },
    "2451": {
      "op": "SUB"
    },
    "2452": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 26
    },
    "2453": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2454": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "AND",
      "path": "2"
    },
    "2455": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2457": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2458": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2459": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2460": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3668
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2462": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3668
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2463": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3668
      ],
      "op": "ADD",
      "path": "2"
    },
    "2464": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2466": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2467": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2469": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2470": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3681
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2471": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3693
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2472": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3693
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2473": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3693
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2474": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3639,
        3693
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2475": {
      "op": "POP"
    },
    "2476": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 27
    },
    "2477": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9B5"
    },
    "2480": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2481": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x106F"
    },
    "2484": {
      "fn": "Dividends.createProposalStruct",
      "jump": "i",
      "offset": [
        3496,
        3499
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2485": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2486": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2487": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "POP",
      "path": "2"
    },
    "2488": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3496,
        3499
      ],
      "op": "POP",
      "path": "2"
    },
    "2489": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x94D"
    },
    "2492": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2493": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2494": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3443,
        3704
      ],
      "op": "POP",
      "path": "2"
    },
    "2495": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3280,
        3710
      ],
      "op": "POP",
      "path": "2"
    },
    "2496": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3280,
        3710
      ],
      "op": "POP",
      "path": "2"
    },
    "2497": {
      "fn": "Dividends.createProposalStruct",
      "jump": "o",
      "offset": [
        3280,
        3710
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2498": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2265,
        2596
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2499": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2319,
        2326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2501": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2319,
        2326
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2502": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2319,
        2326
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2503": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2504": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2395,
        2415
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2506": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2395,
        2422
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2507": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2391,
        2422
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2508": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2391,
        2422
      ],
      "op": "LT",
      "path": "2"
    },
    "2509": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2510": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA31"
    },
    "2513": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2514": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2443,
        2463
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2516": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2486
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2518": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2487,
        2488
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2519": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2520": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2521": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2522": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "LT",
      "path": "2"
    },
    "2523": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9E6"
    },
    "2526": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2527": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9E6"
    },
    "2530": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1018"
    },
    "2533": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "i",
      "offset": [
        2466,
        2489
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2534": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2535": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2537": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2538": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2539": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2540": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2542": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2543": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2544": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2545": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2546": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2547": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "ADD",
      "path": "2"
    },
    "2548": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2549": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2553": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2555": {
      "op": "SHL"
    },
    "2556": {
      "op": "SUB"
    },
    "2557": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "AND",
      "path": "2"
    },
    "2558": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 28
    },
    "2559": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2560": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2561": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2530
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "2563": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2564": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2565": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2566": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2568": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2569": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2570": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2571": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2551
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2573": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2551
      ],
      "op": "ADD",
      "path": "2"
    },
    "2574": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2551
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2575": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2576": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2577": {
      "op": "POP"
    },
    "2578": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA1B"
    },
    "2581": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2582": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2583": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1005"
    },
    "2586": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "i",
      "offset": [
        2503,
        2551
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2587": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2588": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2589": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "POP",
      "path": "2"
    },
    "2590": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2429,
        2562
      ],
      "op": "POP",
      "path": "2"
    },
    "2591": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 29
    },
    "2592": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2593": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA29"
    },
    "2596": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2597": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x106F"
    },
    "2600": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "i",
      "offset": [
        2424,
        2427
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2601": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2602": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2603": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "POP",
      "path": "2"
    },
    "2604": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "POP",
      "path": "2"
    },
    "2605": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9C7"
    },
    "2608": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2609": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2610": {
      "op": "POP"
    },
    "2611": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2578,
        2589
      ],
      "op": "SWAP2",
      "path": "2",
      "statement": 30
    },
    "2612": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2265,
        2596
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2613": {
      "op": "POP"
    },
    "2614": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "o",
      "offset": [
        2265,
        2596
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2615": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4779,
        4914
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2616": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4842,
        4861
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3F"
    },
    "2619": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4842,
        4861
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB5"
    },
    "2622": {
      "fn": "BLS.hashToPoint",
      "jump": "i",
      "offset": [
        4842,
        4861
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2623": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4842,
        4861
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2624": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4880,
        4907
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 31,
      "value": "0x7F6"
    },
    "2627": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4901,
        4905
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2628": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4891,
        4906
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2629": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4891,
        4906
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2630": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4891,
        4906
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2631": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4891,
        4906
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2633": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4891,
        4906
      ],
      "op": "ADD",
      "path": "0"
    },
    "2634": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4891,
        4906
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2635": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4880,
        4890
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC35"
    },
    "2638": {
      "fn": "BLS.hashToPoint",
      "jump": "i",
      "offset": [
        4880,
        4907
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2639": {
      "fn": "BLS.verifySingle",
      "offset": [
        2535,
        3381
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2640": {
      "fn": "BLS.verifySingle",
      "offset": [
        2692,
        2696
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2642": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2732
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2643": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2645": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2646": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2647": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "2650": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2651": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2653": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2654": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2655": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2745
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2656": {
      "fn": "BLS.verifySingle",
      "offset": [
        2746,
        2747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2658": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2660": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2661": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "LT",
      "path": "0"
    },
    "2662": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA71"
    },
    "2665": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2666": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA71"
    },
    "2669": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2672": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2736,
        2748
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2673": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2674": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2676": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "MUL",
      "path": "0"
    },
    "2677": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "ADD",
      "path": "0"
    },
    "2678": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2679": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2680": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2681": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2683": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2684": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2759
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2685": {
      "fn": "BLS.verifySingle",
      "offset": [
        2760,
        2761
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2687": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2689": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2690": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "LT",
      "path": "0"
    },
    "2691": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA8E"
    },
    "2694": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2695": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA8E"
    },
    "2698": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2701": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2750,
        2762
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2702": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2703": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2705": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "MUL",
      "path": "0"
    },
    "2706": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "ADD",
      "path": "0"
    },
    "2707": {
      "fn": "BLS.verifySingle",
      "offset": [
        2750,
        2762
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2708": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2709": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2710": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2712": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2713": {
      "offset": [
        1177,
        1254
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x198E9393920D483A7260BFB731FB5D25F1AA493335A9E71297E485B7AEF312C2"
    },
    "2746": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2747": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2748": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2750": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2751": {
      "offset": [
        1285,
        1362
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x1800DEEF121F1E76426A00665E5C4479674322D4F75EDADD46DEBD5CD992F6ED"
    },
    "2784": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2785": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2786": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2788": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2789": {
      "offset": [
        1393,
        1470
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x275DC4A288D1AFB3CBB1AC09187524C7DB36395DF7BE3B99E673B13A075A65EC"
    },
    "2822": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2823": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2824": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2826": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2827": {
      "offset": [
        1501,
        1578
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x1D9BEFCD05A5323E6DA4D435F3B617CDB3AF83285C2DF711EF39C01571827F9D"
    },
    "2860": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2861": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2862": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2864": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2865": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2871
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2866": {
      "fn": "BLS.verifySingle",
      "offset": [
        2872,
        2873
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2868": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2870": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2871": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "LT",
      "path": "0"
    },
    "2872": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB43"
    },
    "2875": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2876": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB43"
    },
    "2879": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2882": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2864,
        2874
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2883": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2884": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2886": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "MUL",
      "path": "0"
    },
    "2887": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "ADD",
      "path": "0"
    },
    "2888": {
      "fn": "BLS.verifySingle",
      "offset": [
        2864,
        2874
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2889": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2890": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2891": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2893": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2894": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2883
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2895": {
      "fn": "BLS.verifySingle",
      "offset": [
        2884,
        2885
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2897": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2899": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2900": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "LT",
      "path": "0"
    },
    "2901": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB60"
    },
    "2904": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2905": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB60"
    },
    "2908": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2911": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2876,
        2886
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2912": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2913": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2915": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "MUL",
      "path": "0"
    },
    "2916": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "ADD",
      "path": "0"
    },
    "2917": {
      "fn": "BLS.verifySingle",
      "offset": [
        2876,
        2886
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2918": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2919": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2920": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2922": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2923": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2930
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2924": {
      "fn": "BLS.verifySingle",
      "offset": [
        2931,
        2932
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2926": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2928": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2929": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "LT",
      "path": "0"
    },
    "2930": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB7D"
    },
    "2933": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2934": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB7D"
    },
    "2937": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2940": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2924,
        2933
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2941": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2942": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2944": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "MUL",
      "path": "0"
    },
    "2945": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "ADD",
      "path": "0"
    },
    "2946": {
      "fn": "BLS.verifySingle",
      "offset": [
        2924,
        2933
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2947": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2948": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2949": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2951": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2952": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2941
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2953": {
      "fn": "BLS.verifySingle",
      "offset": [
        2942,
        2943
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2955": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2957": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2958": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "LT",
      "path": "0"
    },
    "2959": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB9A"
    },
    "2962": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2963": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB9A"
    },
    "2966": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2969": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2935,
        2944
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2970": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2971": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2973": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "MUL",
      "path": "0"
    },
    "2974": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "ADD",
      "path": "0"
    },
    "2975": {
      "fn": "BLS.verifySingle",
      "offset": [
        2935,
        2944
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2976": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2977": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2978": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2980": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "2981": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2952
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2982": {
      "fn": "BLS.verifySingle",
      "offset": [
        2953,
        2954
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2984": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2986": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2987": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "LT",
      "path": "0"
    },
    "2988": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBB7"
    },
    "2991": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2992": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBB7"
    },
    "2995": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "2998": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2946,
        2955
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2999": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3000": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3002": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "MUL",
      "path": "0"
    },
    "3003": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "ADD",
      "path": "0"
    },
    "3004": {
      "fn": "BLS.verifySingle",
      "offset": [
        2946,
        2955
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3005": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3006": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3007": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3009": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "ADD",
      "path": "0"
    },
    "3010": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2963
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3011": {
      "fn": "BLS.verifySingle",
      "offset": [
        2964,
        2965
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3013": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3015": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3016": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "LT",
      "path": "0"
    },
    "3017": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBD4"
    },
    "3020": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3021": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBD4"
    },
    "3024": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1018"
    },
    "3027": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2957,
        2966
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3028": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3029": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3031": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "MUL",
      "path": "0"
    },
    "3032": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "ADD",
      "path": "0"
    },
    "3033": {
      "fn": "BLS.verifySingle",
      "offset": [
        2957,
        2966
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3034": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3035": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3036": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2967
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3037": {
      "op": "POP"
    },
    "3038": {
      "fn": "BLS.verifySingle",
      "offset": [
        3014,
        3035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBE5"
    },
    "3041": {
      "fn": "BLS.verifySingle",
      "offset": [
        3014,
        3035
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDD3"
    },
    "3044": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        3014,
        3035
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3045": {
      "fn": "BLS.verifySingle",
      "offset": [
        3014,
        3035
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3046": {
      "fn": "BLS.verifySingle",
      "offset": [
        3045,
        3057
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3048": {
      "fn": "BLS.verifySingle",
      "offset": [
        3214,
        3218
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3050": {
      "fn": "BLS.verifySingle",
      "offset": [
        3209,
        3212
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3051": {
      "fn": "BLS.verifySingle",
      "offset": [
        3204,
        3207
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "3054": {
      "fn": "BLS.verifySingle",
      "offset": [
        3197,
        3202
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3055": {
      "fn": "BLS.verifySingle",
      "offset": [
        3194,
        3195
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "3057": {
      "fn": "BLS.verifySingle",
      "offset": [
        3187,
        3191
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D0"
    },
    "3060": {
      "fn": "BLS.verifySingle",
      "offset": [
        3180,
        3185
      ],
      "op": "GAS",
      "path": "0"
    },
    "3061": {
      "fn": "BLS.verifySingle",
      "offset": [
        3176,
        3192
      ],
      "op": "SUB",
      "path": "0"
    },
    "3062": {
      "fn": "BLS.verifySingle",
      "offset": [
        3165,
        3219
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "3063": {
      "fn": "BLS.verifySingle",
      "offset": [
        3154,
        3219
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3064": {
      "op": "POP"
    },
    "3065": {
      "fn": "BLS.verifySingle",
      "offset": [
        3154,
        3219
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3066": {
      "fn": "BLS.verifySingle",
      "offset": [
        3154,
        3219
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3067": {
      "fn": "BLS.verifySingle",
      "offset": [
        3232,
        3307
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC00"
    },
    "3070": {
      "fn": "BLS.verifySingle",
      "offset": [
        3259,
        3307
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3071": {
      "fn": "BLS.verifySingle",
      "offset": [
        3284,
        3293
      ],
      "op": "INVALID",
      "path": "0"
    },
    "3072": {
      "fn": "BLS.verifySingle",
      "offset": [
        3232,
        3307
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3073": {
      "fn": "BLS.verifySingle",
      "offset": [
        3232,
        3307
      ],
      "op": "POP",
      "path": "0"
    },
    "3074": {
      "branch": 46,
      "fn": "BLS.verifySingle",
      "offset": [
        3334,
        3341
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 32
    },
    "3075": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC28"
    },
    "3078": {
      "branch": 46,
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3079": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3081": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3082": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3086": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3088": {
      "op": "SHL"
    },
    "3089": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3090": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3091": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3093": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3095": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3096": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "ADD",
      "path": "0"
    },
    "3097": {
      "op": "MSTORE"
    },
    "3098": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3100": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3102": {
      "op": "DUP3"
    },
    "3103": {
      "op": "ADD"
    },
    "3104": {
      "op": "MSTORE"
    },
    "3105": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3107": {
      "op": "ADD"
    },
    "3108": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B4"
    },
    "3111": {
      "op": "JUMP"
    },
    "3112": {
      "fn": "BLS.verifySingle",
      "offset": [
        3326,
        3346
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3113": {
      "op": "POP"
    },
    "3114": {
      "fn": "BLS.verifySingle",
      "offset": [
        3363,
        3369
      ],
      "op": "MLOAD",
      "path": "0",
      "statement": 33
    },
    "3115": {
      "fn": "BLS.verifySingle",
      "offset": [
        3363,
        3374
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3116": {
      "fn": "BLS.verifySingle",
      "offset": [
        3363,
        3374
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3117": {
      "fn": "BLS.verifySingle",
      "offset": [
        3363,
        3374
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3118": {
      "fn": "BLS.verifySingle",
      "offset": [
        3363,
        3374
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3119": {
      "op": "POP"
    },
    "3120": {
      "op": "POP"
    },
    "3121": {
      "op": "POP"
    },
    "3122": {
      "op": "POP"
    },
    "3123": {
      "op": "POP"
    },
    "3124": {
      "fn": "BLS.verifySingle",
      "jump": "o",
      "offset": [
        2535,
        3381
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3125": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4920,
        5400
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3126": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4975,
        4994
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3D"
    },
    "3129": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4975,
        4994
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB5"
    },
    "3132": {
      "fn": "BLS.mapToPoint",
      "jump": "i",
      "offset": [
        4975,
        4994
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3133": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4975,
        4994
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3134": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5006,
        5015
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3136": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5018,
        5033
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC57"
    },
    "3139": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3141": {
      "op": "DUP1"
    },
    "3142": {
      "op": "MLOAD"
    },
    "3143": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3145": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3148": {
      "op": "DUP4"
    },
    "3149": {
      "op": "CODECOPY"
    },
    "3150": {
      "op": "DUP2"
    },
    "3151": {
      "op": "MLOAD"
    },
    "3152": {
      "op": "SWAP2"
    },
    "3153": {
      "op": "MSTORE"
    },
    "3154": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5026,
        5028
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3155": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5018,
        5033
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1088"
    },
    "3158": {
      "fn": "BLS.mapToPoint",
      "jump": "i",
      "offset": [
        5018,
        5033
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3159": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5018,
        5033
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3160": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5006,
        5033
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3161": {
      "op": "POP"
    },
    "3162": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5043,
        5052
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3164": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5043,
        5052
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3165": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5090,
        5394
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3166": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3168": {
      "op": "DUP1"
    },
    "3169": {
      "op": "MLOAD"
    },
    "3170": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3172": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3175": {
      "op": "DUP4"
    },
    "3176": {
      "op": "CODECOPY"
    },
    "3177": {
      "op": "DUP2"
    },
    "3178": {
      "op": "MLOAD"
    },
    "3179": {
      "op": "SWAP2"
    },
    "3180": {
      "op": "MSTORE"
    },
    "3181": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5131,
        5132
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 34
    },
    "3182": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5128,
        5129
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3183": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5121,
        5136
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "3184": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5117,
        5136
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3185": {
      "op": "POP"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3188": {
      "op": "DUP1"
    },
    "3189": {
      "op": "MLOAD"
    },
    "3190": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3192": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3195": {
      "op": "DUP4"
    },
    "3196": {
      "op": "CODECOPY"
    },
    "3197": {
      "op": "DUP2"
    },
    "3198": {
      "op": "MLOAD"
    },
    "3199": {
      "op": "SWAP2"
    },
    "3200": {
      "op": "MSTORE"
    },
    "3201": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5164,
        5165
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 35
    },
    "3202": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5161,
        5162
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3203": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5154,
        5169
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "3204": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5150,
        5169
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3205": {
      "op": "POP"
    },
    "3206": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3208": {
      "op": "DUP1"
    },
    "3209": {
      "op": "MLOAD"
    },
    "3210": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3212": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3215": {
      "op": "DUP4"
    },
    "3216": {
      "op": "CODECOPY"
    },
    "3217": {
      "op": "DUP2"
    },
    "3218": {
      "op": "MLOAD"
    },
    "3219": {
      "op": "SWAP2"
    },
    "3220": {
      "op": "MSTORE"
    },
    "3221": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5197,
        5198
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 36,
      "value": "0x3"
    },
    "3223": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5194,
        5195
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3224": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5187,
        5202
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "3225": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5183,
        5202
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3226": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5183,
        5202
      ],
      "op": "POP",
      "path": "0"
    },
    "3227": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5229,
        5236
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 37,
      "value": "0xCA3"
    },
    "3230": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5234,
        5235
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3231": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5229,
        5233
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCDF"
    },
    "3234": {
      "fn": "BLS.mapToPoint",
      "jump": "i",
      "offset": [
        5229,
        5236
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3235": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5229,
        5236
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3236": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5216,
        5236
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3237": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5216,
        5236
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3238": {
      "op": "POP"
    },
    "3239": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5216,
        5236
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3240": {
      "op": "POP"
    },
    "3241": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5250,
        5351
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3242": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5250,
        5351
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3243": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5250,
        5351
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCBD"
    },
    "3246": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5250,
        5351
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3247": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5279,
        5287
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 38
    },
    "3248": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5279,
        5287
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3249": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5279,
        5287
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3250": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5279,
        5283
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3252": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5305,
        5309
      ],
      "op": "DUP5",
      "path": "0",
      "statement": 39
    },
    "3253": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5305,
        5309
      ],
      "op": "ADD",
      "path": "0"
    },
    "3254": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5305,
        5313
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3255": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5305,
        5313
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3256": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5305,
        5313
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3257": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5331,
        5336
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 40,
      "value": "0xCD7"
    },
    "3260": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5331,
        5336
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3261": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5250,
        5351
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3262": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3264": {
      "op": "DUP1"
    },
    "3265": {
      "op": "MLOAD"
    },
    "3266": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3268": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3271": {
      "op": "DUP4"
    },
    "3272": {
      "op": "CODECOPY"
    },
    "3273": {
      "op": "DUP2"
    },
    "3274": {
      "op": "MLOAD"
    },
    "3275": {
      "op": "SWAP2"
    },
    "3276": {
      "op": "MSTORE"
    },
    "3277": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5378,
        5379
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 41,
      "value": "0x1"
    },
    "3279": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5375,
        5376
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3280": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5368,
        5383
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "3281": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5364,
        5383
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3282": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5364,
        5383
      ],
      "op": "POP",
      "path": "0"
    },
    "3283": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5090,
        5394
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC5D"
    },
    "3286": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5090,
        5394
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3287": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5090,
        5394
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3288": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4996,
        5400
      ],
      "op": "POP",
      "path": "0"
    },
    "3289": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4996,
        5400
      ],
      "op": "POP",
      "path": "0"
    },
    "3290": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4996,
        5400
      ],
      "op": "POP",
      "path": "0"
    },
    "3291": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4920,
        5400
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3292": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4920,
        5400
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3293": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4920,
        5400
      ],
      "op": "POP",
      "path": "0"
    },
    "3294": {
      "fn": "BLS.mapToPoint",
      "jump": "o",
      "offset": [
        4920,
        5400
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3295": {
      "fn": "BLS.sqrt",
      "offset": [
        14933,
        15963
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3296": {
      "fn": "BLS.sqrt",
      "offset": [
        14982,
        14991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3298": {
      "fn": "BLS.sqrt",
      "offset": [
        14993,
        15005
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3299": {
      "fn": "BLS.sqrt",
      "offset": [
        15017,
        15033
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3301": {
      "fn": "BLS.sqrt",
      "offset": [
        15151,
        15155
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3303": {
      "fn": "BLS.sqrt",
      "offset": [
        15145,
        15156
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3304": {
      "fn": "BLS.sqrt",
      "offset": [
        15185,
        15189
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3306": {
      "fn": "BLS.sqrt",
      "offset": [
        15176,
        15183
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3307": {
      "fn": "BLS.sqrt",
      "offset": [
        15169,
        15190
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3308": {
      "fn": "BLS.sqrt",
      "offset": [
        15230,
        15234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3310": {
      "fn": "BLS.sqrt",
      "offset": [
        15223,
        15227
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3311": {
      "fn": "BLS.sqrt",
      "offset": [
        15214,
        15221
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3312": {
      "fn": "BLS.sqrt",
      "offset": [
        15210,
        15228
      ],
      "op": "ADD",
      "path": "0"
    },
    "3313": {
      "fn": "BLS.sqrt",
      "offset": [
        15203,
        15235
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3314": {
      "fn": "BLS.sqrt",
      "offset": [
        15275,
        15279
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3316": {
      "fn": "BLS.sqrt",
      "offset": [
        15268,
        15272
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3318": {
      "fn": "BLS.sqrt",
      "offset": [
        15259,
        15266
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3319": {
      "fn": "BLS.sqrt",
      "offset": [
        15255,
        15273
      ],
      "op": "ADD",
      "path": "0"
    },
    "3320": {
      "fn": "BLS.sqrt",
      "offset": [
        15248,
        15280
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3321": {
      "fn": "BLS.sqrt",
      "offset": [
        15320,
        15322
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3322": {
      "fn": "BLS.sqrt",
      "offset": [
        15313,
        15317
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3324": {
      "fn": "BLS.sqrt",
      "offset": [
        15304,
        15311
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3325": {
      "fn": "BLS.sqrt",
      "offset": [
        15300,
        15318
      ],
      "op": "ADD",
      "path": "0"
    },
    "3326": {
      "fn": "BLS.sqrt",
      "offset": [
        15293,
        15323
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3327": {
      "fn": "BLS.sqrt",
      "offset": [
        15458,
        15523
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52"
    },
    "3360": {
      "fn": "BLS.sqrt",
      "offset": [
        15451,
        15455
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "3362": {
      "fn": "BLS.sqrt",
      "offset": [
        15442,
        15449
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3363": {
      "fn": "BLS.sqrt",
      "offset": [
        15438,
        15456
      ],
      "op": "ADD",
      "path": "0"
    },
    "3364": {
      "fn": "BLS.sqrt",
      "offset": [
        15431,
        15524
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3365": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3367": {
      "op": "DUP1"
    },
    "3368": {
      "op": "MLOAD"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3371": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3374": {
      "op": "DUP4"
    },
    "3375": {
      "op": "CODECOPY"
    },
    "3376": {
      "op": "DUP2"
    },
    "3377": {
      "op": "MLOAD"
    },
    "3378": {
      "op": "SWAP2"
    },
    "3379": {
      "op": "MSTORE"
    },
    "3380": {
      "fn": "BLS.sqrt",
      "offset": [
        15643,
        15647
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA0"
    },
    "3382": {
      "fn": "BLS.sqrt",
      "offset": [
        15634,
        15641
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3383": {
      "fn": "BLS.sqrt",
      "offset": [
        15630,
        15648
      ],
      "op": "ADD",
      "path": "0"
    },
    "3384": {
      "fn": "BLS.sqrt",
      "offset": [
        15623,
        15717
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3385": {
      "fn": "BLS.sqrt",
      "offset": [
        15801,
        15805
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3387": {
      "fn": "BLS.sqrt",
      "offset": [
        15792,
        15799
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3388": {
      "fn": "BLS.sqrt",
      "offset": [
        15786,
        15790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xC0"
    },
    "3390": {
      "fn": "BLS.sqrt",
      "offset": [
        15777,
        15784
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3391": {
      "fn": "BLS.sqrt",
      "offset": [
        15774,
        15775
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "3393": {
      "fn": "BLS.sqrt",
      "offset": [
        15767,
        15771
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D0"
    },
    "3396": {
      "fn": "BLS.sqrt",
      "offset": [
        15760,
        15765
      ],
      "op": "GAS",
      "path": "0"
    },
    "3397": {
      "fn": "BLS.sqrt",
      "offset": [
        15756,
        15772
      ],
      "op": "SUB",
      "path": "0"
    },
    "3398": {
      "fn": "BLS.sqrt",
      "offset": [
        15745,
        15806
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "3399": {
      "fn": "BLS.sqrt",
      "offset": [
        15824,
        15838
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3400": {
      "fn": "BLS.sqrt",
      "offset": [
        15824,
        15838
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3401": {
      "fn": "BLS.sqrt",
      "offset": [
        15824,
        15838
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3402": {
      "op": "POP"
    },
    "3403": {
      "fn": "BLS.sqrt",
      "offset": [
        15730,
        15806
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3404": {
      "op": "POP"
    },
    "3405": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3407": {
      "op": "DUP1"
    },
    "3408": {
      "op": "MLOAD"
    },
    "3409": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3411": {
      "op": "PUSH2",
      "value": "0x109D"
    },
    "3414": {
      "op": "DUP4"
    },
    "3415": {
      "op": "CODECOPY"
    },
    "3416": {
      "op": "DUP2"
    },
    "3417": {
      "op": "MLOAD"
    },
    "3418": {
      "op": "SWAP2"
    },
    "3419": {
      "op": "MSTORE"
    },
    "3420": {
      "fn": "BLS.sqrt",
      "offset": [
        15824,
        15838
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3421": {
      "fn": "BLS.sqrt",
      "offset": [
        15824,
        15838
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3422": {
      "fn": "BLS.sqrt",
      "offset": [
        15869,
        15884
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "3423": {
      "fn": "BLS.sqrt",
      "offset": [
        15865,
        15867
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3424": {
      "fn": "BLS.sqrt",
      "offset": [
        15862,
        15885
      ],
      "op": "EQ",
      "path": "0"
    },
    "3425": {
      "fn": "BLS.sqrt",
      "offset": [
        15851,
        15885
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3426": {
      "fn": "BLS.sqrt",
      "offset": [
        15851,
        15885
      ],
      "op": "POP",
      "path": "0"
    },
    "3427": {
      "branch": 47,
      "fn": "BLS.sqrt",
      "offset": [
        15912,
        15923
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 42
    },
    "3428": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDAF"
    },
    "3431": {
      "branch": 47,
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3432": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3434": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3435": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3439": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3441": {
      "op": "SHL"
    },
    "3442": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3443": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3444": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3446": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3448": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3449": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "ADD",
      "path": "0"
    },
    "3450": {
      "op": "MSTORE"
    },
    "3451": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "3453": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3455": {
      "op": "DUP3"
    },
    "3456": {
      "op": "ADD"
    },
    "3457": {
      "op": "MSTORE"
    },
    "3458": {
      "op": "PUSH32",
      "value": "0x424C533A2073717274206D6F646578702063616C6C206661696C656400000000"
    },
    "3491": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3493": {
      "op": "DUP3"
    },
    "3494": {
      "op": "ADD"
    },
    "3495": {
      "op": "MSTORE"
    },
    "3496": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3498": {
      "op": "ADD"
    },
    "3499": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B4"
    },
    "3502": {
      "op": "JUMP"
    },
    "3503": {
      "fn": "BLS.sqrt",
      "offset": [
        15904,
        15956
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3504": {
      "fn": "BLS.sqrt",
      "offset": [
        15007,
        15963
      ],
      "op": "POP",
      "path": "0"
    },
    "3505": {
      "fn": "BLS.sqrt",
      "offset": [
        14933,
        15963
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3506": {
      "fn": "BLS.sqrt",
      "offset": [
        14933,
        15963
      ],
      "op": "POP",
      "path": "0"
    },
    "3507": {
      "fn": "BLS.sqrt",
      "offset": [
        14933,
        15963
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3508": {
      "fn": "BLS.sqrt",
      "jump": "o",
      "offset": [
        14933,
        15963
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3509": {
      "op": "JUMPDEST"
    },
    "3510": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3512": {
      "op": "MLOAD"
    },
    "3513": {
      "op": "DUP1"
    },
    "3514": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3516": {
      "op": "ADD"
    },
    "3517": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3519": {
      "op": "MSTORE"
    },
    "3520": {
      "op": "DUP1"
    },
    "3521": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "3523": {
      "op": "SWAP1"
    },
    "3524": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3526": {
      "op": "DUP3"
    },
    "3527": {
      "op": "MUL"
    },
    "3528": {
      "op": "DUP1"
    },
    "3529": {
      "op": "CALLDATASIZE"
    },
    "3530": {
      "op": "DUP4"
    },
    "3531": {
      "op": "CALLDATACOPY"
    },
    "3532": {
      "op": "POP"
    },
    "3533": {
      "op": "SWAP2"
    },
    "3534": {
      "op": "SWAP3"
    },
    "3535": {
      "op": "SWAP2"
    },
    "3536": {
      "op": "POP"
    },
    "3537": {
      "op": "POP"
    },
    "3538": {
      "jump": "o",
      "op": "JUMP"
    },
    "3539": {
      "op": "JUMPDEST"
    },
    "3540": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3542": {
      "op": "MLOAD"
    },
    "3543": {
      "op": "DUP1"
    },
    "3544": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3546": {
      "op": "ADD"
    },
    "3547": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3549": {
      "op": "MSTORE"
    },
    "3550": {
      "op": "DUP1"
    },
    "3551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3553": {
      "op": "SWAP1"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3556": {
      "op": "DUP3"
    },
    "3557": {
      "op": "MUL"
    },
    "3558": {
      "op": "DUP1"
    },
    "3559": {
      "op": "CALLDATASIZE"
    },
    "3560": {
      "op": "DUP4"
    },
    "3561": {
      "op": "CALLDATACOPY"
    },
    "3562": {
      "op": "POP"
    },
    "3563": {
      "op": "SWAP2"
    },
    "3564": {
      "op": "SWAP3"
    },
    "3565": {
      "op": "SWAP2"
    },
    "3566": {
      "op": "POP"
    },
    "3567": {
      "op": "POP"
    },
    "3568": {
      "jump": "o",
      "op": "JUMP"
    },
    "3569": {
      "op": "JUMPDEST"
    },
    "3570": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3572": {
      "op": "DUP1"
    },
    "3573": {
      "op": "DUP3"
    },
    "3574": {
      "op": "MSTORE"
    },
    "3575": {
      "op": "DUP3"
    },
    "3576": {
      "op": "MLOAD"
    },
    "3577": {
      "op": "DUP3"
    },
    "3578": {
      "op": "DUP3"
    },
    "3579": {
      "op": "ADD"
    },
    "3580": {
      "op": "DUP2"
    },
    "3581": {
      "op": "SWAP1"
    },
    "3582": {
      "op": "MSTORE"
    },
    "3583": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3585": {
      "op": "SWAP2"
    },
    "3586": {
      "op": "SWAP1"
    },
    "3587": {
      "op": "DUP5"
    },
    "3588": {
      "op": "DUP3"
    },
    "3589": {
      "op": "ADD"
    },
    "3590": {
      "op": "SWAP1"
    },
    "3591": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3593": {
      "op": "DUP6"
    },
    "3594": {
      "op": "ADD"
    },
    "3595": {
      "op": "SWAP1"
    },
    "3596": {
      "op": "DUP5"
    },
    "3597": {
      "op": "JUMPDEST"
    },
    "3598": {
      "op": "DUP2"
    },
    "3599": {
      "op": "DUP2"
    },
    "3600": {
      "op": "LT"
    },
    "3601": {
      "op": "ISZERO"
    },
    "3602": {
      "op": "PUSH2",
      "value": "0xE32"
    },
    "3605": {
      "op": "JUMPI"
    },
    "3606": {
      "op": "DUP4"
    },
    "3607": {
      "op": "MLOAD"
    },
    "3608": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3610": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3612": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3614": {
      "op": "SHL"
    },
    "3615": {
      "op": "SUB"
    },
    "3616": {
      "op": "AND"
    },
    "3617": {
      "op": "DUP4"
    },
    "3618": {
      "op": "MSTORE"
    },
    "3619": {
      "op": "SWAP3"
    },
    "3620": {
      "op": "DUP5"
    },
    "3621": {
      "op": "ADD"
    },
    "3622": {
      "op": "SWAP3"
    },
    "3623": {
      "op": "SWAP2"
    },
    "3624": {
      "op": "DUP5"
    },
    "3625": {
      "op": "ADD"
    },
    "3626": {
      "op": "SWAP2"
    },
    "3627": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3629": {
      "op": "ADD"
    },
    "3630": {
      "op": "PUSH2",
      "value": "0xE0D"
    },
    "3633": {
      "op": "JUMP"
    },
    "3634": {
      "op": "JUMPDEST"
    },
    "3635": {
      "op": "POP"
    },
    "3636": {
      "op": "SWAP1"
    },
    "3637": {
      "op": "SWAP7"
    },
    "3638": {
      "op": "SWAP6"
    },
    "3639": {
      "op": "POP"
    },
    "3640": {
      "op": "POP"
    },
    "3641": {
      "op": "POP"
    },
    "3642": {
      "op": "POP"
    },
    "3643": {
      "op": "POP"
    },
    "3644": {
      "op": "POP"
    },
    "3645": {
      "jump": "o",
      "op": "JUMP"
    },
    "3646": {
      "op": "JUMPDEST"
    },
    "3647": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3649": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3651": {
      "op": "DUP3"
    },
    "3652": {
      "op": "DUP5"
    },
    "3653": {
      "op": "SUB"
    },
    "3654": {
      "op": "SLT"
    },
    "3655": {
      "op": "ISZERO"
    },
    "3656": {
      "op": "PUSH2",
      "value": "0xE50"
    },
    "3659": {
      "op": "JUMPI"
    },
    "3660": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3662": {
      "op": "DUP1"
    },
    "3663": {
      "op": "REVERT"
    },
    "3664": {
      "op": "JUMPDEST"
    },
    "3665": {
      "op": "POP"
    },
    "3666": {
      "op": "CALLDATALOAD"
    },
    "3667": {
      "op": "SWAP2"
    },
    "3668": {
      "op": "SWAP1"
    },
    "3669": {
      "op": "POP"
    },
    "3670": {
      "jump": "o",
      "op": "JUMP"
    },
    "3671": {
      "op": "JUMPDEST"
    },
    "3672": {
      "op": "DUP1"
    },
    "3673": {
      "op": "CALLDATALOAD"
    },
    "3674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3678": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3680": {
      "op": "SHL"
    },
    "3681": {
      "op": "SUB"
    },
    "3682": {
      "op": "DUP2"
    },
    "3683": {
      "op": "AND"
    },
    "3684": {
      "op": "DUP2"
    },
    "3685": {
      "op": "EQ"
    },
    "3686": {
      "op": "PUSH2",
      "value": "0xE6E"
    },
    "3689": {
      "op": "JUMPI"
    },
    "3690": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3692": {
      "op": "DUP1"
    },
    "3693": {
      "op": "REVERT"
    },
    "3694": {
      "op": "JUMPDEST"
    },
    "3695": {
      "op": "SWAP2"
    },
    "3696": {
      "op": "SWAP1"
    },
    "3697": {
      "op": "POP"
    },
    "3698": {
      "jump": "o",
      "op": "JUMP"
    },
    "3699": {
      "op": "JUMPDEST"
    },
    "3700": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3702": {
      "op": "DUP1"
    },
    "3703": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3705": {
      "op": "DUP4"
    },
    "3706": {
      "op": "DUP6"
    },
    "3707": {
      "op": "SUB"
    },
    "3708": {
      "op": "SLT"
    },
    "3709": {
      "op": "ISZERO"
    },
    "3710": {
      "op": "PUSH2",
      "value": "0xE86"
    },
    "3713": {
      "op": "JUMPI"
    },
    "3714": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3716": {
      "op": "DUP1"
    },
    "3717": {
      "op": "REVERT"
    },
    "3718": {
      "op": "JUMPDEST"
    },
    "3719": {
      "op": "PUSH2",
      "value": "0xE8F"
    },
    "3722": {
      "op": "DUP4"
    },
    "3723": {
      "op": "PUSH2",
      "value": "0xE57"
    },
    "3726": {
      "jump": "i",
      "op": "JUMP"
    },
    "3727": {
      "op": "JUMPDEST"
    },
    "3728": {
      "op": "SWAP5"
    },
    "3729": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3731": {
      "op": "SWAP4"
    },
    "3732": {
      "op": "SWAP1"
    },
    "3733": {
      "op": "SWAP4"
    },
    "3734": {
      "op": "ADD"
    },
    "3735": {
      "op": "CALLDATALOAD"
    },
    "3736": {
      "op": "SWAP4"
    },
    "3737": {
      "op": "POP"
    },
    "3738": {
      "op": "POP"
    },
    "3739": {
      "op": "POP"
    },
    "3740": {
      "jump": "o",
      "op": "JUMP"
    },
    "3741": {
      "op": "JUMPDEST"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3744": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3746": {
      "op": "DUP3"
    },
    "3747": {
      "op": "DUP5"
    },
    "3748": {
      "op": "SUB"
    },
    "3749": {
      "op": "SLT"
    },
    "3750": {
      "op": "ISZERO"
    },
    "3751": {
      "op": "PUSH2",
      "value": "0xEAF"
    },
    "3754": {
      "op": "JUMPI"
    },
    "3755": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3757": {
      "op": "DUP1"
    },
    "3758": {
      "op": "REVERT"
    },
    "3759": {
      "op": "JUMPDEST"
    },
    "3760": {
      "op": "PUSH2",
      "value": "0xEB8"
    },
    "3763": {
      "op": "DUP3"
    },
    "3764": {
      "op": "PUSH2",
      "value": "0xE57"
    },
    "3767": {
      "jump": "i",
      "op": "JUMP"
    },
    "3768": {
      "op": "JUMPDEST"
    },
    "3769": {
      "op": "SWAP4"
    },
    "3770": {
      "op": "SWAP3"
    },
    "3771": {
      "op": "POP"
    },
    "3772": {
      "op": "POP"
    },
    "3773": {
      "op": "POP"
    },
    "3774": {
      "jump": "o",
      "op": "JUMP"
    },
    "3775": {
      "op": "JUMPDEST"
    },
    "3776": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3778": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3780": {
      "op": "DUP3"
    },
    "3781": {
      "op": "DUP5"
    },
    "3782": {
      "op": "SUB"
    },
    "3783": {
      "op": "SLT"
    },
    "3784": {
      "op": "ISZERO"
    },
    "3785": {
      "op": "PUSH2",
      "value": "0xED1"
    },
    "3788": {
      "op": "JUMPI"
    },
    "3789": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3791": {
      "op": "DUP1"
    },
    "3792": {
      "op": "REVERT"
    },
    "3793": {
      "op": "JUMPDEST"
    },
    "3794": {
      "op": "DUP3"
    },
    "3795": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3797": {
      "op": "DUP4"
    },
    "3798": {
      "op": "ADD"
    },
    "3799": {
      "op": "GT"
    },
    "3800": {
      "op": "ISZERO"
    },
    "3801": {
      "op": "PUSH2",
      "value": "0xA31"
    },
    "3804": {
      "op": "JUMPI"
    },
    "3805": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3807": {
      "op": "DUP1"
    },
    "3808": {
      "op": "REVERT"
    },
    "3809": {
      "op": "JUMPDEST"
    },
    "3810": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3815": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3817": {
      "op": "SHL"
    },
    "3818": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3820": {
      "op": "MSTORE"
    },
    "3821": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3823": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3825": {
      "op": "MSTORE"
    },
    "3826": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3828": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3830": {
      "op": "REVERT"
    },
    "3831": {
      "op": "JUMPDEST"
    },
    "3832": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3834": {
      "op": "DUP1"
    },
    "3835": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3837": {
      "op": "DUP4"
    },
    "3838": {
      "op": "DUP6"
    },
    "3839": {
      "op": "SUB"
    },
    "3840": {
      "op": "SLT"
    },
    "3841": {
      "op": "ISZERO"
    },
    "3842": {
      "op": "PUSH2",
      "value": "0xF0A"
    },
    "3845": {
      "op": "JUMPI"
    },
    "3846": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3848": {
      "op": "DUP1"
    },
    "3849": {
      "op": "REVERT"
    },
    "3850": {
      "op": "JUMPDEST"
    },
    "3851": {
      "op": "DUP3"
    },
    "3852": {
      "op": "CALLDATALOAD"
    },
    "3853": {
      "op": "SWAP2"
    },
    "3854": {
      "op": "POP"
    },
    "3855": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3857": {
      "op": "DUP5"
    },
    "3858": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3860": {
      "op": "DUP6"
    },
    "3861": {
      "op": "ADD"
    },
    "3862": {
      "op": "SLT"
    },
    "3863": {
      "op": "PUSH2",
      "value": "0xF1F"
    },
    "3866": {
      "op": "JUMPI"
    },
    "3867": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3869": {
      "op": "DUP1"
    },
    "3870": {
      "op": "REVERT"
    },
    "3871": {
      "op": "JUMPDEST"
    },
    "3872": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3874": {
      "op": "MLOAD"
    },
    "3875": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3877": {
      "op": "DUP2"
    },
    "3878": {
      "op": "ADD"
    },
    "3879": {
      "op": "DUP2"
    },
    "3880": {
      "op": "DUP2"
    },
    "3881": {
      "op": "LT"
    },
    "3882": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3891": {
      "op": "DUP3"
    },
    "3892": {
      "op": "GT"
    },
    "3893": {
      "op": "OR"
    },
    "3894": {
      "op": "ISZERO"
    },
    "3895": {
      "op": "PUSH2",
      "value": "0xF42"
    },
    "3898": {
      "op": "JUMPI"
    },
    "3899": {
      "op": "PUSH2",
      "value": "0xF42"
    },
    "3902": {
      "op": "PUSH2",
      "value": "0xEE1"
    },
    "3905": {
      "jump": "i",
      "op": "JUMP"
    },
    "3906": {
      "op": "JUMPDEST"
    },
    "3907": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3909": {
      "op": "MSTORE"
    },
    "3910": {
      "op": "DUP1"
    },
    "3911": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3913": {
      "op": "DUP7"
    },
    "3914": {
      "op": "ADD"
    },
    "3915": {
      "op": "DUP8"
    },
    "3916": {
      "op": "DUP2"
    },
    "3917": {
      "op": "GT"
    },
    "3918": {
      "op": "ISZERO"
    },
    "3919": {
      "op": "PUSH2",
      "value": "0xF57"
    },
    "3922": {
      "op": "JUMPI"
    },
    "3923": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3925": {
      "op": "DUP1"
    },
    "3926": {
      "op": "REVERT"
    },
    "3927": {
      "op": "JUMPDEST"
    },
    "3928": {
      "op": "DUP4"
    },
    "3929": {
      "op": "DUP8"
    },
    "3930": {
      "op": "ADD"
    },
    "3931": {
      "op": "JUMPDEST"
    },
    "3932": {
      "op": "DUP2"
    },
    "3933": {
      "op": "DUP2"
    },
    "3934": {
      "op": "LT"
    },
    "3935": {
      "op": "ISZERO"
    },
    "3936": {
      "op": "PUSH2",
      "value": "0xF72"
    },
    "3939": {
      "op": "JUMPI"
    },
    "3940": {
      "op": "DUP1"
    },
    "3941": {
      "op": "CALLDATALOAD"
    },
    "3942": {
      "op": "DUP4"
    },
    "3943": {
      "op": "MSTORE"
    },
    "3944": {
      "op": "SWAP2"
    },
    "3945": {
      "op": "DUP5"
    },
    "3946": {
      "op": "ADD"
    },
    "3947": {
      "op": "SWAP2"
    },
    "3948": {
      "op": "DUP5"
    },
    "3949": {
      "op": "ADD"
    },
    "3950": {
      "op": "PUSH2",
      "value": "0xF5B"
    },
    "3953": {
      "op": "JUMP"
    },
    "3954": {
      "op": "JUMPDEST"
    },
    "3955": {
      "op": "POP"
    },
    "3956": {
      "op": "POP"
    },
    "3957": {
      "op": "POP"
    },
    "3958": {
      "op": "DUP1"
    },
    "3959": {
      "op": "SWAP3"
    },
    "3960": {
      "op": "POP"
    },
    "3961": {
      "op": "POP"
    },
    "3962": {
      "op": "POP"
    },
    "3963": {
      "op": "SWAP3"
    },
    "3964": {
      "op": "POP"
    },
    "3965": {
      "op": "SWAP3"
    },
    "3966": {
      "op": "SWAP1"
    },
    "3967": {
      "op": "POP"
    },
    "3968": {
      "jump": "o",
      "op": "JUMP"
    },
    "3969": {
      "op": "JUMPDEST"
    },
    "3970": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3972": {
      "op": "DUP1"
    },
    "3973": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3975": {
      "op": "DUP4"
    },
    "3976": {
      "op": "DUP6"
    },
    "3977": {
      "op": "SUB"
    },
    "3978": {
      "op": "SLT"
    },
    "3979": {
      "op": "ISZERO"
    },
    "3980": {
      "op": "PUSH2",
      "value": "0xF94"
    },
    "3983": {
      "op": "JUMPI"
    },
    "3984": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3986": {
      "op": "DUP1"
    },
    "3987": {
      "op": "REVERT"
    },
    "3988": {
      "op": "JUMPDEST"
    },
    "3989": {
      "op": "DUP3"
    },
    "3990": {
      "op": "CALLDATALOAD"
    },
    "3991": {
      "op": "SWAP2"
    },
    "3992": {
      "op": "POP"
    },
    "3993": {
      "op": "PUSH2",
      "value": "0xFA4"
    },
    "3996": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3998": {
      "op": "DUP5"
    },
    "3999": {
      "op": "ADD"
    },
    "4000": {
      "op": "PUSH2",
      "value": "0xE57"
    },
    "4003": {
      "jump": "i",
      "op": "JUMP"
    },
    "4004": {
      "op": "JUMPDEST"
    },
    "4005": {
      "op": "SWAP1"
    },
    "4006": {
      "op": "POP"
    },
    "4007": {
      "op": "SWAP3"
    },
    "4008": {
      "op": "POP"
    },
    "4009": {
      "op": "SWAP3"
    },
    "4010": {
      "op": "SWAP1"
    },
    "4011": {
      "op": "POP"
    },
    "4012": {
      "jump": "o",
      "op": "JUMP"
    },
    "4013": {
      "op": "JUMPDEST"
    },
    "4014": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4016": {
      "op": "DUP1"
    },
    "4017": {
      "op": "DUP3"
    },
    "4018": {
      "op": "MSTORE"
    },
    "4019": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "4021": {
      "op": "SWAP1"
    },
    "4022": {
      "op": "DUP3"
    },
    "4023": {
      "op": "ADD"
    },
    "4024": {
      "op": "MSTORE"
    },
    "4025": {
      "op": "PUSH32",
      "value": "0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F"
    },
    "4058": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4060": {
      "op": "DUP3"
    },
    "4061": {
      "op": "ADD"
    },
    "4062": {
      "op": "MSTORE"
    },
    "4063": {
      "op": "PUSH2",
      "value": "0x3717"
    },
    "4066": {
      "op": "PUSH1",
      "value": "0xF1"
    },
    "4068": {
      "op": "SHL"
    },
    "4069": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4071": {
      "op": "DUP3"
    },
    "4072": {
      "op": "ADD"
    },
    "4073": {
      "op": "MSTORE"
    },
    "4074": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4076": {
      "op": "ADD"
    },
    "4077": {
      "op": "SWAP1"
    },
    "4078": {
      "jump": "o",
      "op": "JUMP"
    },
    "4079": {
      "op": "JUMPDEST"
    },
    "4080": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4085": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4087": {
      "op": "SHL"
    },
    "4088": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4090": {
      "op": "MSTORE"
    },
    "4091": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4093": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4095": {
      "op": "MSTORE"
    },
    "4096": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4098": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4100": {
      "op": "REVERT"
    },
    "4101": {
      "op": "JUMPDEST"
    },
    "4102": {
      "op": "DUP1"
    },
    "4103": {
      "op": "DUP3"
    },
    "4104": {
      "op": "ADD"
    },
    "4105": {
      "op": "DUP1"
    },
    "4106": {
      "op": "DUP3"
    },
    "4107": {
      "op": "GT"
    },
    "4108": {
      "op": "ISZERO"
    },
    "4109": {
      "op": "PUSH2",
      "value": "0x7F6"
    },
    "4112": {
      "op": "JUMPI"
    },
    "4113": {
      "op": "PUSH2",
      "value": "0x7F6"
    },
    "4116": {
      "op": "PUSH2",
      "value": "0xFEF"
    },
    "4119": {
      "jump": "i",
      "op": "JUMP"
    },
    "4120": {
      "op": "JUMPDEST"
    },
    "4121": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4126": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4128": {
      "op": "SHL"
    },
    "4129": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4131": {
      "op": "MSTORE"
    },
    "4132": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4134": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4136": {
      "op": "MSTORE"
    },
    "4137": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4139": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4141": {
      "op": "REVERT"
    },
    "4142": {
      "op": "JUMPDEST"
    },
    "4143": {
      "op": "DUP1"
    },
    "4144": {
      "op": "DUP3"
    },
    "4145": {
      "op": "MUL"
    },
    "4146": {
      "op": "DUP2"
    },
    "4147": {
      "op": "ISZERO"
    },
    "4148": {
      "op": "DUP3"
    },
    "4149": {
      "op": "DUP3"
    },
    "4150": {
      "op": "DIV"
    },
    "4151": {
      "op": "DUP5"
    },
    "4152": {
      "op": "EQ"
    },
    "4153": {
      "op": "OR"
    },
    "4154": {
      "op": "PUSH2",
      "value": "0x7F6"
    },
    "4157": {
      "op": "JUMPI"
    },
    "4158": {
      "op": "PUSH2",
      "value": "0x7F6"
    },
    "4161": {
      "op": "PUSH2",
      "value": "0xFEF"
    },
    "4164": {
      "jump": "i",
      "op": "JUMP"
    },
    "4165": {
      "op": "JUMPDEST"
    },
    "4166": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4171": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4173": {
      "op": "SHL"
    },
    "4174": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4176": {
      "op": "MSTORE"
    },
    "4177": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4179": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4181": {
      "op": "MSTORE"
    },
    "4182": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4184": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4186": {
      "op": "REVERT"
    },
    "4187": {
      "op": "JUMPDEST"
    },
    "4188": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4190": {
      "op": "DUP3"
    },
    "4191": {
      "op": "PUSH2",
      "value": "0x106A"
    },
    "4194": {
      "op": "JUMPI"
    },
    "4195": {
      "op": "PUSH2",
      "value": "0x106A"
    },
    "4198": {
      "op": "PUSH2",
      "value": "0x1045"
    },
    "4201": {
      "jump": "i",
      "op": "JUMP"
    },
    "4202": {
      "op": "JUMPDEST"
    },
    "4203": {
      "op": "POP"
    },
    "4204": {
      "op": "DIV"
    },
    "4205": {
      "op": "SWAP1"
    },
    "4206": {
      "jump": "o",
      "op": "JUMP"
    },
    "4207": {
      "op": "JUMPDEST"
    },
    "4208": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4210": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4212": {
      "op": "DUP3"
    },
    "4213": {
      "op": "ADD"
    },
    "4214": {
      "op": "PUSH2",
      "value": "0x1081"
    },
    "4217": {
      "op": "JUMPI"
    },
    "4218": {
      "op": "PUSH2",
      "value": "0x1081"
    },
    "4221": {
      "op": "PUSH2",
      "value": "0xFEF"
    },
    "4224": {
      "jump": "i",
      "op": "JUMP"
    },
    "4225": {
      "op": "JUMPDEST"
    },
    "4226": {
      "op": "POP"
    },
    "4227": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4229": {
      "op": "ADD"
    },
    "4230": {
      "op": "SWAP1"
    },
    "4231": {
      "jump": "o",
      "op": "JUMP"
    },
    "4232": {
      "op": "JUMPDEST"
    },
    "4233": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4235": {
      "op": "DUP3"
    },
    "4236": {
      "op": "PUSH2",
      "value": "0x1097"
    },
    "4239": {
      "op": "JUMPI"
    },
    "4240": {
      "op": "PUSH2",
      "value": "0x1097"
    },
    "4243": {
      "op": "PUSH2",
      "value": "0x1045"
    },
    "4246": {
      "jump": "i",
      "op": "JUMP"
    },
    "4247": {
      "op": "JUMPDEST"
    },
    "4248": {
      "op": "POP"
    },
    "4249": {
      "op": "MOD"
    },
    "4250": {
      "op": "SWAP1"
    },
    "4251": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "ae4fa28eb3739d5e04cf110359d7dc5332ac1bdc",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.18;\n\nimport {BLS} from \"./BLS.sol\";\n\ncontract Dividends {\n    address public owner;\n    uint256 public totalInvestment;\n    uint256 public totalFirstInvestment;\n    uint256 public totalSecondInvestment;\n    uint256[4] public aggBlsPublicKey;\n    uint256[2] public tempMemHash;\n    \n    struct Shareholder {\n        uint256 firstInvestment;\n        uint256 secondInvestment;\n        uint256 income;\n    }\n\n    struct DividendProposal {\n        uint256 id;\n        bool hasVerified;\n        mapping(address => uint256) shareholderDividends;\n    }\n\n    mapping(address => Shareholder) public shareholders;\n    address[] public shareholderAddresses;\n    mapping(uint256 => DividendProposal) public proposals;\n    uint256 public proposalCount;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n        proposalCount = 0;\n    }\n\n    function addFirstInvestment(address _shareholder, uint256 _amount) public onlyOwner {\n        require(shareholders[_shareholder].firstInvestment == 0, \"First investment already made.\");\n        shareholders[_shareholder].firstInvestment = _amount;\n        totalInvestment += _amount;\n        totalFirstInvestment += _amount;\n        shareholderAddresses.push(_shareholder);\n    }\n\n    function addSecondInvestment(address _shareholder, uint256 _amount) public {\n        require(shareholders[_shareholder].firstInvestment > 0, \"First investment not made yet.\");\n        shareholders[_shareholder].secondInvestment += _amount;\n        totalSecondInvestment += _amount;\n        totalInvestment += _amount;\n    }\n\n    function setShareholderIncome(address _shareholder, uint256 _income) public onlyOwner {\n        require(shareholders[_shareholder].firstInvestment > 0, \"First investment not made yet.\");\n        shareholders[_shareholder].income = _income;\n    }\n\n    function setAggBlsPublicKey(uint256[4] calldata _bls_public_key) public onlyOwner {\n        aggBlsPublicKey[0] = _bls_public_key[0];\n        aggBlsPublicKey[1] = _bls_public_key[1];\n        aggBlsPublicKey[2] = _bls_public_key[2];\n        aggBlsPublicKey[3] = _bls_public_key[3];\n    }\n    \n    function calculateTotalIncome() private view returns (uint256) {\n        uint256 totalIncome = 0;\n        for (uint256 i = 0; i < shareholderAddresses.length; i++) {\n            address _shareholder = shareholderAddresses[i];\n            totalIncome += shareholders[_shareholder].income;\n        }\n        return totalIncome;\n    }\n\n    function calculateDividends(address _shareholder) public view returns (uint256) {\n        Shareholder memory s = shareholders[_shareholder];\n        uint256 totalIncome = calculateTotalIncome();\n        uint256 conversionShares = ((1000 * s.firstInvestment)/totalFirstInvestment) / 2;\n        uint256 conversionEarnings = 0;\n        if (totalIncome != 0) {\n            conversionEarnings = (1000 * s.income) / totalIncome;\n        }\n        uint256 secondInvestmentRatio = (1000 * s.secondInvestment) / totalInvestment;\n        uint256 actualDividends = (conversionShares / 4) + (conversionEarnings / 2) + (secondInvestmentRatio / 4);\n        return actualDividends;\n    }\n\n    function createProposalStruct (DividendProposal storage proposal, uint256 _id) internal {\n        proposal.id = _id;\n        proposal.hasVerified = false;\n        for (uint256 i = 0; i < shareholderAddresses.length; i++) {\n            address shareholder = shareholderAddresses[i];\n            uint256 dividends = calculateDividends(shareholder);\n            proposal.shareholderDividends[shareholder] = dividends;\n        }\n    }\n\n    function createProposal() public onlyOwner {\n        DividendProposal storage newProposal = proposals[proposalCount];\n        createProposalStruct(newProposal, proposalCount);\n        proposalCount += 1;\n    }\n\n    function verifyProposal(uint256 _proposalId,\n                            uint256[2] memory _aggSignature) public onlyOwner returns (bool) {\n        uint256[2] memory _memHash = BLS.hashToPoint(abi.encodePacked(_proposalId));\n        tempMemHash[0] = _memHash[0];\n        tempMemHash[1] = _memHash[1];\n        require(BLS.verifySingle(_aggSignature, aggBlsPublicKey, _memHash), \"BLS not verified.\");\n        proposals[_proposalId].hasVerified = true;\n        return true;\n    }\n                             \n    function getShareholderAddresses() public view returns (address[] memory) {\n        return shareholderAddresses;\n    }\n\n    function getShareholderDividends(uint256 _proposalId, address _shareholder) public view returns (uint256) {\n        return proposals[_proposalId].shareholderDividends[_shareholder];\n    }\n    \n}\n",
  "sourceMap": "95:4665:2:-:0;;;923:76;;;;;;;;;-1:-1:-1;947:5:2;:18;;-1:-1:-1;;;;;;947:18:2;955:10;947:18;;;975:13;:17;95:4665;;;;;;",
  "sourcePath": "contracts/Dividends.sol",
  "type": "contract"
}