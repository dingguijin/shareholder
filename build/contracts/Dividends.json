{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addFirstInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addSecondInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aggBlsPublicKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        }
      ],
      "name": "calculateDividends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareholderAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        }
      ],
      "name": "getShareholderDividends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "_bls_public_key",
          "type": "uint256[4]"
        }
      ],
      "name": "setAggBlsPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shareholder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_income",
          "type": "uint256"
        }
      ],
      "name": "setShareholderIncome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shareholderAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shareholders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "income",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tempMemHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFirstInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSecondInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_aggSignature",
          "type": "uint256[2]"
        }
      ],
      "name": "verifyProposal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/BLS.sol",
    "1": "contracts/BN256G2.sol",
    "2": "contracts/Dividends.sol"
  },
  "ast": {
    "absolutePath": "contracts/Dividends.sol",
    "exportedSymbols": {
      "BLS": [
        2320
      ],
      "Dividends": [
        495
      ]
    },
    "id": 496,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:24:2"
      },
      {
        "absolutePath": "contracts/BLS.sol",
        "file": "./BLS.sol",
        "id": 3,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 496,
        "sourceUnit": 2321,
        "src": "63:30:2",
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "BLS",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2320,
              "src": "71:3:2",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Dividends",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 495,
        "linearizedBaseContracts": [
          495
        ],
        "name": "Dividends",
        "nameLocation": "104:9:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 5,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "135:5:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "120:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "120:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "10ea13df",
            "id": 7,
            "mutability": "mutable",
            "name": "totalInvestment",
            "nameLocation": "161:15:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "146:30:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 6,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "146:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b2b233d2",
            "id": 9,
            "mutability": "mutable",
            "name": "totalFirstInvestment",
            "nameLocation": "197:20:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "182:35:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "182:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a5872c72",
            "id": 11,
            "mutability": "mutable",
            "name": "totalSecondInvestment",
            "nameLocation": "238:21:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "223:36:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "223:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "ce7e03f0",
            "id": 15,
            "mutability": "mutable",
            "name": "aggBlsPublicKey",
            "nameLocation": "283:15:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "265:33:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$4_storage",
              "typeString": "uint256[4]"
            },
            "typeName": {
              "baseType": {
                "id": 12,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "265:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 14,
              "length": {
                "hexValue": "34",
                "id": 13,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "273:1:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_4_by_1",
                  "typeString": "int_const 4"
                },
                "value": "4"
              },
              "nodeType": "ArrayTypeName",
              "src": "265:10:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                "typeString": "uint256[4]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "1c063c41",
            "id": 19,
            "mutability": "mutable",
            "name": "tempMemHash",
            "nameLocation": "322:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "304:29:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$2_storage",
              "typeString": "uint256[2]"
            },
            "typeName": {
              "baseType": {
                "id": 16,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "304:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 18,
              "length": {
                "hexValue": "32",
                "id": 17,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "312:1:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_2_by_1",
                  "typeString": "int_const 2"
                },
                "value": "2"
              },
              "nodeType": "ArrayTypeName",
              "src": "304:10:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                "typeString": "uint256[2]"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "Dividends.Shareholder",
            "id": 26,
            "members": [
              {
                "constant": false,
                "id": 21,
                "mutability": "mutable",
                "name": "firstInvestment",
                "nameLocation": "381:15:2",
                "nodeType": "VariableDeclaration",
                "scope": 26,
                "src": "373:23:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 20,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "373:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 23,
                "mutability": "mutable",
                "name": "secondInvestment",
                "nameLocation": "414:16:2",
                "nodeType": "VariableDeclaration",
                "scope": 26,
                "src": "406:24:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 22,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "406:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 25,
                "mutability": "mutable",
                "name": "income",
                "nameLocation": "448:6:2",
                "nodeType": "VariableDeclaration",
                "scope": 26,
                "src": "440:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 24,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "440:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Shareholder",
            "nameLocation": "351:11:2",
            "nodeType": "StructDefinition",
            "scope": 495,
            "src": "344:117:2",
            "visibility": "public"
          },
          {
            "canonicalName": "Dividends.DividendProposal",
            "id": 35,
            "members": [
              {
                "constant": false,
                "id": 28,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "509:2:2",
                "nodeType": "VariableDeclaration",
                "scope": 35,
                "src": "501:10:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 27,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "501:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 30,
                "mutability": "mutable",
                "name": "hasVerified",
                "nameLocation": "526:11:2",
                "nodeType": "VariableDeclaration",
                "scope": 35,
                "src": "521:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 29,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "521:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 34,
                "mutability": "mutable",
                "name": "shareholderDividends",
                "nameLocation": "575:20:2",
                "nodeType": "VariableDeclaration",
                "scope": 35,
                "src": "547:48:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 33,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 31,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "555:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "547:27:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 32,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "566:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "DividendProposal",
            "nameLocation": "474:16:2",
            "nodeType": "StructDefinition",
            "scope": 495,
            "src": "467:135:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5c2930ad",
            "id": 40,
            "mutability": "mutable",
            "name": "shareholders",
            "nameLocation": "647:12:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "608:51:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
              "typeString": "mapping(address => struct Dividends.Shareholder)"
            },
            "typeName": {
              "id": 39,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 36,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "616:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "608:31:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                "typeString": "mapping(address => struct Dividends.Shareholder)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 38,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 37,
                  "name": "Shareholder",
                  "nameLocations": [
                    "627:11:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26,
                  "src": "627:11:2"
                },
                "referencedDeclaration": 26,
                "src": "627:11:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Shareholder_$26_storage_ptr",
                  "typeString": "struct Dividends.Shareholder"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5c3184dc",
            "id": 43,
            "mutability": "mutable",
            "name": "shareholderAddresses",
            "nameLocation": "682:20:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "665:37:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 41,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "665:7:2",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 42,
              "nodeType": "ArrayTypeName",
              "src": "665:9:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "013cf08b",
            "id": 48,
            "mutability": "mutable",
            "name": "proposals",
            "nameLocation": "752:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "708:53:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
              "typeString": "mapping(uint256 => struct Dividends.DividendProposal)"
            },
            "typeName": {
              "id": 47,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 44,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "716:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "708:36:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                "typeString": "mapping(uint256 => struct Dividends.DividendProposal)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 46,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 45,
                  "name": "DividendProposal",
                  "nameLocations": [
                    "727:16:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 35,
                  "src": "727:16:2"
                },
                "referencedDeclaration": 35,
                "src": "727:16:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                  "typeString": "struct Dividends.DividendProposal"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "da35c664",
            "id": 50,
            "mutability": "mutable",
            "name": "proposalCount",
            "nameLocation": "782:13:2",
            "nodeType": "VariableDeclaration",
            "scope": 495,
            "src": "767:28:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 49,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "767:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 61,
              "nodeType": "Block",
              "src": "823:94:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 53,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "841:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "845:6:2",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "841:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 55,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "855:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "841:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6e2e",
                        "id": 57,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "862:36:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0fcea41e877c4f84237ea6b9061acc9b3fc97555de5ba31615eb7b8cf7110239",
                          "typeString": "literal_string \"Only owner can call this function.\""
                        },
                        "value": "Only owner can call this function."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0fcea41e877c4f84237ea6b9061acc9b3fc97555de5ba31615eb7b8cf7110239",
                          "typeString": "literal_string \"Only owner can call this function.\""
                        }
                      ],
                      "id": 52,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "833:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 58,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "833:66:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 59,
                  "nodeType": "ExpressionStatement",
                  "src": "833:66:2"
                },
                {
                  "id": 60,
                  "nodeType": "PlaceholderStatement",
                  "src": "909:1:2"
                }
              ]
            },
            "id": 62,
            "name": "onlyOwner",
            "nameLocation": "811:9:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "820:2:2"
            },
            "src": "802:115:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "937:62:2",
              "statements": [
                {
                  "expression": {
                    "id": 68,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "947:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 66,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "955:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 67,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "959:6:2",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "955:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "947:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 69,
                  "nodeType": "ExpressionStatement",
                  "src": "947:18:2"
                },
                {
                  "expression": {
                    "id": 72,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 70,
                      "name": "proposalCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "975:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "991:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "975:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 73,
                  "nodeType": "ExpressionStatement",
                  "src": "975:17:2"
                }
              ]
            },
            "id": 75,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "934:2:2"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "937:0:2"
            },
            "scope": 495,
            "src": "923:76:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 115,
              "nodeType": "Block",
              "src": "1089:295:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 85,
                              "name": "shareholders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1107:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                              }
                            },
                            "id": 87,
                            "indexExpression": {
                              "id": 86,
                              "name": "_shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "1120:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1107:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                              "typeString": "struct Dividends.Shareholder storage ref"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1134:15:2",
                          "memberName": "firstInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "1107:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 89,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1153:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1107:47:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466972737420696e766573746d656e7420616c7265616479206d6164652e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1156:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a34bc9329f15edefed43e22fbb96d5affa6544422fd8a35b82df3e370fb704d7",
                          "typeString": "literal_string \"First investment already made.\""
                        },
                        "value": "First investment already made."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a34bc9329f15edefed43e22fbb96d5affa6544422fd8a35b82df3e370fb704d7",
                          "typeString": "literal_string \"First investment already made.\""
                        }
                      ],
                      "id": 84,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1099:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1099:90:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1099:90:2"
                },
                {
                  "expression": {
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 94,
                          "name": "shareholders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1199:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                            "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                          }
                        },
                        "id": 96,
                        "indexExpression": {
                          "id": 95,
                          "name": "_shareholder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 77,
                          "src": "1212:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1199:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                          "typeString": "struct Dividends.Shareholder storage ref"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "1226:15:2",
                      "memberName": "firstInvestment",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 21,
                      "src": "1199:42:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 98,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1244:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1199:52:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 100,
                  "nodeType": "ExpressionStatement",
                  "src": "1199:52:2"
                },
                {
                  "expression": {
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 101,
                      "name": "totalInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1261:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 102,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1280:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1261:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1261:26:2"
                },
                {
                  "expression": {
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 105,
                      "name": "totalFirstInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "1297:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 106,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "1321:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1297:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "1297:31:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 112,
                        "name": "_shareholder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 77,
                        "src": "1364:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 109,
                        "name": "shareholderAddresses",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "1338:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 111,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1359:4:2",
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "1338:25:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
                        "typeString": "function (address[] storage pointer,address)"
                      }
                    },
                    "id": 113,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1338:39:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 114,
                  "nodeType": "ExpressionStatement",
                  "src": "1338:39:2"
                }
              ]
            },
            "functionSelector": "fb8159eb",
            "id": 116,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 82,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 81,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1079:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "1079:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1079:9:2"
              }
            ],
            "name": "addFirstInvestment",
            "nameLocation": "1014:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 77,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "1041:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 116,
                  "src": "1033:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 76,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1033:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 79,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "1063:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 116,
                  "src": "1055:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 78,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1055:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1032:39:2"
            },
            "returnParameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1089:0:2"
            },
            "scope": 495,
            "src": "1005:379:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 148,
              "nodeType": "Block",
              "src": "1465:248:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 124,
                              "name": "shareholders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1483:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                              }
                            },
                            "id": 126,
                            "indexExpression": {
                              "id": 125,
                              "name": "_shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 118,
                              "src": "1496:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1483:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                              "typeString": "struct Dividends.Shareholder storage ref"
                            }
                          },
                          "id": 127,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1510:15:2",
                          "memberName": "firstInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "1483:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1528:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1483:46:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466972737420696e766573746d656e74206e6f74206d616465207965742e",
                        "id": 130,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1531:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        },
                        "value": "First investment not made yet."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        }
                      ],
                      "id": 123,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1475:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1475:89:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 132,
                  "nodeType": "ExpressionStatement",
                  "src": "1475:89:2"
                },
                {
                  "expression": {
                    "id": 138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 133,
                          "name": "shareholders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1574:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                            "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                          }
                        },
                        "id": 135,
                        "indexExpression": {
                          "id": 134,
                          "name": "_shareholder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 118,
                          "src": "1587:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1574:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                          "typeString": "struct Dividends.Shareholder storage ref"
                        }
                      },
                      "id": 136,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "1601:16:2",
                      "memberName": "secondInvestment",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 23,
                      "src": "1574:43:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 137,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "1621:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1574:54:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 139,
                  "nodeType": "ExpressionStatement",
                  "src": "1574:54:2"
                },
                {
                  "expression": {
                    "id": 142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 140,
                      "name": "totalSecondInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "1638:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 141,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "1663:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1638:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 143,
                  "nodeType": "ExpressionStatement",
                  "src": "1638:32:2"
                },
                {
                  "expression": {
                    "id": 146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 144,
                      "name": "totalInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1680:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 145,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "1699:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1680:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 147,
                  "nodeType": "ExpressionStatement",
                  "src": "1680:26:2"
                }
              ]
            },
            "functionSelector": "ac30b1ff",
            "id": 149,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addSecondInvestment",
            "nameLocation": "1399:19:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 118,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "1427:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1419:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 117,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1419:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 120,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "1449:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "1441:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 119,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1441:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1418:39:2"
            },
            "returnParameters": {
              "id": 122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1465:0:2"
            },
            "scope": 495,
            "src": "1390:323:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 175,
              "nodeType": "Block",
              "src": "1805:159:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 164,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 159,
                              "name": "shareholders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1823:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                              }
                            },
                            "id": 161,
                            "indexExpression": {
                              "id": 160,
                              "name": "_shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "1836:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1823:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                              "typeString": "struct Dividends.Shareholder storage ref"
                            }
                          },
                          "id": 162,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1850:15:2",
                          "memberName": "firstInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 21,
                          "src": "1823:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1868:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1823:46:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "466972737420696e766573746d656e74206e6f74206d616465207965742e",
                        "id": 165,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1871:32:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        },
                        "value": "First investment not made yet."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c863b9d70253f1c8b18220a1778864785ac07abb96318af25e0d18ccfd43495",
                          "typeString": "literal_string \"First investment not made yet.\""
                        }
                      ],
                      "id": 158,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1815:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1815:89:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 167,
                  "nodeType": "ExpressionStatement",
                  "src": "1815:89:2"
                },
                {
                  "expression": {
                    "id": 173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 168,
                          "name": "shareholders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1914:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                            "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                          }
                        },
                        "id": 170,
                        "indexExpression": {
                          "id": 169,
                          "name": "_shareholder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 151,
                          "src": "1927:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1914:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                          "typeString": "struct Dividends.Shareholder storage ref"
                        }
                      },
                      "id": 171,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "1941:6:2",
                      "memberName": "income",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25,
                      "src": "1914:33:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 172,
                      "name": "_income",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 153,
                      "src": "1950:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1914:43:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 174,
                  "nodeType": "ExpressionStatement",
                  "src": "1914:43:2"
                }
              ]
            },
            "functionSelector": "4c06d9e3",
            "id": 176,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 156,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 155,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1795:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "1795:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1795:9:2"
              }
            ],
            "name": "setShareholderIncome",
            "nameLocation": "1728:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 151,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "1757:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 176,
                  "src": "1749:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 150,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1749:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 153,
                  "mutability": "mutable",
                  "name": "_income",
                  "nameLocation": "1779:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 176,
                  "src": "1771:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 152,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1771:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1748:39:2"
            },
            "returnParameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1805:0:2"
            },
            "scope": 495,
            "src": "1719:245:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 217,
              "nodeType": "Block",
              "src": "2052:203:2",
              "statements": [
                {
                  "expression": {
                    "id": 191,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 185,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2062:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 187,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 186,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2078:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2062:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 188,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2083:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 190,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2099:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2083:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2062:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 192,
                  "nodeType": "ExpressionStatement",
                  "src": "2062:39:2"
                },
                {
                  "expression": {
                    "id": 199,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 193,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2111:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 195,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2127:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2111:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 196,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2132:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 198,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 197,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2148:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2132:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2111:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 200,
                  "nodeType": "ExpressionStatement",
                  "src": "2111:39:2"
                },
                {
                  "expression": {
                    "id": 207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 201,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2160:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 203,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2176:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2160:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 204,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2181:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 206,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2197:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2181:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2160:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 208,
                  "nodeType": "ExpressionStatement",
                  "src": "2160:39:2"
                },
                {
                  "expression": {
                    "id": 215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 209,
                        "name": "aggBlsPublicKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "2209:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_storage",
                          "typeString": "uint256[4] storage ref"
                        }
                      },
                      "id": 211,
                      "indexExpression": {
                        "hexValue": "33",
                        "id": 210,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2225:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2209:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 212,
                        "name": "_bls_public_key",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 180,
                        "src": "2230:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                          "typeString": "uint256[4] calldata"
                        }
                      },
                      "id": 214,
                      "indexExpression": {
                        "hexValue": "33",
                        "id": 213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2246:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2230:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2209:39:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 216,
                  "nodeType": "ExpressionStatement",
                  "src": "2209:39:2"
                }
              ]
            },
            "functionSelector": "65efb3cd",
            "id": 218,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 183,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 182,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "2042:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "2042:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "2042:9:2"
              }
            ],
            "name": "setAggBlsPublicKey",
            "nameLocation": "1979:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 180,
                  "mutability": "mutable",
                  "name": "_bls_public_key",
                  "nameLocation": "2018:15:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 218,
                  "src": "1998:35:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                    "typeString": "uint256[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 177,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1998:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 179,
                    "length": {
                      "hexValue": "34",
                      "id": 178,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2006:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_4_by_1",
                        "typeString": "int_const 4"
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1998:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                      "typeString": "uint256[4]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1997:37:2"
            },
            "returnParameters": {
              "id": 184,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:0:2"
            },
            "scope": 495,
            "src": "1970:285:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 255,
              "nodeType": "Block",
              "src": "2328:268:2",
              "statements": [
                {
                  "assignments": [
                    224
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 224,
                      "mutability": "mutable",
                      "name": "totalIncome",
                      "nameLocation": "2346:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 255,
                      "src": "2338:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 223,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2338:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 226,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2360:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2338:23:2"
                },
                {
                  "body": {
                    "id": 251,
                    "nodeType": "Block",
                    "src": "2429:133:2",
                    "statements": [
                      {
                        "assignments": [
                          239
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 239,
                            "mutability": "mutable",
                            "name": "_shareholder",
                            "nameLocation": "2451:12:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 251,
                            "src": "2443:20:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 238,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2443:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 243,
                        "initialValue": {
                          "baseExpression": {
                            "id": 240,
                            "name": "shareholderAddresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43,
                            "src": "2466:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 242,
                          "indexExpression": {
                            "id": 241,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 228,
                            "src": "2487:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2466:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2443:46:2"
                      },
                      {
                        "expression": {
                          "id": 249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 244,
                            "name": "totalIncome",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 224,
                            "src": "2503:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 245,
                                "name": "shareholders",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "2518:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                                  "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                                }
                              },
                              "id": 247,
                              "indexExpression": {
                                "id": 246,
                                "name": "_shareholder",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 239,
                                "src": "2531:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2518:26:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                                "typeString": "struct Dividends.Shareholder storage ref"
                              }
                            },
                            "id": 248,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2545:6:2",
                            "memberName": "income",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 25,
                            "src": "2518:33:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2503:48:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 250,
                        "nodeType": "ExpressionStatement",
                        "src": "2503:48:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 231,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 228,
                      "src": "2391:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 232,
                        "name": "shareholderAddresses",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "2395:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 233,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2416:6:2",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2395:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2391:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 252,
                  "initializationExpression": {
                    "assignments": [
                      228
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 228,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2384:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 252,
                        "src": "2376:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 227,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2376:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 230,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 229,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2388:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2376:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2424:3:2",
                      "subExpression": {
                        "id": 235,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 228,
                        "src": "2424:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 237,
                    "nodeType": "ExpressionStatement",
                    "src": "2424:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "2371:191:2"
                },
                {
                  "expression": {
                    "id": 253,
                    "name": "totalIncome",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 224,
                    "src": "2578:11:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 222,
                  "id": 254,
                  "nodeType": "Return",
                  "src": "2571:18:2"
                }
              ]
            },
            "id": 256,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateTotalIncome",
            "nameLocation": "2274:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2294:2:2"
            },
            "returnParameters": {
              "id": 222,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 221,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 256,
                  "src": "2319:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 220,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2319:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2318:9:2"
            },
            "scope": 495,
            "src": "2265:331:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 328,
              "nodeType": "Block",
              "src": "2682:567:2",
              "statements": [
                {
                  "assignments": [
                    265
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 265,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "2711:1:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 328,
                      "src": "2692:20:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                        "typeString": "struct Dividends.Shareholder"
                      },
                      "typeName": {
                        "id": 264,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 263,
                          "name": "Shareholder",
                          "nameLocations": [
                            "2692:11:2"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 26,
                          "src": "2692:11:2"
                        },
                        "referencedDeclaration": 26,
                        "src": "2692:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Shareholder_$26_storage_ptr",
                          "typeString": "struct Dividends.Shareholder"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 269,
                  "initialValue": {
                    "baseExpression": {
                      "id": 266,
                      "name": "shareholders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "2715:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Shareholder_$26_storage_$",
                        "typeString": "mapping(address => struct Dividends.Shareholder storage ref)"
                      }
                    },
                    "id": 268,
                    "indexExpression": {
                      "id": 267,
                      "name": "_shareholder",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 258,
                      "src": "2728:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2715:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Shareholder_$26_storage",
                      "typeString": "struct Dividends.Shareholder storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2692:49:2"
                },
                {
                  "assignments": [
                    271
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 271,
                      "mutability": "mutable",
                      "name": "totalIncome",
                      "nameLocation": "2759:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 328,
                      "src": "2751:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 270,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2751:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 274,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 272,
                      "name": "calculateTotalIncome",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 256,
                      "src": "2773:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2773:22:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2751:44:2"
                },
                {
                  "assignments": [
                    276
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 276,
                      "mutability": "mutable",
                      "name": "conversionShares",
                      "nameLocation": "2813:16:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 328,
                      "src": "2805:24:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 275,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2805:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 284,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 280,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 277,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 265,
                              "src": "2833:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                                "typeString": "struct Dividends.Shareholder memory"
                              }
                            },
                            "id": 278,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2835:15:2",
                            "memberName": "firstInvestment",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 21,
                            "src": "2833:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 279,
                            "name": "totalFirstInvestment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "2851:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2833:38:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 281,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "2832:40:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "32",
                      "id": 282,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2875:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "2832:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2805:71:2"
                },
                {
                  "assignments": [
                    286
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 286,
                      "mutability": "mutable",
                      "name": "conversionEarnings",
                      "nameLocation": "2894:18:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 328,
                      "src": "2886:26:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 285,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2886:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 288,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 287,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2915:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2886:30:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 291,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 289,
                      "name": "totalIncome",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 271,
                      "src": "2930:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 290,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2945:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2930:16:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 300,
                  "nodeType": "IfStatement",
                  "src": "2926:90:2",
                  "trueBody": {
                    "id": 299,
                    "nodeType": "Block",
                    "src": "2948:68:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 292,
                            "name": "conversionEarnings",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 286,
                            "src": "2962:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 293,
                                "name": "s",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 265,
                                "src": "2983:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                                  "typeString": "struct Dividends.Shareholder memory"
                                }
                              },
                              "id": 294,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2985:6:2",
                              "memberName": "income",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 25,
                              "src": "2983:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 295,
                              "name": "totalIncome",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 271,
                              "src": "2994:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2983:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2962:43:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 298,
                        "nodeType": "ExpressionStatement",
                        "src": "2962:43:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    302
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 302,
                      "mutability": "mutable",
                      "name": "secondInvestmentRatio",
                      "nameLocation": "3033:21:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 328,
                      "src": "3025:29:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 301,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3025:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 308,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 307,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "expression": {
                            "id": 303,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 265,
                            "src": "3058:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Shareholder_$26_memory_ptr",
                              "typeString": "struct Dividends.Shareholder memory"
                            }
                          },
                          "id": 304,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3060:16:2",
                          "memberName": "secondInvestment",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 23,
                          "src": "3058:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 305,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3057:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "id": 306,
                      "name": "totalInvestment",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "3080:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3057:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3025:70:2"
                },
                {
                  "assignments": [
                    310
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 310,
                      "mutability": "mutable",
                      "name": "actualDividends",
                      "nameLocation": "3113:15:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 328,
                      "src": "3105:23:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 309,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3105:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 325,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 319,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 313,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 311,
                              "name": "conversionShares",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 276,
                              "src": "3132:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "34",
                              "id": 312,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3151:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_4_by_1",
                                "typeString": "int_const 4"
                              },
                              "value": "4"
                            },
                            "src": "3132:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 314,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "3131:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 317,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 315,
                              "name": "conversionEarnings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 286,
                              "src": "3157:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "32",
                              "id": 316,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3178:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2_by_1",
                                "typeString": "int_const 2"
                              },
                              "value": "2"
                            },
                            "src": "3157:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 318,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "3156:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "3131:49:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 320,
                            "name": "secondInvestmentRatio",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 302,
                            "src": "3184:21:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "34",
                            "id": 321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3208:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_4_by_1",
                              "typeString": "int_const 4"
                            },
                            "value": "4"
                          },
                          "src": "3184:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 323,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3183:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3131:79:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3105:105:2"
                },
                {
                  "expression": {
                    "id": 326,
                    "name": "actualDividends",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 310,
                    "src": "3227:15:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 262,
                  "id": 327,
                  "nodeType": "Return",
                  "src": "3220:22:2"
                }
              ]
            },
            "functionSelector": "912c1555",
            "id": 329,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateDividends",
            "nameLocation": "2611:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 258,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "2638:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 329,
                  "src": "2630:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 257,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2630:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2629:22:2"
            },
            "returnParameters": {
              "id": 262,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 261,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 329,
                  "src": "2673:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 260,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2673:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2672:9:2"
            },
            "scope": 495,
            "src": "2602:647:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 382,
              "nodeType": "Block",
              "src": "3343:342:2",
              "statements": [
                {
                  "expression": {
                    "id": 341,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 337,
                        "name": "proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 332,
                        "src": "3353:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        }
                      },
                      "id": 339,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "3362:2:2",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28,
                      "src": "3353:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 340,
                      "name": "_id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 334,
                      "src": "3367:3:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3353:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 342,
                  "nodeType": "ExpressionStatement",
                  "src": "3353:17:2"
                },
                {
                  "expression": {
                    "id": 347,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 343,
                        "name": "proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 332,
                        "src": "3380:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        }
                      },
                      "id": 345,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "3389:11:2",
                      "memberName": "hasVerified",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30,
                      "src": "3380:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 346,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3403:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3380:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 348,
                  "nodeType": "ExpressionStatement",
                  "src": "3380:28:2"
                },
                {
                  "body": {
                    "id": 380,
                    "nodeType": "Block",
                    "src": "3476:203:2",
                    "statements": [
                      {
                        "assignments": [
                          361
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 361,
                            "mutability": "mutable",
                            "name": "shareholder",
                            "nameLocation": "3498:11:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 380,
                            "src": "3490:19:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 360,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3490:7:2",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 365,
                        "initialValue": {
                          "baseExpression": {
                            "id": 362,
                            "name": "shareholderAddresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43,
                            "src": "3512:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 364,
                          "indexExpression": {
                            "id": 363,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 350,
                            "src": "3533:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3512:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3490:45:2"
                      },
                      {
                        "assignments": [
                          367
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 367,
                            "mutability": "mutable",
                            "name": "dividends",
                            "nameLocation": "3557:9:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 380,
                            "src": "3549:17:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 366,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3549:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 371,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 369,
                              "name": "shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 361,
                              "src": "3588:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 368,
                            "name": "calculateDividends",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 329,
                            "src": "3569:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3569:31:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3549:51:2"
                      },
                      {
                        "expression": {
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 372,
                                "name": "proposal",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 332,
                                "src": "3614:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                                  "typeString": "struct Dividends.DividendProposal storage pointer"
                                }
                              },
                              "id": 375,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3623:20:2",
                              "memberName": "shareholderDividends",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 34,
                              "src": "3614:29:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 376,
                            "indexExpression": {
                              "id": 374,
                              "name": "shareholder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 361,
                              "src": "3644:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3614:42:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 377,
                            "name": "dividends",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 367,
                            "src": "3659:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3614:54:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 379,
                        "nodeType": "ExpressionStatement",
                        "src": "3614:54:2"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 356,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 353,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 350,
                      "src": "3438:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 354,
                        "name": "shareholderAddresses",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43,
                        "src": "3442:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 355,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3463:6:2",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3442:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3438:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 381,
                  "initializationExpression": {
                    "assignments": [
                      350
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 350,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3431:1:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 381,
                        "src": "3423:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 349,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3423:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 352,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 351,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3435:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3423:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 358,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "3471:3:2",
                      "subExpression": {
                        "id": 357,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 350,
                        "src": "3471:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 359,
                    "nodeType": "ExpressionStatement",
                    "src": "3471:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "3418:261:2"
                }
              ]
            },
            "id": 383,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createProposalStruct",
            "nameLocation": "3264:20:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 335,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 332,
                  "mutability": "mutable",
                  "name": "proposal",
                  "nameLocation": "3311:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 383,
                  "src": "3286:33:2",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                    "typeString": "struct Dividends.DividendProposal"
                  },
                  "typeName": {
                    "id": 331,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 330,
                      "name": "DividendProposal",
                      "nameLocations": [
                        "3286:16:2"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 35,
                      "src": "3286:16:2"
                    },
                    "referencedDeclaration": 35,
                    "src": "3286:16:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                      "typeString": "struct Dividends.DividendProposal"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 334,
                  "mutability": "mutable",
                  "name": "_id",
                  "nameLocation": "3329:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 383,
                  "src": "3321:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 333,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3321:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3285:48:2"
            },
            "returnParameters": {
              "id": 336,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3343:0:2"
            },
            "scope": 495,
            "src": "3255:430:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 404,
              "nodeType": "Block",
              "src": "3734:166:2",
              "statements": [
                {
                  "assignments": [
                    390
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 390,
                      "mutability": "mutable",
                      "name": "newProposal",
                      "nameLocation": "3769:11:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 404,
                      "src": "3744:36:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                        "typeString": "struct Dividends.DividendProposal"
                      },
                      "typeName": {
                        "id": 389,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 388,
                          "name": "DividendProposal",
                          "nameLocations": [
                            "3744:16:2"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 35,
                          "src": "3744:16:2"
                        },
                        "referencedDeclaration": 35,
                        "src": "3744:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 394,
                  "initialValue": {
                    "baseExpression": {
                      "id": 391,
                      "name": "proposals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48,
                      "src": "3783:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                        "typeString": "mapping(uint256 => struct Dividends.DividendProposal storage ref)"
                      }
                    },
                    "id": 393,
                    "indexExpression": {
                      "id": 392,
                      "name": "proposalCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "3793:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3783:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DividendProposal_$35_storage",
                      "typeString": "struct Dividends.DividendProposal storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3744:63:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 396,
                        "name": "newProposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 390,
                        "src": "3838:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        }
                      },
                      {
                        "id": 397,
                        "name": "proposalCount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "3851:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage_ptr",
                          "typeString": "struct Dividends.DividendProposal storage pointer"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 395,
                      "name": "createProposalStruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 383,
                      "src": "3817:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_DividendProposal_$35_storage_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (struct Dividends.DividendProposal storage pointer,uint256)"
                      }
                    },
                    "id": 398,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3817:48:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 399,
                  "nodeType": "ExpressionStatement",
                  "src": "3817:48:2"
                },
                {
                  "expression": {
                    "id": 402,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 400,
                      "name": "proposalCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "3875:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 401,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3892:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3875:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 403,
                  "nodeType": "ExpressionStatement",
                  "src": "3875:18:2"
                }
              ]
            },
            "functionSelector": "180fd87f",
            "id": 405,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 386,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 385,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "3724:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "3724:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "3724:9:2"
              }
            ],
            "name": "createProposal",
            "nameLocation": "3700:14:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 384,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3714:2:2"
            },
            "returnParameters": {
              "id": 387,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3734:0:2"
            },
            "scope": 495,
            "src": "3691:209:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 467,
              "nodeType": "Block",
              "src": "4044:338:2",
              "statements": [
                {
                  "assignments": [
                    423
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 423,
                      "mutability": "mutable",
                      "name": "_memHash",
                      "nameLocation": "4072:8:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 467,
                      "src": "4054:26:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                        "typeString": "uint256[2]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 421,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4054:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 422,
                        "length": {
                          "hexValue": "32",
                          "id": 420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4062:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "4054:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                          "typeString": "uint256[2]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 431,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 428,
                            "name": "_proposalId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 407,
                            "src": "4116:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 426,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4099:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 427,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4103:12:2",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "4099:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 429,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4099:29:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 424,
                        "name": "BLS",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2320,
                        "src": "4083:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_BLS_$2320_$",
                          "typeString": "type(library BLS)"
                        }
                      },
                      "id": 425,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4087:11:2",
                      "memberName": "hashToPoint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 875,
                      "src": "4083:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$2_memory_ptr_$",
                        "typeString": "function (bytes memory) view returns (uint256[2] memory)"
                      }
                    },
                    "id": 430,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4083:46:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                      "typeString": "uint256[2] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4054:75:2"
                },
                {
                  "expression": {
                    "id": 438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 432,
                        "name": "tempMemHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "4139:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_storage",
                          "typeString": "uint256[2] storage ref"
                        }
                      },
                      "id": 434,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4151:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4139:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 435,
                        "name": "_memHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 423,
                        "src": "4156:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      "id": 437,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4165:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4156:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4139:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 439,
                  "nodeType": "ExpressionStatement",
                  "src": "4139:28:2"
                },
                {
                  "expression": {
                    "id": 446,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 440,
                        "name": "tempMemHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "4177:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_storage",
                          "typeString": "uint256[2] storage ref"
                        }
                      },
                      "id": 442,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 441,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4189:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4177:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 443,
                        "name": "_memHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 423,
                        "src": "4194:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      "id": 445,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4203:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4194:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4177:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 447,
                  "nodeType": "ExpressionStatement",
                  "src": "4177:28:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 451,
                            "name": "_aggSignature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 411,
                            "src": "4240:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          },
                          {
                            "id": 452,
                            "name": "aggBlsPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15,
                            "src": "4255:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$4_storage",
                              "typeString": "uint256[4] storage ref"
                            }
                          },
                          {
                            "id": 453,
                            "name": "_memHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 423,
                            "src": "4272:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$4_storage",
                              "typeString": "uint256[4] storage ref"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          ],
                          "expression": {
                            "id": 449,
                            "name": "BLS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2320,
                            "src": "4223:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_BLS_$2320_$",
                              "typeString": "type(library BLS)"
                            }
                          },
                          "id": 450,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4227:12:2",
                          "memberName": "verifySingle",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 641,
                          "src": "4223:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$4_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (uint256[2] memory,uint256[4] memory,uint256[2] memory) view returns (bool)"
                          }
                        },
                        "id": 454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4223:58:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "424c53206e6f742076657269666965642e",
                        "id": 455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4283:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_83a0712a26eed63ed1c7163a1f13a2912b8911c5157de4d6e22dfca5625ceb23",
                          "typeString": "literal_string \"BLS not verified.\""
                        },
                        "value": "BLS not verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_83a0712a26eed63ed1c7163a1f13a2912b8911c5157de4d6e22dfca5625ceb23",
                          "typeString": "literal_string \"BLS not verified.\""
                        }
                      ],
                      "id": 448,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4215:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4215:88:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 457,
                  "nodeType": "ExpressionStatement",
                  "src": "4215:88:2"
                },
                {
                  "expression": {
                    "id": 463,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 458,
                          "name": "proposals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48,
                          "src": "4313:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                            "typeString": "mapping(uint256 => struct Dividends.DividendProposal storage ref)"
                          }
                        },
                        "id": 460,
                        "indexExpression": {
                          "id": 459,
                          "name": "_proposalId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 407,
                          "src": "4323:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4313:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage",
                          "typeString": "struct Dividends.DividendProposal storage ref"
                        }
                      },
                      "id": 461,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "4336:11:2",
                      "memberName": "hasVerified",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30,
                      "src": "4313:34:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 462,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4350:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4313:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 464,
                  "nodeType": "ExpressionStatement",
                  "src": "4313:41:2"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4371:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 417,
                  "id": 466,
                  "nodeType": "Return",
                  "src": "4364:11:2"
                }
              ]
            },
            "functionSelector": "c40c6c5c",
            "id": 468,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 414,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 413,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "4019:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 62,
                  "src": "4019:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "4019:9:2"
              }
            ],
            "name": "verifyProposal",
            "nameLocation": "3915:14:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 407,
                  "mutability": "mutable",
                  "name": "_proposalId",
                  "nameLocation": "3938:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 468,
                  "src": "3930:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 406,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3930:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 411,
                  "mutability": "mutable",
                  "name": "_aggSignature",
                  "nameLocation": "3997:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 468,
                  "src": "3979:31:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 408,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3979:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 410,
                    "length": {
                      "hexValue": "32",
                      "id": 409,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3987:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "3979:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3929:82:2"
            },
            "returnParameters": {
              "id": 417,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 416,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 468,
                  "src": "4038:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 415,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4038:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4037:6:2"
            },
            "scope": 495,
            "src": "3906:476:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 476,
              "nodeType": "Block",
              "src": "4491:44:2",
              "statements": [
                {
                  "expression": {
                    "id": 474,
                    "name": "shareholderAddresses",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 43,
                    "src": "4508:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage",
                      "typeString": "address[] storage ref"
                    }
                  },
                  "functionReturnParameters": 473,
                  "id": 475,
                  "nodeType": "Return",
                  "src": "4501:27:2"
                }
              ]
            },
            "functionSelector": "0039b55c",
            "id": 477,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getShareholderAddresses",
            "nameLocation": "4426:23:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 469,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4449:2:2"
            },
            "returnParameters": {
              "id": 473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 472,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 477,
                  "src": "4473:16:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 470,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4473:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 471,
                    "nodeType": "ArrayTypeName",
                    "src": "4473:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4472:18:2"
            },
            "scope": 495,
            "src": "4417:118:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 493,
              "nodeType": "Block",
              "src": "4647:81:2",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 486,
                          "name": "proposals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48,
                          "src": "4664:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_DividendProposal_$35_storage_$",
                            "typeString": "mapping(uint256 => struct Dividends.DividendProposal storage ref)"
                          }
                        },
                        "id": 488,
                        "indexExpression": {
                          "id": 487,
                          "name": "_proposalId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 479,
                          "src": "4674:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4664:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DividendProposal_$35_storage",
                          "typeString": "struct Dividends.DividendProposal storage ref"
                        }
                      },
                      "id": 489,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4687:20:2",
                      "memberName": "shareholderDividends",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 34,
                      "src": "4664:43:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 491,
                    "indexExpression": {
                      "id": 490,
                      "name": "_shareholder",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 481,
                      "src": "4708:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4664:57:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 485,
                  "id": 492,
                  "nodeType": "Return",
                  "src": "4657:64:2"
                }
              ]
            },
            "functionSelector": "deb1557d",
            "id": 494,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getShareholderDividends",
            "nameLocation": "4550:23:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 479,
                  "mutability": "mutable",
                  "name": "_proposalId",
                  "nameLocation": "4582:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "4574:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4574:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 481,
                  "mutability": "mutable",
                  "name": "_shareholder",
                  "nameLocation": "4603:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "4595:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 480,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4595:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4573:43:2"
            },
            "returnParameters": {
              "id": 485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 484,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "4638:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4638:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4637:9:2"
            },
            "scope": 495,
            "src": "4541:187:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 496,
        "src": "95:4640:2",
        "usedErrors": []
      }
    ],
    "src": "37:4699:2"
  },
  "bytecode": "",
  "bytecodeSha1": "fe769d7b55ab3435ed1c5b258e57d9c8c99fbf8d",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.19+commit.7dd6d404"
  },
  "contractName": "Dividends",
  "coverageMap": {
    "branches": {
      "0": {
        "BLS.sqrt": {
          "47": [
            15911,
            15922,
            true
          ]
        },
        "BLS.verifySingle": {
          "46": [
            3333,
            3340,
            true
          ]
        }
      },
      "1": {},
      "2": {
        "Dividends.addFirstInvestment": {
          "45": [
            1107,
            1154,
            true
          ]
        },
        "Dividends.calculateDividends": {
          "43": [
            2930,
            2946,
            false
          ]
        },
        "Dividends.verifyProposal": {
          "44": [
            4223,
            4281,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "BLS.hashToPoint": {
          "31": [
            4872,
            4906
          ]
        },
        "BLS.mapToPoint": {
          "34": [
            5116,
            5135
          ],
          "35": [
            5149,
            5168
          ],
          "36": [
            5182,
            5201
          ],
          "37": [
            5215,
            5235
          ],
          "38": [
            5278,
            5286
          ],
          "39": [
            5304,
            5312
          ],
          "40": [
            5330,
            5335
          ],
          "41": [
            5363,
            5382
          ]
        },
        "BLS.sqrt": {
          "42": [
            15903,
            15955
          ]
        },
        "BLS.verifySingle": {
          "32": [
            3325,
            3345
          ],
          "33": [
            3355,
            3373
          ]
        }
      },
      "1": {},
      "2": {
        "Dividends.addFirstInvestment": {
          "19": [
            1099,
            1189
          ],
          "20": [
            1199,
            1251
          ],
          "21": [
            1261,
            1287
          ],
          "22": [
            1297,
            1328
          ],
          "23": [
            1338,
            1377
          ]
        },
        "Dividends.addSecondInvestment": {
          "11": [
            1475,
            1564
          ],
          "12": [
            1574,
            1628
          ],
          "13": [
            1638,
            1670
          ],
          "14": [
            1680,
            1706
          ]
        },
        "Dividends.calculateDividends": {
          "10": [
            2962,
            3005
          ]
        },
        "Dividends.calculateTotalIncome": {
          "28": [
            2503,
            2551
          ],
          "29": [
            2424,
            2427
          ],
          "30": [
            2571,
            2589
          ]
        },
        "Dividends.createProposal": {
          "2": [
            3817,
            3865
          ],
          "3": [
            3875,
            3893
          ]
        },
        "Dividends.createProposalStruct": {
          "24": [
            3353,
            3370
          ],
          "25": [
            3380,
            3408
          ],
          "26": [
            3614,
            3668
          ],
          "27": [
            3471,
            3474
          ]
        },
        "Dividends.getShareholderAddresses": {
          "1": [
            4501,
            4528
          ]
        },
        "Dividends.getShareholderDividends": {
          "0": [
            4657,
            4721
          ]
        },
        "Dividends.setAggBlsPublicKey": {
          "6": [
            2062,
            2101
          ],
          "7": [
            2111,
            2150
          ],
          "8": [
            2160,
            2199
          ],
          "9": [
            2209,
            2248
          ]
        },
        "Dividends.setShareholderIncome": {
          "4": [
            1815,
            1904
          ],
          "5": [
            1914,
            1957
          ]
        },
        "Dividends.verifyProposal": {
          "15": [
            4139,
            4167
          ],
          "16": [
            4177,
            4205
          ],
          "17": [
            4215,
            4303
          ],
          "18": [
            4313,
            4354
          ]
        }
      }
    }
  },
  "dependencies": [
    "BLS",
    "BN256G2"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "95:4640:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4417:118;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;708:53;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;1030:25:3;;;1098:14;;1091:22;1086:2;1071:18;;1064:50;1003:18;708:53:2;862:258:3;146:30:2;;;;;;;;;1271:25:3;;;1259:2;1244:18;146:30:2;1125:177:3;3691:209:2;;;:::i;:::-;;304:29;;;;;;:::i;:::-;;:::i;1719:245::-;;;;;;:::i;:::-;;:::i;608:51::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2137:25:3;;;2193:2;2178:18;;2171:34;;;;2221:18;;;2214:34;2125:2;2110:18;608:51:2;1935:319:3;665:37:2;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2423:32:3;;;2405:51;;2393:2;2378:18;665:37:2;2259:203:3;1970:285:2;;;;;;:::i;:::-;;:::i;120:20::-;;;;;-1:-1:-1;;;;;120:20:2;;;2602:647;;;;;;:::i;:::-;;:::i;223:36::-;;;;;;1390:323;;;;;;:::i;:::-;;:::i;182:35::-;;;;;;3906:476;;;;;;:::i;:::-;;:::i;:::-;;;3868:14:3;;3861:22;3843:41;;3831:2;3816:18;3906:476:2;3703:187:3;265:33:2;;;;;;:::i;:::-;;:::i;767:28::-;;;;;;4541:187;;;;;;:::i;:::-;4638:7;4664:22;;;:9;:22;;;;;;;;-1:-1:-1;;;;;4664:57:2;;;;:43;;:57;;;;;;4541:187;;;;;1005:379;;;;;;:::i;:::-;;:::i;4417:118::-;4473:16;4508:20;4501:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4501:27:2;;;;;;;;;;;;;;;;;;;;;;;4417:118;:::o;3691:209::-;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;;;;;;;;;3793:13:::1;::::0;3744:36:::1;3783:24:::0;;;:9:::1;:24;::::0;;;;;3817:48:::1;::::0;3783:24;;3817:20:::1;:48::i;:::-;3892:1;3875:13;;:18;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;3691:209:2:o;304:29::-;;;;;;;;;;;;;;;-1:-1:-1;304:29:2;:::o;1719:245::-;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;1823:26:2;::::1;1868:1;1823:26:::0;;;:12:::1;:26;::::0;;;;:42;1815:89:::1;;;::::0;-1:-1:-1;;;1815:89:2;;5021:2:3;1815:89:2::1;::::0;::::1;5003:21:3::0;5060:2;5040:18;;;5033:30;5099:32;5079:18;;;5072:60;5149:18;;1815:89:2::1;4819:354:3::0;1815:89:2::1;-1:-1:-1::0;;;;;1914:26:2;;::::1;;::::0;;;:12:::1;:26;::::0;;;;:33:::1;;:43:::0;1719:245::o;665:37::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;665:37:2;;-1:-1:-1;665:37:2;:::o;1970:285::-;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;2083:18;::::1;2062:15;:39:::0;2083:18:::1;2132::::0;::::1;;2111::::0;:39;2181:18;;::::1;;2160::::0;:39;2230:18;::::1;;2209::::0;:39;1970:285::o;2602:647::-;-1:-1:-1;;;;;2715:26:2;;2673:7;2715:26;;;:12;:26;;;;;;;;2692:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2673:7;2773:22;:20;:22::i;:::-;2751:44;;2805:24;2875:1;2851:20;;2833:1;:17;;;:38;;;;:::i;:::-;2832:44;;;;:::i;:::-;2805:71;-1:-1:-1;2886:26:2;2930:16;;2926:90;;2994:11;2983:1;:8;;;:22;;;;:::i;:::-;2962:43;;2926:90;3025:29;3080:15;;3058:1;:18;;;3057:38;;;;:::i;:::-;3025:70;-1:-1:-1;3105:23:2;3184:25;3208:1;3025:70;3184:25;:::i;:::-;3157:22;3178:1;3157:18;:22;:::i;:::-;3132:20;3151:1;3132:16;:20;:::i;:::-;3131:49;;;;:::i;:::-;:79;;;;:::i;:::-;3105:105;2602:647;-1:-1:-1;;;;;;;;2602:647:2:o;1390:323::-;-1:-1:-1;;;;;1483:26:2;;1528:1;1483:26;;;:12;:26;;;;;:42;1475:89;;;;-1:-1:-1;;;1475:89:2;;5021:2:3;1475:89:2;;;5003:21:3;5060:2;5040:18;;;5033:30;5099:32;5079:18;;;5072:60;5149:18;;1475:89:2;4819:354:3;1475:89:2;-1:-1:-1;;;;;1574:26:2;;;;;;:12;:26;;;;;:43;;:54;;1621:7;;1574:26;:54;;1621:7;;1574:54;:::i;:::-;;;;;;;;1663:7;1638:21;;:32;;;;;;;:::i;:::-;;;;;;;;1699:7;1680:15;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;1390:323:2:o;3906:476::-;4038:4;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;4054:26:::1;4083:46;4116:11;4099:29;;;;;;5696:19:3::0;;5740:2;5731:12;;5567:182;4099:29:2::1;;;;;;;;;;;;;4083:15;:46::i;:::-;4156:11:::0;;4139::::1;:28:::0;4156:11:::1;4194::::0;::::1;::::0;4177:14;:28;4223:58:::1;::::0;;;;::::1;::::0;;;;4054:75;;-1:-1:-1;4223:58:2::1;::::0;4240:13;;4255:15:::1;::::0;;;;4223:58;::::1;;;;;;;;;;;;;;;;;;;;;4272:8;4223:16;:58::i;:::-;4215:88;;;::::0;-1:-1:-1;;;4215:88:2;;5956:2:3;4215:88:2::1;::::0;::::1;5938:21:3::0;5995:2;5975:18;;;5968:30;-1:-1:-1;;;6014:18:3;;;6007:47;6071:18;;4215:88:2::1;5754:341:3::0;4215:88:2::1;-1:-1:-1::0;;4313:22:2::1;::::0;;;:9:::1;:22;::::0;;;;4350:4:::1;4313:34:::0;;::::1;:41:::0;;-1:-1:-1;;4313:41:2::1;::::0;::::1;::::0;;909:1:::1;3906:476:::0;;;;:::o;265:33::-;;;;;;;;;;;1005:379;855:5;;-1:-1:-1;;;;;855:5:2;841:10;:19;833:66;;;;-1:-1:-1;;;833:66:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;1107:26:2;::::1;;::::0;;;:12:::1;:26;::::0;;;;:42;:47;1099:90:::1;;;::::0;-1:-1:-1;;;1099:90:2;;6302:2:3;1099:90:2::1;::::0;::::1;6284:21:3::0;6341:2;6321:18;;;6314:30;6380:32;6360:18;;;6353:60;6430:18;;1099:90:2::1;6100:354:3::0;1099:90:2::1;-1:-1:-1::0;;;;;1199:26:2;::::1;;::::0;;;:12:::1;:26;::::0;;;;:52;;;1261:15:::1;:26:::0;;1244:7;;1199:26;1261::::1;::::0;1244:7;;1261:26:::1;:::i;:::-;;;;;;;;1321:7;1297:20;;:31;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;1338:20:2::1;:39:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1338:39:2;;;;;::::1;::::0;;-1:-1:-1;;;;;;1338:39:2::1;-1:-1:-1::0;;;;;1338:39:2;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;1005:379:2:o;3255:430::-;3353:17;;;3380:20;;;:28;;-1:-1:-1;;3380:28:2;;;3353:11;3418:261;3442:20;:27;3438:31;;3418:261;;;3490:19;3512:20;3533:1;3512:23;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;3512:23:2;;-1:-1:-1;3569:31:2;3512:23;3569:18;:31::i;:::-;-1:-1:-1;;;;;3614:42:2;;;;;;;:29;;;:42;;;;;:54;;;;-1:-1:-1;3471:3:2;;;;:::i;:::-;;;;3418:261;;;;3255:430;;:::o;2265:331::-;2319:7;;;2371:191;2395:20;:27;2391:31;;2371:191;;;2443:20;2466;2487:1;2466:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;2466:23:2;2518:26;;;:12;:26;;;;;;;:33;;;2466:23;;-1:-1:-1;2503:48:2;;;;:::i;:::-;;;2429:133;2424:3;;;;;:::i;:::-;;;;2371:191;;;-1:-1:-1;2578:11:2;2265:331;-1:-1:-1;2265:331:2:o;4778:135:0:-;4841:19;;:::i;:::-;4879:27;4900:4;4890:15;;;;;;4879:10;:27::i;2535:845::-;2692:4;2708:24;:295;;;;;;;;2736:9;2746:1;2736:12;;;;;;;:::i;:::-;;;;;2708:295;;;;2786:9;2796:1;2786:12;;;;;;;:::i;:::-;;;;;2708:295;;;;1177:77;2708:295;;;;1285:77;2708:295;;;;1393:77;2708:295;;;;1501:77;2708:295;;;;2900:7;2908:1;2900:10;;;;;;;:::i;:::-;;;;;2708:295;;;;2912:7;2920:1;2912:10;;;;;;;:::i;:::-;;;;;2708:295;;;;2960:6;2967:1;2960:9;;;;;;;:::i;:::-;;;;;2708:295;;;;2971:6;2978:1;2971:9;;;;;;;:::i;:::-;;;;;2708:295;;;;2982:6;2989:1;2982:9;;;;;;;:::i;:::-;;;;;2708:295;;;;2993:6;3000:1;2993:9;;;;;;;:::i;:::-;;;;;2708:295;;;-1:-1:-1;3013:21:0;;:::i;:::-;3044:12;3213:4;3208:3;3203;3196:5;3193:1;3186:4;3179:5;3175:16;3164:54;3153:65;-1:-1:-1;3153:65:0;;3231:75;3258:48;3283:9;3231:75;;3333:7;3325:20;;;;-1:-1:-1;;;3325:20:0;;6801:2:3;3325:20:0;;;6783:21:3;-1:-1:-1;6820:18:3;;;6813:29;6859:18;;3325:20:0;6599:284:3;3325:20:0;-1:-1:-1;3362:6:0;:11;;;;-1:-1:-1;;;;;2535:845:0:o;4919:480::-;4974:19;;:::i;:::-;5005:9;5017:15;-1:-1:-1;;;;;;;;;;;5025:2:0;5017:15;:::i;:::-;5005:27;-1:-1:-1;5042:9:0;;5089:304;-1:-1:-1;;;;;;;;;;;5130:1:0;5127;5120:15;5116:19;-1:-1:-1;;;;;;;;;;;;5163:1:0;5160;5153:15;5149:19;-1:-1:-1;;;;;;;;;;;;5196:1:0;5193;5186:15;5182:19;;5228:7;5233:1;5228:4;:7::i;:::-;5215:20;;-1:-1:-1;5215:20:0;-1:-1:-1;5249:101:0;;;;5278:8;;;:4;5304;;:8;;;5330:5;;5249:101;-1:-1:-1;;;;;;;;;;;5377:1:0;5374;5367:15;5363:19;;5089:304;;;4995:404;;;4919:480;;;:::o;14932:1030::-;14981:9;14992:12;15016:16;15150:4;15144:11;15184:4;15175:7;15168:21;15229:4;15222;15213:7;15209:18;15202:32;15274:4;15267;15258:7;15254:18;15247:32;15319:2;15312:4;15303:7;15299:18;15292:30;15457:65;15450:4;15441:7;15437:18;15430:93;-1:-1:-1;;;;;;;;;;;15642:4:0;15633:7;15629:18;15622:94;15800:4;15791:7;15785:4;15776:7;15773:1;15766:4;15759:5;15755:16;15744:61;15823:14;;;-1:-1:-1;15729:76:0;-1:-1:-1;;;;;;;;;;;;15823:14:0;;15868:15;15864:2;15861:23;15850:34;;15911:11;15903:52;;;;-1:-1:-1;;;15903:52:0;;7207:2:3;15903:52:0;;;7189:21:3;7246:2;7226:18;;;7219:30;7285;7265:18;;;7258:58;7333:18;;15903:52:0;7005:352:3;15903:52:0;15006:956;14932:1030;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:658:3:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:195;465:6;462:1;459:13;451:195;;;530:13;;-1:-1:-1;;;;;526:39:3;514:52;;621:15;;;;586:12;;;;562:1;480:9;451:195;;;-1:-1:-1;663:3:3;;14:658;-1:-1:-1;;;;;;14:658:3:o;677:180::-;736:6;789:2;777:9;768:7;764:23;760:32;757:52;;;805:1;802;795:12;757:52;-1:-1:-1;828:23:3;;677:180;-1:-1:-1;677:180:3:o;1307:173::-;1375:20;;-1:-1:-1;;;;;1424:31:3;;1414:42;;1404:70;;1470:1;1467;1460:12;1404:70;1307:173;;;:::o;1485:254::-;1553:6;1561;1614:2;1602:9;1593:7;1589:23;1585:32;1582:52;;;1630:1;1627;1620:12;1582:52;1653:29;1672:9;1653:29;:::i;:::-;1643:39;1729:2;1714:18;;;;1701:32;;-1:-1:-1;;;1485:254:3:o;1744:186::-;1803:6;1856:2;1844:9;1835:7;1831:23;1827:32;1824:52;;;1872:1;1869;1862:12;1824:52;1895:29;1914:9;1895:29;:::i;:::-;1885:39;1744:186;-1:-1:-1;;;1744:186:3:o;2467:253::-;2551:6;2604:3;2592:9;2583:7;2579:23;2575:33;2572:53;;;2621:1;2618;2611:12;2572:53;2661:7;2655:3;2644:9;2640:19;2637:32;2634:52;;;2682:1;2679;2672:12;2725:127;2786:10;2781:3;2777:20;2774:1;2767:31;2817:4;2814:1;2807:15;2841:4;2838:1;2831:15;2857:841;2948:6;2956;3009:2;2997:9;2988:7;2984:23;2980:32;2977:52;;;3025:1;3022;3015:12;2977:52;3061:9;3048:23;3038:33;;3090:2;3135:7;3130:2;3119:9;3115:18;3111:32;3101:60;;3157:1;3154;3147:12;3101:60;3190:2;3184:9;3232:2;3224:6;3220:15;3301:6;3289:10;3286:22;3265:18;3253:10;3250:34;3247:62;3244:88;;;3312:18;;:::i;:::-;3348:2;3341:22;3383:6;3427:2;3412:18;;3442:19;;;3439:39;;;3474:1;3471;3464:12;3439:39;3513:2;3502:9;3498:18;3525:142;3541:6;3536:3;3533:15;3525:142;;;3607:17;;3595:30;;3645:12;;;;3558;;3525:142;;;3529:3;;;3686:6;3676:16;;;;2857:841;;;;;:::o;3895:254::-;3963:6;3971;4024:2;4012:9;4003:7;3999:23;3995:32;3992:52;;;4040:1;4037;4030:12;3992:52;4076:9;4063:23;4053:33;;4105:38;4139:2;4128:9;4124:18;4105:38;:::i;:::-;4095:48;;3895:254;;;;;:::o;4154:398::-;4356:2;4338:21;;;4395:2;4375:18;;;4368:30;4434:34;4429:2;4414:18;;4407:62;-1:-1:-1;;;4500:2:3;4485:18;;4478:32;4542:3;4527:19;;4154:398::o;4557:127::-;4618:10;4613:3;4609:20;4606:1;4599:31;4649:4;4646:1;4639:15;4673:4;4670:1;4663:15;4689:125;4754:9;;;4775:10;;;4772:36;;;4788:18;;:::i;5178:127::-;5239:10;5234:3;5230:20;5227:1;5220:31;5270:4;5267:1;5260:15;5294:4;5291:1;5284:15;5310:127;5371:10;5366:3;5362:20;5359:1;5352:31;5402:4;5399:1;5392:15;5426:4;5423:1;5416:15;5442:120;5482:1;5508;5498:35;;5513:18;;:::i;:::-;-1:-1:-1;5547:9:3;;5442:120::o;6459:135::-;6498:3;6519:17;;;6516:43;;6539:18;;:::i;:::-;-1:-1:-1;6586:1:3;6575:13;;6459:135::o;6888:112::-;6920:1;6946;6936:35;;6951:18;;:::i;:::-;-1:-1:-1;6985:9:3;;6888:112::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    95,
    4735
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x120 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC40C6C5C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC40C6C5C EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xCE7E03F0 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0xDA35C664 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0xDEB1557D EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0xFB8159EB EQ PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x912C1555 EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0xA5872C72 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xAC30B1FF EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0xB2B233D2 EQ PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1C063C41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x1C063C41 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x4C06D9E3 EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x5C2930AD EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x5C3184DC EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x65EFB3CD EQ PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x39B55C EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x13CF08B EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x10EA13DF EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x180FD87F EQ PUSH2 0x199 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12D PUSH2 0x328 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xDCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0xE19 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x18B PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x38A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0x3F5 JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x1C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE4E JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x226 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0xE9A JUMP JUMPDEST PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x226 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xE78 JUMP JUMPDEST PUSH2 0x52C JUMP JUMPDEST PUSH2 0x18B PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0xE4E JUMP JUMPDEST PUSH2 0x607 JUMP JUMPDEST PUSH2 0x18B PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2AF PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0xED2 JUMP JUMPDEST PUSH2 0x6D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0x7D7 JUMP JUMPDEST PUSH2 0x18B PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF5C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A1 PUSH2 0x323 CALLDATASIZE PUSH1 0x4 PUSH2 0xE4E JUMP JUMPDEST PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x362 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH2 0x3DA SWAP1 DUP3 SWAP1 PUSH2 0x916 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP2 PUSH1 0x2 DUP2 LT PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x436 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x49B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SSTORE JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xF88 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 SSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x5 SSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x6 SSTORE PUSH1 0x60 ADD CALLDATALOAD PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD MSTORE DUP2 PUSH2 0x570 PUSH2 0x99D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP1 SLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x587 SWAP2 SWAP1 PUSH2 0x101F JUMP JUMPDEST PUSH2 0x591 SWAP2 SWAP1 PUSH2 0x101F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x5AE JUMPI DUP3 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x5AB SWAP2 SWAP1 PUSH2 0x101F JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x101F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5D1 PUSH1 0x4 DUP4 PUSH2 0x101F JUMP JUMPDEST PUSH2 0x5DC PUSH1 0x2 DUP6 PUSH2 0x101F JUMP JUMPDEST PUSH2 0x5E7 PUSH1 0x4 DUP8 PUSH2 0x101F JUMP JUMPDEST PUSH2 0x5F1 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST PUSH2 0x5FB SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x66C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x697 SWAP1 DUP5 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6B0 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6C9 SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x729 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x715 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xA12 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x8 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x9 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH2 0x771 SWAP2 DUP6 SWAP2 PUSH1 0x4 SWAP1 DUP2 SWAP1 DUP2 DUP5 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x753 JUMPI POP POP POP POP POP DUP4 PUSH2 0xA2A JUMP JUMPDEST PUSH2 0x7B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x212629903737BA103B32B934B334B2B217 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 OR SWAP1 SSTORE JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 LT PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x811 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B4 SWAP1 PUSH2 0xF88 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x877 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466972737420696E766573746D656E7420616C7265616479206D6164652E0000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x8A4 SWAP1 DUP5 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x8BD SWAP2 SWAP1 PUSH2 0xFE0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST DUP1 DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x0 JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x998 JUMPI PUSH1 0x0 PUSH1 0xB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x947 JUMPI PUSH2 0x947 PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x966 DUP3 PUSH2 0x52C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP DUP1 PUSH2 0x990 DUP2 PUSH2 0x1033 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x928 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0xA0C JUMPI PUSH1 0x0 PUSH1 0xB DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x9C1 JUMPI PUSH2 0x9C1 PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0xA SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x9F6 SWAP1 DUP5 PUSH2 0xFE0 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0xA04 SWAP1 PUSH2 0x1033 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9A2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA1A PUSH2 0xD90 JUMP JUMPDEST PUSH2 0x7D1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0xA4C JUMPI PUSH2 0xA4C PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0xA69 JUMPI PUSH2 0xA69 PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x198E9393920D483A7260BFB731FB5D25F1AA493335A9E71297E485B7AEF312C2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1800DEEF121F1E76426A00665E5C4479674322D4F75EDADD46DEBD5CD992F6ED DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x275DC4A288D1AFB3CBB1AC09187524C7DB36395DF7BE3B99E673B13A075A65EC DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1D9BEFCD05A5323E6DA4D435F3B617CDB3AF83285C2DF711EF39C01571827F9D DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH2 0xB1E JUMPI PUSH2 0xB1E PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH2 0xB3B JUMPI PUSH2 0xB3B PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x1 PUSH1 0x4 DUP2 LT PUSH2 0xB58 JUMPI PUSH2 0xB58 PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 PUSH1 0x4 DUP2 LT PUSH2 0xB75 JUMPI PUSH2 0xB75 PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x3 PUSH1 0x4 DUP2 LT PUSH2 0xB92 JUMPI PUSH2 0xB92 PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x2 PUSH1 0x4 DUP2 LT PUSH2 0xBAF JUMPI PUSH2 0xBAF PUSH2 0xFF3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP1 MSTORE SWAP1 POP PUSH2 0xBC0 PUSH2 0xDAE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 PUSH2 0x180 DUP6 PUSH1 0x8 PUSH2 0x7D0 GAS SUB STATICCALL SWAP1 POP DUP1 DUP1 PUSH2 0xBDB JUMPI INVALID JUMPDEST POP DUP1 PUSH2 0xC03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3B4 JUMP JUMPDEST POP MLOAD ISZERO ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC18 PUSH2 0xD90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC32 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x104C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP5 MULMOD SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP4 MULMOD SWAP2 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x3 DUP4 ADDMOD SWAP2 POP PUSH2 0xC7E DUP3 PUSH2 0xCBA JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xC98 JUMPI DUP3 DUP5 MSTORE PUSH1 0x20 DUP5 ADD DUP3 SWAP1 MSTORE PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 DUP5 ADDMOD SWAP3 POP PUSH2 0xC38 JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP3 ADD MSTORE DUP5 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP4 PUSH1 0x5 PUSH2 0x7D0 GAS SUB STATICCALL SWAP1 MLOAD SWAP4 POP SWAP1 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1061 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP1 MULMOD DUP5 EQ SWAP2 POP DUP1 PUSH2 0xD8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x424C533A2073717274206D6F646578702063616C6C206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B4 JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE0D JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xDE8 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE6A DUP4 PUSH2 0xE32 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE93 DUP3 PUSH2 0xE32 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x80 DUP4 ADD GT ISZERO PUSH2 0xA0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x3F DUP6 ADD SLT PUSH2 0xEFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xF1D JUMPI PUSH2 0xF1D PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP7 ADD DUP8 DUP2 GT ISZERO PUSH2 0xF32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF4D JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 DUP5 ADD PUSH2 0xF36 JUMP JUMPDEST POP POP POP DUP1 SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xF7F PUSH1 0x20 DUP5 ADD PUSH2 0xE32 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3717 PUSH1 0xF1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7D1 JUMPI PUSH2 0x7D1 PUSH2 0xFCA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x102E JUMPI PUSH2 0x102E PUSH2 0x1009 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1045 JUMPI PUSH2 0x1045 PUSH2 0xFCA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x105B JUMPI PUSH2 0x105B PUSH2 0x1009 JUMP JUMPDEST POP MOD SWAP1 JUMP INVALID ADDRESS PUSH5 0x4E72E131A0 0x29 0xB8 POP GASLIMIT 0xB6 DUP2 DUP2 PC 0x5D SWAP8 DUP2 PUSH11 0x916871CA8D3C208C16D87C REVERT SELFBALANCE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 DUP11 0xB9 PUSH10 0xCFAE10995E700B4402BB 0xE DUP5 EQ 0xDA 0xCD GAS 0x23 0xAA 0xAA 0x4B 0x1E 0xC6 DUP4 PUSH11 0x9DD6F56564736F6C634300 ADDMOD SGT STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x120"
    },
    "25": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "38": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAD"
    },
    "42": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC40C6C5C"
    },
    "49": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "GT",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC40C6C5C"
    },
    "60": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x29C"
    },
    "64": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xCE7E03F0"
    },
    "71": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2BF"
    },
    "75": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xDA35C664"
    },
    "82": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2D2"
    },
    "86": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xDEB1557D"
    },
    "93": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2DB"
    },
    "97": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "99": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xFB8159EB"
    },
    "104": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "105": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x315"
    },
    "108": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "109": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "112": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "REVERT",
      "path": "2"
    },
    "113": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "120": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x251"
    },
    "124": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x912C1555"
    },
    "131": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x264"
    },
    "135": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "137": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA5872C72"
    },
    "142": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "143": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x277"
    },
    "146": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "148": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAC30B1FF"
    },
    "153": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "154": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x280"
    },
    "157": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "158": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "159": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xB2B233D2"
    },
    "164": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "165": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x293"
    },
    "168": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "169": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "172": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "REVERT",
      "path": "2"
    },
    "173": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "174": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "175": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x1C063C41"
    },
    "180": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "GT",
      "path": "2"
    },
    "181": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF4"
    },
    "184": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "185": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "186": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x1C063C41"
    },
    "191": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "192": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A3"
    },
    "195": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "196": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "197": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x4C06D9E3"
    },
    "202": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "203": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B6"
    },
    "206": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "207": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "208": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x5C2930AD"
    },
    "213": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "214": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C9"
    },
    "217": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "218": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "219": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x5C3184DC"
    },
    "224": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "225": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x213"
    },
    "228": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "229": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "230": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x65EFB3CD"
    },
    "235": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "236": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x23E"
    },
    "239": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "240": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "242": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "243": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "REVERT",
      "path": "2"
    },
    "244": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "245": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "246": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0x39B55C"
    },
    "250": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "251": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x125"
    },
    "254": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "255": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "256": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x13CF08B"
    },
    "261": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "262": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x143"
    },
    "265": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "266": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "267": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x10EA13DF"
    },
    "272": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "273": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x182"
    },
    "276": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "277": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "278": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x180FD87F"
    },
    "283": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "EQ",
      "path": "2"
    },
    "284": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x199"
    },
    "287": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "288": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "289": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "291": {
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "DUP1",
      "path": "2"
    },
    "292": {
      "first_revert": true,
      "fn": null,
      "offset": [
        95,
        4735
      ],
      "op": "REVERT",
      "path": "2"
    },
    "293": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "294": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12D"
    },
    "297": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x328"
    },
    "300": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "i",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMP",
      "path": "2"
    },
    "301": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "302": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "304": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "305": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "308": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "309": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "310": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDCC"
    },
    "313": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "i",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMP",
      "path": "2"
    },
    "314": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "315": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "317": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "318": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "DUP1",
      "path": "2"
    },
    "319": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "320": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "SUB",
      "path": "2"
    },
    "321": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "322": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "RETURN",
      "path": "2"
    },
    "323": {
      "offset": [
        708,
        761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "324": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16D"
    },
    "327": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x151"
    },
    "330": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "331": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "333": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE19"
    },
    "336": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "i",
      "offset": [
        708,
        761
      ],
      "op": "JUMP",
      "path": "2"
    },
    "337": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "338": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "340": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "342": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "343": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "345": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "346": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP2",
      "path": "2"
    },
    "347": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "348": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "350": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "351": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "352": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP1",
      "path": "2"
    },
    "353": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "354": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "356": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "357": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "358": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "ADD",
      "path": "2"
    },
    "359": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "360": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "362": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "AND",
      "path": "2"
    },
    "363": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP3",
      "path": "2"
    },
    "364": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "JUMP",
      "path": "2"
    },
    "365": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "366": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "368": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "DUP1",
      "path": "2"
    },
    "369": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        708,
        761
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "370": {
      "op": "SWAP3"
    },
    "371": {
      "op": "DUP4"
    },
    "372": {
      "op": "MSTORE"
    },
    "373": {
      "op": "SWAP1"
    },
    "374": {
      "op": "ISZERO"
    },
    "375": {
      "op": "ISZERO"
    },
    "376": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "378": {
      "op": "DUP4"
    },
    "379": {
      "op": "ADD"
    },
    "380": {
      "op": "MSTORE"
    },
    "381": {
      "op": "ADD"
    },
    "382": {
      "offset": [
        708,
        761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "385": {
      "op": "JUMP"
    },
    "386": {
      "offset": [
        146,
        176
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "387": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "390": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "392": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "393": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "DUP2",
      "path": "2"
    },
    "394": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "JUMP",
      "path": "2"
    },
    "395": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "396": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "398": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        146,
        176
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "399": {
      "op": "SWAP1"
    },
    "400": {
      "op": "DUP2"
    },
    "401": {
      "op": "MSTORE"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "404": {
      "op": "ADD"
    },
    "405": {
      "offset": [
        146,
        176
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "408": {
      "op": "JUMP"
    },
    "409": {
      "fn": "Dividends.createProposal",
      "offset": [
        3691,
        3900
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "410": {
      "fn": "Dividends.createProposal",
      "offset": [
        3691,
        3900
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "413": {
      "fn": "Dividends.createProposal",
      "offset": [
        3691,
        3900
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x38A"
    },
    "416": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        3691,
        3900
      ],
      "op": "JUMP",
      "path": "2"
    },
    "417": {
      "fn": "Dividends.createProposal",
      "offset": [
        3691,
        3900
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "418": {
      "fn": "Dividends.createProposal",
      "offset": [
        3691,
        3900
      ],
      "op": "STOP",
      "path": "2"
    },
    "419": {
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "420": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "423": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B1"
    },
    "426": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "427": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "429": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE19"
    },
    "432": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        304,
        333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "433": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "434": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3F5"
    },
    "437": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        304,
        333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "438": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "439": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "442": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C4"
    },
    "445": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "446": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "448": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE4E"
    },
    "451": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "452": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "453": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x40C"
    },
    "456": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "457": {
      "offset": [
        608,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "458": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F8"
    },
    "461": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1D7"
    },
    "464": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "465": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "467": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE78"
    },
    "470": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        608,
        659
      ],
      "op": "JUMP",
      "path": "2"
    },
    "471": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "472": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "474": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "476": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "477": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "479": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "480": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP2",
      "path": "2"
    },
    "481": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "482": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "484": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "485": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "486": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP1",
      "path": "2"
    },
    "487": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "488": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "490": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP3",
      "path": "2"
    },
    "491": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "ADD",
      "path": "2"
    },
    "492": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "493": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "495": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "496": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "497": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "ADD",
      "path": "2"
    },
    "498": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "499": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "500": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "501": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "502": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP4",
      "path": "2"
    },
    "503": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "JUMP",
      "path": "2"
    },
    "504": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "505": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "507": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "DUP1",
      "path": "2"
    },
    "508": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        608,
        659
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "509": {
      "op": "SWAP4"
    },
    "510": {
      "op": "DUP5"
    },
    "511": {
      "op": "MSTORE"
    },
    "512": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "514": {
      "op": "DUP5"
    },
    "515": {
      "op": "ADD"
    },
    "516": {
      "op": "SWAP3"
    },
    "517": {
      "op": "SWAP1"
    },
    "518": {
      "op": "SWAP3"
    },
    "519": {
      "op": "MSTORE"
    },
    "520": {
      "op": "SWAP1"
    },
    "521": {
      "op": "DUP3"
    },
    "522": {
      "op": "ADD"
    },
    "523": {
      "op": "MSTORE"
    },
    "524": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "526": {
      "op": "ADD"
    },
    "527": {
      "offset": [
        608,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "530": {
      "op": "JUMP"
    },
    "531": {
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "532": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x226"
    },
    "535": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x221"
    },
    "538": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "539": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "541": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE19"
    },
    "544": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        665,
        702
      ],
      "op": "JUMP",
      "path": "2"
    },
    "545": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "546": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4BA"
    },
    "549": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        665,
        702
      ],
      "op": "JUMP",
      "path": "2"
    },
    "550": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "551": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "553": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "558": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "560": {
      "op": "SHL"
    },
    "561": {
      "op": "SUB"
    },
    "562": {
      "op": "SWAP1"
    },
    "563": {
      "op": "SWAP2"
    },
    "564": {
      "op": "AND"
    },
    "565": {
      "op": "DUP2"
    },
    "566": {
      "op": "MSTORE"
    },
    "567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "569": {
      "op": "ADD"
    },
    "570": {
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "573": {
      "op": "JUMP"
    },
    "574": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "575": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "578": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x24C"
    },
    "581": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "582": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "584": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE9A"
    },
    "587": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "i",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMP",
      "path": "2"
    },
    "588": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "589": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4E4"
    },
    "592": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "i",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMP",
      "path": "2"
    },
    "593": {
      "offset": [
        120,
        140
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "594": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "596": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "597": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x226"
    },
    "600": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "605": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "607": {
      "op": "SHL"
    },
    "608": {
      "op": "SUB"
    },
    "609": {
      "offset": [
        120,
        140
      ],
      "op": "AND",
      "path": "2"
    },
    "610": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "DUP2",
      "path": "2"
    },
    "611": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        120,
        140
      ],
      "op": "JUMP",
      "path": "2"
    },
    "612": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "613": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "616": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x272"
    },
    "619": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "620": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "622": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE78"
    },
    "625": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2602,
        3249
      ],
      "op": "JUMP",
      "path": "2"
    },
    "626": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "627": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x52C"
    },
    "630": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2602,
        3249
      ],
      "op": "JUMP",
      "path": "2"
    },
    "631": {
      "offset": [
        223,
        259
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "632": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "635": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "637": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "638": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "DUP2",
      "path": "2"
    },
    "639": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        223,
        259
      ],
      "op": "JUMP",
      "path": "2"
    },
    "640": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "641": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "644": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28E"
    },
    "647": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "648": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "650": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE4E"
    },
    "653": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMP",
      "path": "2"
    },
    "654": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "655": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x607"
    },
    "658": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMP",
      "path": "2"
    },
    "659": {
      "offset": [
        182,
        217
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "660": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "663": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "665": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "666": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "DUP2",
      "path": "2"
    },
    "667": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        182,
        217
      ],
      "op": "JUMP",
      "path": "2"
    },
    "668": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "669": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2AF"
    },
    "672": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2AA"
    },
    "675": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "676": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "678": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED2"
    },
    "681": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMP",
      "path": "2"
    },
    "682": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "683": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6D2"
    },
    "686": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMP",
      "path": "2"
    },
    "687": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "688": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "690": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "691": {
      "op": "SWAP1"
    },
    "692": {
      "op": "ISZERO"
    },
    "693": {
      "op": "ISZERO"
    },
    "694": {
      "op": "DUP2"
    },
    "695": {
      "op": "MSTORE"
    },
    "696": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "698": {
      "op": "ADD"
    },
    "699": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13A"
    },
    "702": {
      "op": "JUMP"
    },
    "703": {
      "offset": [
        265,
        298
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "704": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "707": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2CD"
    },
    "710": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "711": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "713": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE19"
    },
    "716": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        265,
        298
      ],
      "op": "JUMP",
      "path": "2"
    },
    "717": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "718": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7D7"
    },
    "721": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        265,
        298
      ],
      "op": "JUMP",
      "path": "2"
    },
    "722": {
      "offset": [
        767,
        795
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "723": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "726": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xD"
    },
    "728": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "729": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "DUP2",
      "path": "2"
    },
    "730": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        767,
        795
      ],
      "op": "JUMP",
      "path": "2"
    },
    "731": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "732": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x18B"
    },
    "735": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2E9"
    },
    "738": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "739": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "741": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF5C"
    },
    "744": {
      "fn": "Dividends.getShareholderDividends",
      "jump": "i",
      "offset": [
        4541,
        4728
      ],
      "op": "JUMP",
      "path": "2"
    },
    "745": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "746": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4638,
        4645
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "748": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 0
    },
    "749": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "DUP2",
      "path": "2"
    },
    "750": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "751": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4673
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "753": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "755": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "756": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "DUP2",
      "path": "2"
    },
    "757": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "758": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "760": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "DUP1",
      "path": "2"
    },
    "761": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "DUP4",
      "path": "2"
    },
    "762": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4686
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "763": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "765": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "767": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "769": {
      "op": "SHL"
    },
    "770": {
      "op": "SUB"
    },
    "771": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "DUP6",
      "path": "2"
    },
    "772": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "AND",
      "path": "2"
    },
    "773": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "DUP5",
      "path": "2"
    },
    "774": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "775": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4707
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "777": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4707
      ],
      "op": "ADD",
      "path": "2"
    },
    "778": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "779": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "780": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "781": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "782": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "783": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4664,
        4721
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "784": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "785": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "786": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "POP",
      "path": "2"
    },
    "787": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "POP",
      "path": "2"
    },
    "788": {
      "fn": "Dividends.getShareholderDividends",
      "offset": [
        4541,
        4728
      ],
      "op": "JUMP",
      "path": "2"
    },
    "789": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "790": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A1"
    },
    "793": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x323"
    },
    "796": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "797": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "799": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE4E"
    },
    "802": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "803": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "804": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7E7"
    },
    "807": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "808": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "809": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4473,
        4489
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "811": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4508,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0xB"
    },
    "813": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP1",
      "path": "2"
    },
    "814": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "815": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP1",
      "path": "2"
    },
    "816": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "818": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MUL",
      "path": "2"
    },
    "819": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "821": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ADD",
      "path": "2"
    },
    "822": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "824": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "825": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "826": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP2",
      "path": "2"
    },
    "827": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ADD",
      "path": "2"
    },
    "828": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "830": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "831": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP1",
      "path": "2"
    },
    "832": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "833": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "834": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "835": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP2",
      "path": "2"
    },
    "836": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP2",
      "path": "2"
    },
    "837": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "838": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "840": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ADD",
      "path": "2"
    },
    "841": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP3",
      "path": "2"
    },
    "842": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP1",
      "path": "2"
    },
    "843": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "844": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP1",
      "path": "2"
    },
    "845": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "846": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x380"
    },
    "849": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "850": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "852": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MUL",
      "path": "2"
    },
    "853": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP3",
      "path": "2"
    },
    "854": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ADD",
      "path": "2"
    },
    "855": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "856": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "857": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "859": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "860": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "862": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "864": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "865": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "866": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "867": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP2",
      "path": "2"
    },
    "868": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "869": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "871": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "873": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "875": {
      "op": "SHL"
    },
    "876": {
      "op": "SUB"
    },
    "877": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "AND",
      "path": "2"
    },
    "878": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP2",
      "path": "2"
    },
    "879": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "880": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "882": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "883": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "884": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ADD",
      "path": "2"
    },
    "885": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "886": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "888": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "ADD",
      "path": "2"
    },
    "889": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP1",
      "path": "2"
    },
    "890": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "DUP4",
      "path": "2"
    },
    "891": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "GT",
      "path": "2"
    },
    "892": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x362"
    },
    "895": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "896": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "897": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "POP",
      "path": "2"
    },
    "898": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "POP",
      "path": "2"
    },
    "899": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "POP",
      "path": "2"
    },
    "900": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "POP",
      "path": "2"
    },
    "901": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "POP",
      "path": "2"
    },
    "902": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "903": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4501,
        4528
      ],
      "op": "POP",
      "path": "2"
    },
    "904": {
      "fn": "Dividends.getShareholderAddresses",
      "offset": [
        4417,
        4535
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "905": {
      "fn": "Dividends.getShareholderAddresses",
      "jump": "o",
      "offset": [
        4417,
        4535
      ],
      "op": "JUMP",
      "path": "2"
    },
    "906": {
      "fn": "Dividends.createProposal",
      "offset": [
        3691,
        3900
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "907": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "909": {
      "fn": "Dividends.createProposal",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "910": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "914": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "916": {
      "op": "SHL"
    },
    "917": {
      "op": "SUB"
    },
    "918": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "919": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "920": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "921": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3BD"
    },
    "924": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "925": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "927": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "928": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "932": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "934": {
      "op": "SHL"
    },
    "935": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "936": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "937": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "939": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "940": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "943": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "944": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF88"
    },
    "947": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "948": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "949": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "951": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "952": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "DUP1",
      "path": "2"
    },
    "953": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "954": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SUB",
      "path": "2"
    },
    "955": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "956": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "957": {
      "fn": "Dividends.createProposal",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "958": {
      "fn": "Dividends.createProposal",
      "offset": [
        3793,
        3806
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xD"
    },
    "960": {
      "fn": "Dividends.createProposal",
      "offset": [
        3793,
        3806
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "961": {
      "fn": "Dividends.createProposal",
      "offset": [
        3744,
        3780
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "963": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "DUP2",
      "path": "2"
    },
    "964": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "DUP2",
      "path": "2"
    },
    "965": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "966": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3792
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "968": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "970": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "971": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "973": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "974": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "975": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "976": {
      "fn": "Dividends.createProposal",
      "offset": [
        3817,
        3865
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 2,
      "value": "0x3DA"
    },
    "979": {
      "fn": "Dividends.createProposal",
      "offset": [
        3817,
        3865
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "980": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "DUP3",
      "path": "2"
    },
    "981": {
      "fn": "Dividends.createProposal",
      "offset": [
        3783,
        3807
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "982": {
      "fn": "Dividends.createProposal",
      "offset": [
        3817,
        3837
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x916"
    },
    "985": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        3817,
        3865
      ],
      "op": "JUMP",
      "path": "2"
    },
    "986": {
      "fn": "Dividends.createProposal",
      "offset": [
        3817,
        3865
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "987": {
      "fn": "Dividends.createProposal",
      "offset": [
        3892,
        3893
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x1"
    },
    "989": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3888
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xD"
    },
    "991": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3888
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "993": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "DUP3",
      "path": "2"
    },
    "994": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "DUP3",
      "path": "2"
    },
    "995": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "996": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3ED"
    },
    "999": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1000": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1001": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "1004": {
      "fn": "Dividends.createProposal",
      "jump": "i",
      "offset": [
        3875,
        3893
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1005": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1006": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1007": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1008": {
      "fn": "Dividends.createProposal",
      "offset": [
        3875,
        3893
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1009": {
      "op": "POP"
    },
    "1010": {
      "op": "POP"
    },
    "1011": {
      "op": "POP"
    },
    "1012": {
      "fn": "Dividends.createProposal",
      "jump": "o",
      "offset": [
        3691,
        3900
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1013": {
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1014": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "1016": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1017": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1019": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1020": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "LT",
      "path": "2"
    },
    "1021": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x405"
    },
    "1024": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1025": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1027": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1028": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1029": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1030": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "ADD",
      "path": "2"
    },
    "1031": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1032": {
      "fn": "Dividends.createProposal",
      "offset": [
        304,
        333
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1033": {
      "op": "POP"
    },
    "1034": {
      "offset": [
        304,
        333
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1035": {
      "fn": "Dividends.createProposal",
      "jump": "o",
      "offset": [
        304,
        333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1036": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1037": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1039": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1040": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1042": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1044": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1046": {
      "op": "SHL"
    },
    "1047": {
      "op": "SUB"
    },
    "1048": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "1049": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1050": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "1051": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x436"
    },
    "1054": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1055": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1057": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1058": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1064": {
      "op": "SHL"
    },
    "1065": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1066": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1067": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1069": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1070": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1073": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1074": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF88"
    },
    "1077": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1078": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1085": {
      "op": "SHL"
    },
    "1086": {
      "op": "SUB"
    },
    "1087": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 4
    },
    "1088": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "AND",
      "path": "2"
    },
    "1089": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1868,
        1869
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1091": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1092": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1093": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1094": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1835
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1096": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1098": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1099": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1101": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1102": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1849
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1103": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1823,
        1865
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1104": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x49B"
    },
    "1107": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1108": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1110": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1111": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1117": {
      "op": "SHL"
    },
    "1118": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1119": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1120": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1122": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1124": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1125": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "ADD",
      "path": "2"
    },
    "1126": {
      "op": "MSTORE"
    },
    "1127": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "1129": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1131": {
      "op": "DUP3"
    },
    "1132": {
      "op": "ADD"
    },
    "1133": {
      "op": "MSTORE"
    },
    "1134": {
      "op": "PUSH32",
      "value": "0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1169": {
      "op": "DUP3"
    },
    "1170": {
      "op": "ADD"
    },
    "1171": {
      "op": "MSTORE"
    },
    "1172": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1174": {
      "op": "ADD"
    },
    "1175": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1178": {
      "op": "JUMP"
    },
    "1179": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1815,
        1904
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1180": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1184": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1186": {
      "op": "SHL"
    },
    "1187": {
      "op": "SUB"
    },
    "1188": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 5
    },
    "1189": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1190": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "AND",
      "path": "2"
    },
    "1191": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1193": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1194": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1195": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1196": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1926
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1198": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1200": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1201": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1203": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1204": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1940
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1205": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1947
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1207": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1947
      ],
      "op": "ADD",
      "path": "2"
    },
    "1208": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        1914,
        1957
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1209": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "o",
      "offset": [
        1719,
        1964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1210": {
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1211": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "1213": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1214": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1215": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1216": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1217": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "LT",
      "path": "2"
    },
    "1218": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4CA"
    },
    "1221": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1222": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1224": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1225": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1226": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1227": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1229": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1230": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1231": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1232": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1234": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1235": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1236": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1237": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "ADD",
      "path": "2"
    },
    "1238": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1243": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1245": {
      "op": "SHL"
    },
    "1246": {
      "op": "SUB"
    },
    "1247": {
      "offset": [
        665,
        702
      ],
      "op": "AND",
      "path": "2"
    },
    "1248": {
      "fn": "Dividends.setShareholderIncome",
      "offset": [
        665,
        702
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1249": {
      "op": "POP"
    },
    "1250": {
      "offset": [
        665,
        702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1251": {
      "fn": "Dividends.setShareholderIncome",
      "jump": "o",
      "offset": [
        665,
        702
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1252": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1253": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1255": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1260": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1262": {
      "op": "SHL"
    },
    "1263": {
      "op": "SUB"
    },
    "1264": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "1265": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1266": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "1267": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x50E"
    },
    "1270": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1271": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1273": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1274": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1280": {
      "op": "SHL"
    },
    "1281": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1282": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1283": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1285": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1286": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1289": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1290": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF88"
    },
    "1293": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1294": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1295": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2083,
        2101
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 6
    },
    "1296": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2083,
        2101
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1297": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2062,
        2077
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1299": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2062,
        2101
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1300": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2083,
        2101
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1302": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2132,
        2150
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 7
    },
    "1303": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2132,
        2150
      ],
      "op": "ADD",
      "path": "2"
    },
    "1304": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2132,
        2150
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1305": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2111,
        2129
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1307": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2111,
        2150
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1308": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 8,
      "value": "0x40"
    },
    "1310": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1311": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "ADD",
      "path": "2"
    },
    "1312": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2181,
        2199
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1313": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2160,
        2178
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "1315": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2160,
        2199
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1316": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2230,
        2248
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 9,
      "value": "0x60"
    },
    "1318": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2230,
        2248
      ],
      "op": "ADD",
      "path": "2"
    },
    "1319": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2230,
        2248
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "1320": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2209,
        2227
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "1322": {
      "fn": "Dividends.setAggBlsPublicKey",
      "offset": [
        2209,
        2248
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1323": {
      "fn": "Dividends.setAggBlsPublicKey",
      "jump": "o",
      "offset": [
        1970,
        2255
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1324": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1331": {
      "op": "SHL"
    },
    "1332": {
      "op": "SUB"
    },
    "1333": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1334": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "AND",
      "path": "2"
    },
    "1335": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2673,
        2680
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1337": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1338": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1339": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1340": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1342": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1344": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1345": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1346": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1347": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1349": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1350": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1351": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2715,
        2741
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1352": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1353": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1354": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1356": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1357": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1358": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1359": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1360": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1361": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1362": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1363": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1364": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1366": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1367": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1368": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1369": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1370": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1371": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1372": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1373": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1374": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1375": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1376": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1378": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1379": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1380": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1381": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1382": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "ADD",
      "path": "2"
    },
    "1383": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2692,
        2741
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1384": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2673,
        2680
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1385": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2773,
        2795
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x570"
    },
    "1388": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2773,
        2793
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x99D"
    },
    "1391": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2773,
        2795
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1392": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2773,
        2795
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1393": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2751,
        2795
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1394": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2751,
        2795
      ],
      "op": "POP",
      "path": "2"
    },
    "1395": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2805,
        2829
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1397": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2875,
        2876
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1399": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2851,
        2871
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1400": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2851,
        2871
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1401": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2834
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1402": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2850
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1404": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2850
      ],
      "op": "ADD",
      "path": "2"
    },
    "1405": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2850
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1406": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2871
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x587"
    },
    "1409": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2871
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1410": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2871
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1411": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2871
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1414": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2833,
        2871
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1415": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2833,
        2871
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1416": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2876
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x591"
    },
    "1419": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2876
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1420": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2876
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1421": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2876
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1424": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2832,
        2876
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1425": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2832,
        2876
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1426": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2805,
        2876
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1427": {
      "op": "POP"
    },
    "1428": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2886,
        2912
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1430": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2930,
        2946
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1431": {
      "branch": 43,
      "fn": "Dividends.calculateDividends",
      "offset": [
        2930,
        2946
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1432": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2926,
        3016
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5AE"
    },
    "1435": {
      "branch": 43,
      "fn": "Dividends.calculateDividends",
      "offset": [
        2926,
        3016
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1436": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2994,
        3005
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 10
    },
    "1437": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        2984
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1438": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        2991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1440": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        2991
      ],
      "op": "ADD",
      "path": "2"
    },
    "1441": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        2991
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1442": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        3005
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5AB"
    },
    "1445": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        3005
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1446": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        3005
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1447": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        3005
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1450": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        2983,
        3005
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1451": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2983,
        3005
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1452": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2962,
        3005
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1453": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2962,
        3005
      ],
      "op": "POP",
      "path": "2"
    },
    "1454": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2926,
        3016
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1455": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3025,
        3054
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1457": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3080,
        3095
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1459": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3080,
        3095
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1460": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3058,
        3059
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1461": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3058,
        3076
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1463": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3058,
        3076
      ],
      "op": "ADD",
      "path": "2"
    },
    "1464": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3058,
        3076
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1465": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3057,
        3095
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5C2"
    },
    "1468": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3057,
        3095
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1469": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3057,
        3095
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1470": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3057,
        3095
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1473": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3057,
        3095
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1474": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3057,
        3095
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1475": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3025,
        3095
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1476": {
      "op": "POP"
    },
    "1477": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3105,
        3128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1479": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3184,
        3209
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5D1"
    },
    "1482": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3208,
        3209
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1484": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3025,
        3095
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1485": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3184,
        3209
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1488": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3184,
        3209
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1489": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3184,
        3209
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1490": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3179
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5DC"
    },
    "1493": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3178,
        3179
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1495": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3175
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1496": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3179
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1499": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3157,
        3179
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1500": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3157,
        3179
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1501": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3132,
        3152
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5E7"
    },
    "1504": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3151,
        3152
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1506": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3132,
        3148
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1507": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3132,
        3152
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101F"
    },
    "1510": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3132,
        3152
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1511": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3132,
        3152
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1512": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5F1"
    },
    "1515": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1516": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1517": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "1520": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3131,
        3180
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1521": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3180
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1522": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3210
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5FB"
    },
    "1525": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3210
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1526": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3210
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1527": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3210
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "1530": {
      "fn": "Dividends.calculateDividends",
      "jump": "i",
      "offset": [
        3131,
        3210
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1531": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3131,
        3210
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1532": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        3105,
        3210
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "1533": {
      "fn": "Dividends.calculateDividends",
      "offset": [
        2602,
        3249
      ],
      "op": "SWAP8",
      "path": "2"
    },
    "1534": {
      "op": "POP"
    },
    "1535": {
      "op": "POP"
    },
    "1536": {
      "op": "POP"
    },
    "1537": {
      "op": "POP"
    },
    "1538": {
      "op": "POP"
    },
    "1539": {
      "op": "POP"
    },
    "1540": {
      "op": "POP"
    },
    "1541": {
      "op": "POP"
    },
    "1542": {
      "fn": "Dividends.calculateDividends",
      "jump": "o",
      "offset": [
        2602,
        3249
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1543": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1544": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1546": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1548": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1550": {
      "op": "SHL"
    },
    "1551": {
      "op": "SUB"
    },
    "1552": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 11
    },
    "1553": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "AND",
      "path": "2"
    },
    "1554": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1528,
        1529
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1556": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1557": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1558": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1559": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1495
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1561": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1563": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1564": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1566": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1567": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1509
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1568": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1483,
        1525
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1569": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66C"
    },
    "1572": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1573": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1575": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1576": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1582": {
      "op": "SHL"
    },
    "1583": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1584": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1587": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1589": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1590": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "ADD",
      "path": "2"
    },
    "1591": {
      "op": "MSTORE"
    },
    "1592": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "1594": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1596": {
      "op": "DUP3"
    },
    "1597": {
      "op": "ADD"
    },
    "1598": {
      "op": "MSTORE"
    },
    "1599": {
      "op": "PUSH32",
      "value": "0x466972737420696E766573746D656E74206E6F74206D616465207965742E0000"
    },
    "1632": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1634": {
      "op": "DUP3"
    },
    "1635": {
      "op": "ADD"
    },
    "1636": {
      "op": "MSTORE"
    },
    "1637": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1639": {
      "op": "ADD"
    },
    "1640": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1643": {
      "op": "JUMP"
    },
    "1644": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1475,
        1564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1649": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1651": {
      "op": "SHL"
    },
    "1652": {
      "op": "SUB"
    },
    "1653": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 12
    },
    "1654": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "AND",
      "path": "2"
    },
    "1655": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1657": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1658": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1659": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1660": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1586
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "1662": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1664": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1665": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1667": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1668": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1669": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1617
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1671": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1617
      ],
      "op": "ADD",
      "path": "2"
    },
    "1672": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1673": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1674": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1675": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1676": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1600
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1677": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x697"
    },
    "1680": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1681": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1682": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1621,
        1628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1683": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "1686": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1574,
        1628
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1687": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1688": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1689": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "POP",
      "path": "2"
    },
    "1690": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "POP",
      "path": "2"
    },
    "1691": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1692": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1693": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1694": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1574,
        1628
      ],
      "op": "POP",
      "path": "2"
    },
    "1695": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1663,
        1670
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 13
    },
    "1696": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1698": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1700": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1701": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1702": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1703": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6B0"
    },
    "1706": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1707": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1708": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "1711": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1638,
        1670
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1712": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1713": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1714": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "POP",
      "path": "2"
    },
    "1715": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "POP",
      "path": "2"
    },
    "1716": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1717": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1718": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1719": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1638,
        1670
      ],
      "op": "POP",
      "path": "2"
    },
    "1720": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1699,
        1706
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 14
    },
    "1721": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1695
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1723": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1695
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1725": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1726": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1727": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1728": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6C9"
    },
    "1731": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1732": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1733": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "1736": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "i",
      "offset": [
        1680,
        1706
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1737": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1738": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1739": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1740": {
      "fn": "Dividends.addSecondInvestment",
      "offset": [
        1680,
        1706
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1741": {
      "op": "POP"
    },
    "1742": {
      "op": "POP"
    },
    "1743": {
      "op": "POP"
    },
    "1744": {
      "op": "POP"
    },
    "1745": {
      "fn": "Dividends.addSecondInvestment",
      "jump": "o",
      "offset": [
        1390,
        1713
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1746": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1747": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4038,
        4042
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1749": {
      "offset": [
        855,
        860
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1750": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1751": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1753": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1755": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1757": {
      "op": "SHL"
    },
    "1758": {
      "op": "SUB"
    },
    "1759": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "1760": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1761": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "1762": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6FD"
    },
    "1765": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1766": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1768": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1769": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1773": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1775": {
      "op": "SHL"
    },
    "1776": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1777": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1778": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1780": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1781": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1784": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1785": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF88"
    },
    "1788": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1789": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1790": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4054,
        4080
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1792": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4083,
        4129
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x729"
    },
    "1795": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4116,
        4127
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1796": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1798": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1799": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1801": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "ADD",
      "path": "2"
    },
    "1802": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x715"
    },
    "1805": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1806": {
      "op": "DUP2"
    },
    "1807": {
      "op": "MSTORE"
    },
    "1808": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1810": {
      "op": "ADD"
    },
    "1811": {
      "op": "SWAP1"
    },
    "1812": {
      "op": "JUMP"
    },
    "1813": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1814": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1816": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1817": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1819": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1820": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1821": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "SUB",
      "path": "2"
    },
    "1822": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "SUB",
      "path": "2"
    },
    "1823": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1824": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1825": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1826": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1828": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4099,
        4128
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1829": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4083,
        4098
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA12"
    },
    "1832": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        4083,
        4129
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1833": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4083,
        4129
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1834": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4156,
        4167
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 15
    },
    "1835": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4156,
        4167
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1836": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4139,
        4150
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "1838": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4139,
        4167
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1839": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4156,
        4167
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1841": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4194,
        4205
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 16
    },
    "1842": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4194,
        4205
      ],
      "op": "ADD",
      "path": "2"
    },
    "1843": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4194,
        4205
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1844": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4177,
        4191
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "1846": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4177,
        4205
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1847": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 17,
      "value": "0x40"
    },
    "1849": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1850": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1851": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "1853": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1854": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "ADD",
      "path": "2"
    },
    "1855": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1856": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1857": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1858": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1859": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4054,
        4129
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1860": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4054,
        4129
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1861": {
      "op": "POP"
    },
    "1862": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x771"
    },
    "1865": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1866": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4253
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1867": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4240,
        4253
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1868": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4255,
        4270
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1870": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4255,
        4270
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1871": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4255,
        4270
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1872": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4255,
        4270
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1873": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4255,
        4270
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1874": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1875": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1876": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1877": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1878": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1879": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1880": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1882": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "ADD",
      "path": "2"
    },
    "1883": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1884": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1886": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "ADD",
      "path": "2"
    },
    "1887": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1888": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1889": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1890": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "GT",
      "path": "2"
    },
    "1891": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x753"
    },
    "1894": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1895": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "POP",
      "path": "2"
    },
    "1896": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "POP",
      "path": "2"
    },
    "1897": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "POP",
      "path": "2"
    },
    "1898": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "POP",
      "path": "2"
    },
    "1899": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "POP",
      "path": "2"
    },
    "1900": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4272,
        4280
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1901": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4239
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA2A"
    },
    "1904": {
      "fn": "Dividends.verifyProposal",
      "jump": "i",
      "offset": [
        4223,
        4281
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1905": {
      "branch": 44,
      "fn": "Dividends.verifyProposal",
      "offset": [
        4223,
        4281
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1906": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7B1"
    },
    "1909": {
      "branch": 44,
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1910": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1912": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1913": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1917": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1919": {
      "op": "SHL"
    },
    "1920": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1921": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1922": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1924": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1926": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1927": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "ADD",
      "path": "2"
    },
    "1928": {
      "op": "MSTORE"
    },
    "1929": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1931": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1933": {
      "op": "DUP3"
    },
    "1934": {
      "op": "ADD"
    },
    "1935": {
      "op": "MSTORE"
    },
    "1936": {
      "op": "PUSH17",
      "value": "0x212629903737BA103B32B934B334B2B217"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0x79"
    },
    "1956": {
      "op": "SHL"
    },
    "1957": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1959": {
      "op": "DUP3"
    },
    "1960": {
      "op": "ADD"
    },
    "1961": {
      "op": "MSTORE"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1964": {
      "op": "ADD"
    },
    "1965": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "1968": {
      "op": "JUMP"
    },
    "1969": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4215,
        4303
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1970": {
      "op": "POP"
    },
    "1971": {
      "op": "POP"
    },
    "1972": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 18,
      "value": "0x0"
    },
    "1974": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1975": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1976": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1977": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4322
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC"
    },
    "1979": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1981": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1982": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1984": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1985": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4335
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1986": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4350,
        4354
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1988": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4347
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1989": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4347
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1990": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4347
      ],
      "op": "ADD",
      "path": "2"
    },
    "1991": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1992": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1995": {
      "op": "NOT"
    },
    "1996": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "AND",
      "path": "2"
    },
    "1997": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1998": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "OR",
      "path": "2"
    },
    "1999": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2000": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        4313,
        4354
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2001": {
      "offset": [
        909,
        910
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2002": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2003": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2004": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "POP",
      "path": "2"
    },
    "2005": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        3906,
        4382
      ],
      "op": "POP",
      "path": "2"
    },
    "2006": {
      "fn": "Dividends.verifyProposal",
      "jump": "o",
      "offset": [
        3906,
        4382
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2007": {
      "offset": [
        265,
        298
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2008": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2010": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2011": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2013": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2014": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "LT",
      "path": "2"
    },
    "2015": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x405"
    },
    "2018": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2019": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2021": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2022": {
      "fn": "Dividends.verifyProposal",
      "offset": [
        265,
        298
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2023": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2024": {
      "offset": [
        855,
        860
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2026": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        855,
        860
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2029": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2031": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2033": {
      "op": "SHL"
    },
    "2034": {
      "op": "SUB"
    },
    "2035": {
      "offset": [
        855,
        860
      ],
      "op": "AND",
      "path": "2"
    },
    "2036": {
      "offset": [
        841,
        851
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2037": {
      "offset": [
        841,
        860
      ],
      "op": "EQ",
      "path": "2"
    },
    "2038": {
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x811"
    },
    "2041": {
      "offset": [
        833,
        899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2042": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2044": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2045": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2049": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2051": {
      "op": "SHL"
    },
    "2052": {
      "offset": [
        833,
        899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2053": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2054": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2056": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "ADD",
      "path": "2"
    },
    "2057": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "2060": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2061": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF88"
    },
    "2064": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        833,
        899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2065": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        833,
        899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2068": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2070": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2072": {
      "op": "SHL"
    },
    "2073": {
      "op": "SUB"
    },
    "2074": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 19
    },
    "2075": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "AND",
      "path": "2"
    },
    "2076": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2078": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2079": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2080": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2081": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1119
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "2083": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2085": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2086": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2088": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2089": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1133
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2090": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1149
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2091": {
      "branch": 45,
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1107,
        1154
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2092": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x877"
    },
    "2095": {
      "branch": 45,
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2096": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2098": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2099": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2103": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2105": {
      "op": "SHL"
    },
    "2106": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2107": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2108": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2110": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2112": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2113": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "ADD",
      "path": "2"
    },
    "2114": {
      "op": "MSTORE"
    },
    "2115": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "2117": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2119": {
      "op": "DUP3"
    },
    "2120": {
      "op": "ADD"
    },
    "2121": {
      "op": "MSTORE"
    },
    "2122": {
      "op": "PUSH32",
      "value": "0x466972737420696E766573746D656E7420616C7265616479206D6164652E0000"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2157": {
      "op": "DUP3"
    },
    "2158": {
      "op": "ADD"
    },
    "2159": {
      "op": "MSTORE"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2162": {
      "op": "ADD"
    },
    "2163": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3B4"
    },
    "2166": {
      "op": "JUMP"
    },
    "2167": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1099,
        1189
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2168": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2170": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2172": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2174": {
      "op": "SHL"
    },
    "2175": {
      "op": "SUB"
    },
    "2176": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 20
    },
    "2177": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "AND",
      "path": "2"
    },
    "2178": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2180": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2181": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2182": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2183": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1211
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "2185": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2187": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2188": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2190": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2191": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2192": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1251
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2193": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1251
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2194": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1251
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2195": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1276
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 21,
      "value": "0x1"
    },
    "2197": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2198": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2199": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2200": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2201": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1199,
        1225
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2202": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8A4"
    },
    "2205": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2206": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2207": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1244,
        1251
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2208": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "2211": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1261,
        1287
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2212": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2213": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2214": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "POP",
      "path": "2"
    },
    "2215": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "POP",
      "path": "2"
    },
    "2216": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2217": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2218": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2219": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1261,
        1287
      ],
      "op": "POP",
      "path": "2"
    },
    "2220": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1321,
        1328
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 22
    },
    "2221": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1317
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2223": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1317
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2225": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2226": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2227": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2228": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8BD"
    },
    "2231": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2232": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2233": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "2236": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "i",
      "offset": [
        1297,
        1328
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2237": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2238": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2239": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2240": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1297,
        1328
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2241": {
      "op": "POP"
    },
    "2242": {
      "op": "POP"
    },
    "2243": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1358
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 23,
      "value": "0xB"
    },
    "2245": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2246": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2247": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2249": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2250": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "ADD",
      "path": "2"
    },
    "2251": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2252": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2253": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2255": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2256": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2257": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2258": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2259": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9"
    },
    "2292": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "ADD",
      "path": "2"
    },
    "2293": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2294": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2295": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2299": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2301": {
      "op": "SHL"
    },
    "2302": {
      "op": "SUB"
    },
    "2303": {
      "op": "NOT"
    },
    "2304": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "AND",
      "path": "2"
    },
    "2305": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2309": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2311": {
      "op": "SHL"
    },
    "2312": {
      "op": "SUB"
    },
    "2313": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2314": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2315": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2316": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "AND",
      "path": "2"
    },
    "2317": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2318": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2319": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2320": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "OR",
      "path": "2"
    },
    "2321": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2322": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2323": {
      "fn": "Dividends.addFirstInvestment",
      "offset": [
        1338,
        1377
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2324": {
      "op": "POP"
    },
    "2325": {
      "fn": "Dividends.addFirstInvestment",
      "jump": "o",
      "offset": [
        1005,
        1384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2326": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3255,
        3685
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2327": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3353,
        3370
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 24
    },
    "2328": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3353,
        3370
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2329": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3353,
        3370
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2330": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3400
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 25,
      "value": "0x1"
    },
    "2332": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3400
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2333": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3400
      ],
      "op": "ADD",
      "path": "2"
    },
    "2334": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3408
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2335": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3408
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2336": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2338": {
      "op": "NOT"
    },
    "2339": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3408
      ],
      "op": "AND",
      "path": "2"
    },
    "2340": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2341": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3380,
        3408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2342": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3353,
        3364
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2344": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2345": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3442,
        3462
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2347": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3442,
        3469
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2348": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3438,
        3469
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2349": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3438,
        3469
      ],
      "op": "LT",
      "path": "2"
    },
    "2350": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2351": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x998"
    },
    "2354": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2355": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3490,
        3509
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2357": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3532
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2359": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3533,
        3534
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2360": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2361": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2362": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2363": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "LT",
      "path": "2"
    },
    "2364": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x947"
    },
    "2367": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2368": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x947"
    },
    "2371": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF3"
    },
    "2374": {
      "fn": "Dividends.createProposalStruct",
      "jump": "i",
      "offset": [
        3512,
        3535
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2375": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2376": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2378": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2379": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2380": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2381": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2383": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2384": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2385": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "ADD",
      "path": "2"
    },
    "2386": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2391": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2393": {
      "op": "SHL"
    },
    "2394": {
      "op": "SUB"
    },
    "2395": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "AND",
      "path": "2"
    },
    "2396": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2397": {
      "op": "POP"
    },
    "2398": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3569,
        3600
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x966"
    },
    "2401": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3512,
        3535
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2402": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3569,
        3587
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x52C"
    },
    "2405": {
      "fn": "Dividends.createProposalStruct",
      "jump": "i",
      "offset": [
        3569,
        3600
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2406": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3569,
        3600
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2409": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2411": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2413": {
      "op": "SHL"
    },
    "2414": {
      "op": "SUB"
    },
    "2415": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 26
    },
    "2416": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2417": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "AND",
      "path": "2"
    },
    "2418": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2420": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2421": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2422": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2423": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3643
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2425": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3643
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2426": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3643
      ],
      "op": "ADD",
      "path": "2"
    },
    "2427": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2429": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2430": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2432": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2433": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3656
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2434": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3668
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2435": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3668
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2436": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3668
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2437": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3614,
        3668
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2438": {
      "op": "POP"
    },
    "2439": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 27
    },
    "2440": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x990"
    },
    "2443": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2444": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1033"
    },
    "2447": {
      "fn": "Dividends.createProposalStruct",
      "jump": "i",
      "offset": [
        3471,
        3474
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2448": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2449": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2450": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "POP",
      "path": "2"
    },
    "2451": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3471,
        3474
      ],
      "op": "POP",
      "path": "2"
    },
    "2452": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x928"
    },
    "2455": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2456": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2457": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3418,
        3679
      ],
      "op": "POP",
      "path": "2"
    },
    "2458": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3255,
        3685
      ],
      "op": "POP",
      "path": "2"
    },
    "2459": {
      "fn": "Dividends.createProposalStruct",
      "offset": [
        3255,
        3685
      ],
      "op": "POP",
      "path": "2"
    },
    "2460": {
      "fn": "Dividends.createProposalStruct",
      "jump": "o",
      "offset": [
        3255,
        3685
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2461": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2265,
        2596
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2462": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2319,
        2326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2464": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2319,
        2326
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2465": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2319,
        2326
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2466": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2467": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2395,
        2415
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2469": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2395,
        2422
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2470": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2391,
        2422
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2471": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2391,
        2422
      ],
      "op": "LT",
      "path": "2"
    },
    "2472": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2473": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA0C"
    },
    "2476": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2477": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2443,
        2463
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2479": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2486
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xB"
    },
    "2481": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2487,
        2488
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2482": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2483": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2484": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2485": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "LT",
      "path": "2"
    },
    "2486": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9C1"
    },
    "2489": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2490": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9C1"
    },
    "2493": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF3"
    },
    "2496": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "i",
      "offset": [
        2466,
        2489
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2497": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2498": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2500": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2501": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2502": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2503": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2505": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2506": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2507": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2508": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2509": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2510": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "ADD",
      "path": "2"
    },
    "2511": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2512": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2516": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2518": {
      "op": "SHL"
    },
    "2519": {
      "op": "SUB"
    },
    "2520": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "AND",
      "path": "2"
    },
    "2521": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 28
    },
    "2522": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2523": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2524": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2530
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA"
    },
    "2526": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2527": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2528": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2529": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2531": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2532": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2533": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2544
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2534": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2551
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2536": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2551
      ],
      "op": "ADD",
      "path": "2"
    },
    "2537": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2518,
        2551
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2538": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2539": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2466,
        2489
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2540": {
      "op": "POP"
    },
    "2541": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9F6"
    },
    "2544": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2545": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2546": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE0"
    },
    "2549": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "i",
      "offset": [
        2503,
        2551
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2550": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2551": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2552": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2503,
        2551
      ],
      "op": "POP",
      "path": "2"
    },
    "2553": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2429,
        2562
      ],
      "op": "POP",
      "path": "2"
    },
    "2554": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 29
    },
    "2555": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2556": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA04"
    },
    "2559": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2560": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1033"
    },
    "2563": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "i",
      "offset": [
        2424,
        2427
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2564": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2565": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2566": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "POP",
      "path": "2"
    },
    "2567": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2424,
        2427
      ],
      "op": "POP",
      "path": "2"
    },
    "2568": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9A2"
    },
    "2571": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2572": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2371,
        2562
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2573": {
      "op": "POP"
    },
    "2574": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2578,
        2589
      ],
      "op": "SWAP2",
      "path": "2",
      "statement": 30
    },
    "2575": {
      "fn": "Dividends.calculateTotalIncome",
      "offset": [
        2265,
        2596
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2576": {
      "op": "POP"
    },
    "2577": {
      "fn": "Dividends.calculateTotalIncome",
      "jump": "o",
      "offset": [
        2265,
        2596
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2578": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4778,
        4913
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2579": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4841,
        4860
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA1A"
    },
    "2582": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4841,
        4860
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD90"
    },
    "2585": {
      "fn": "BLS.hashToPoint",
      "jump": "i",
      "offset": [
        4841,
        4860
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2586": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4841,
        4860
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2587": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4879,
        4906
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 31,
      "value": "0x7D1"
    },
    "2590": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4900,
        4904
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2591": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4890,
        4905
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2592": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4890,
        4905
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2593": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4890,
        4905
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2594": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4890,
        4905
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2596": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4890,
        4905
      ],
      "op": "ADD",
      "path": "0"
    },
    "2597": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4890,
        4905
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2598": {
      "fn": "BLS.hashToPoint",
      "offset": [
        4879,
        4889
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC10"
    },
    "2601": {
      "fn": "BLS.hashToPoint",
      "jump": "i",
      "offset": [
        4879,
        4906
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2602": {
      "fn": "BLS.verifySingle",
      "offset": [
        2535,
        3380
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2603": {
      "fn": "BLS.verifySingle",
      "offset": [
        2692,
        2696
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2605": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        2732
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2606": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2608": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2609": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2610": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "2613": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2614": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2616": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2617": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2618": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2745
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2619": {
      "fn": "BLS.verifySingle",
      "offset": [
        2746,
        2747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2621": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2623": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2624": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "LT",
      "path": "0"
    },
    "2625": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA4C"
    },
    "2628": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2629": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA4C"
    },
    "2632": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2635": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2736,
        2748
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2636": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2637": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2639": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "MUL",
      "path": "0"
    },
    "2640": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "ADD",
      "path": "0"
    },
    "2641": {
      "fn": "BLS.verifySingle",
      "offset": [
        2736,
        2748
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2642": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2643": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2644": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2646": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2647": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2795
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2648": {
      "fn": "BLS.verifySingle",
      "offset": [
        2796,
        2797
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2650": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2652": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2653": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "LT",
      "path": "0"
    },
    "2654": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA69"
    },
    "2657": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2658": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA69"
    },
    "2661": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2664": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2786,
        2798
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2665": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2666": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2668": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "MUL",
      "path": "0"
    },
    "2669": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "ADD",
      "path": "0"
    },
    "2670": {
      "fn": "BLS.verifySingle",
      "offset": [
        2786,
        2798
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2671": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2672": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2673": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2675": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2676": {
      "offset": [
        1177,
        1254
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x198E9393920D483A7260BFB731FB5D25F1AA493335A9E71297E485B7AEF312C2"
    },
    "2709": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2710": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2711": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2713": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2714": {
      "offset": [
        1285,
        1362
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x1800DEEF121F1E76426A00665E5C4479674322D4F75EDADD46DEBD5CD992F6ED"
    },
    "2747": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2748": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2749": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2751": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2752": {
      "offset": [
        1393,
        1470
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x275DC4A288D1AFB3CBB1AC09187524C7DB36395DF7BE3B99E673B13A075A65EC"
    },
    "2785": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2786": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2787": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2789": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2790": {
      "offset": [
        1501,
        1578
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x1D9BEFCD05A5323E6DA4D435F3B617CDB3AF83285C2DF711EF39C01571827F9D"
    },
    "2823": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2824": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2825": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2827": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2828": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2907
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2829": {
      "fn": "BLS.verifySingle",
      "offset": [
        2908,
        2909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2831": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2833": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2834": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "LT",
      "path": "0"
    },
    "2835": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB1E"
    },
    "2838": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2839": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB1E"
    },
    "2842": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2845": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2900,
        2910
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2846": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2847": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2849": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "MUL",
      "path": "0"
    },
    "2850": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "ADD",
      "path": "0"
    },
    "2851": {
      "fn": "BLS.verifySingle",
      "offset": [
        2900,
        2910
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2852": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2853": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2854": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2856": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2857": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2919
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2858": {
      "fn": "BLS.verifySingle",
      "offset": [
        2920,
        2921
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2860": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2862": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2863": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "LT",
      "path": "0"
    },
    "2864": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB3B"
    },
    "2867": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2868": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB3B"
    },
    "2871": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2874": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2912,
        2922
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2875": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2876": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2878": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "MUL",
      "path": "0"
    },
    "2879": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "ADD",
      "path": "0"
    },
    "2880": {
      "fn": "BLS.verifySingle",
      "offset": [
        2912,
        2922
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2881": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2882": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2883": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2885": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2886": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2966
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2887": {
      "fn": "BLS.verifySingle",
      "offset": [
        2967,
        2968
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2889": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2891": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2892": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "LT",
      "path": "0"
    },
    "2893": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB58"
    },
    "2896": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2897": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB58"
    },
    "2900": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2903": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2960,
        2969
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2904": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2905": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2907": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "MUL",
      "path": "0"
    },
    "2908": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "ADD",
      "path": "0"
    },
    "2909": {
      "fn": "BLS.verifySingle",
      "offset": [
        2960,
        2969
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2910": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2911": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2912": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2914": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2915": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2977
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2916": {
      "fn": "BLS.verifySingle",
      "offset": [
        2978,
        2979
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2918": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2920": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2921": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "LT",
      "path": "0"
    },
    "2922": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB75"
    },
    "2925": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2926": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB75"
    },
    "2929": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2932": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2971,
        2980
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2933": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2934": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2936": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "MUL",
      "path": "0"
    },
    "2937": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "ADD",
      "path": "0"
    },
    "2938": {
      "fn": "BLS.verifySingle",
      "offset": [
        2971,
        2980
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2939": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2940": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2941": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2943": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2944": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2988
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2945": {
      "fn": "BLS.verifySingle",
      "offset": [
        2989,
        2990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2947": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2949": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2950": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "LT",
      "path": "0"
    },
    "2951": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB92"
    },
    "2954": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2955": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB92"
    },
    "2958": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2961": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2982,
        2991
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2962": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2963": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2965": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "MUL",
      "path": "0"
    },
    "2966": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "ADD",
      "path": "0"
    },
    "2967": {
      "fn": "BLS.verifySingle",
      "offset": [
        2982,
        2991
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2968": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2969": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2970": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2972": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "ADD",
      "path": "0"
    },
    "2973": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        2999
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2974": {
      "fn": "BLS.verifySingle",
      "offset": [
        3000,
        3001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2976": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2978": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2979": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "LT",
      "path": "0"
    },
    "2980": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBAF"
    },
    "2983": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2984": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBAF"
    },
    "2987": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF3"
    },
    "2990": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        2993,
        3002
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2991": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2992": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2994": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "MUL",
      "path": "0"
    },
    "2995": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "ADD",
      "path": "0"
    },
    "2996": {
      "fn": "BLS.verifySingle",
      "offset": [
        2993,
        3002
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2997": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2998": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2999": {
      "fn": "BLS.verifySingle",
      "offset": [
        2708,
        3003
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3000": {
      "op": "POP"
    },
    "3001": {
      "fn": "BLS.verifySingle",
      "offset": [
        3013,
        3034
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBC0"
    },
    "3004": {
      "fn": "BLS.verifySingle",
      "offset": [
        3013,
        3034
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDAE"
    },
    "3007": {
      "fn": "BLS.verifySingle",
      "jump": "i",
      "offset": [
        3013,
        3034
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3008": {
      "fn": "BLS.verifySingle",
      "offset": [
        3013,
        3034
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3009": {
      "fn": "BLS.verifySingle",
      "offset": [
        3044,
        3056
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3011": {
      "fn": "BLS.verifySingle",
      "offset": [
        3213,
        3217
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3013": {
      "fn": "BLS.verifySingle",
      "offset": [
        3208,
        3211
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3014": {
      "fn": "BLS.verifySingle",
      "offset": [
        3203,
        3206
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "3017": {
      "fn": "BLS.verifySingle",
      "offset": [
        3196,
        3201
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3018": {
      "fn": "BLS.verifySingle",
      "offset": [
        3193,
        3194
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "3020": {
      "fn": "BLS.verifySingle",
      "offset": [
        3186,
        3190
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D0"
    },
    "3023": {
      "fn": "BLS.verifySingle",
      "offset": [
        3179,
        3184
      ],
      "op": "GAS",
      "path": "0"
    },
    "3024": {
      "fn": "BLS.verifySingle",
      "offset": [
        3175,
        3191
      ],
      "op": "SUB",
      "path": "0"
    },
    "3025": {
      "fn": "BLS.verifySingle",
      "offset": [
        3164,
        3218
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "3026": {
      "fn": "BLS.verifySingle",
      "offset": [
        3153,
        3218
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3027": {
      "op": "POP"
    },
    "3028": {
      "fn": "BLS.verifySingle",
      "offset": [
        3153,
        3218
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3029": {
      "fn": "BLS.verifySingle",
      "offset": [
        3153,
        3218
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3030": {
      "fn": "BLS.verifySingle",
      "offset": [
        3231,
        3306
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBDB"
    },
    "3033": {
      "fn": "BLS.verifySingle",
      "offset": [
        3258,
        3306
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3034": {
      "fn": "BLS.verifySingle",
      "offset": [
        3283,
        3292
      ],
      "op": "INVALID",
      "path": "0"
    },
    "3035": {
      "fn": "BLS.verifySingle",
      "offset": [
        3231,
        3306
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3036": {
      "fn": "BLS.verifySingle",
      "offset": [
        3231,
        3306
      ],
      "op": "POP",
      "path": "0"
    },
    "3037": {
      "branch": 46,
      "fn": "BLS.verifySingle",
      "offset": [
        3333,
        3340
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 32
    },
    "3038": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC03"
    },
    "3041": {
      "branch": 46,
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3042": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3044": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3045": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3049": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3051": {
      "op": "SHL"
    },
    "3052": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3053": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3054": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3056": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3058": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3059": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "ADD",
      "path": "0"
    },
    "3060": {
      "op": "MSTORE"
    },
    "3061": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3063": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3065": {
      "op": "DUP3"
    },
    "3066": {
      "op": "ADD"
    },
    "3067": {
      "op": "MSTORE"
    },
    "3068": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3070": {
      "op": "ADD"
    },
    "3071": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B4"
    },
    "3074": {
      "op": "JUMP"
    },
    "3075": {
      "fn": "BLS.verifySingle",
      "offset": [
        3325,
        3345
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3076": {
      "op": "POP"
    },
    "3077": {
      "fn": "BLS.verifySingle",
      "offset": [
        3362,
        3368
      ],
      "op": "MLOAD",
      "path": "0",
      "statement": 33
    },
    "3078": {
      "fn": "BLS.verifySingle",
      "offset": [
        3362,
        3373
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3079": {
      "fn": "BLS.verifySingle",
      "offset": [
        3362,
        3373
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3080": {
      "fn": "BLS.verifySingle",
      "offset": [
        3362,
        3373
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3081": {
      "fn": "BLS.verifySingle",
      "offset": [
        3362,
        3373
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3082": {
      "op": "POP"
    },
    "3083": {
      "op": "POP"
    },
    "3084": {
      "op": "POP"
    },
    "3085": {
      "op": "POP"
    },
    "3086": {
      "op": "POP"
    },
    "3087": {
      "fn": "BLS.verifySingle",
      "jump": "o",
      "offset": [
        2535,
        3380
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3088": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4919,
        5399
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3089": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4974,
        4993
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC18"
    },
    "3092": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4974,
        4993
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD90"
    },
    "3095": {
      "fn": "BLS.mapToPoint",
      "jump": "i",
      "offset": [
        4974,
        4993
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3096": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4974,
        4993
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3097": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5005,
        5014
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3099": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5017,
        5032
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC32"
    },
    "3102": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3104": {
      "op": "DUP1"
    },
    "3105": {
      "op": "MLOAD"
    },
    "3106": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3108": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3111": {
      "op": "DUP4"
    },
    "3112": {
      "op": "CODECOPY"
    },
    "3113": {
      "op": "DUP2"
    },
    "3114": {
      "op": "MLOAD"
    },
    "3115": {
      "op": "SWAP2"
    },
    "3116": {
      "op": "MSTORE"
    },
    "3117": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5025,
        5027
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3118": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5017,
        5032
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x104C"
    },
    "3121": {
      "fn": "BLS.mapToPoint",
      "jump": "i",
      "offset": [
        5017,
        5032
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3122": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5017,
        5032
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3123": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5005,
        5032
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3124": {
      "op": "POP"
    },
    "3125": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5042,
        5051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3127": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5042,
        5051
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3128": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5089,
        5393
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3129": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3131": {
      "op": "DUP1"
    },
    "3132": {
      "op": "MLOAD"
    },
    "3133": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3135": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3138": {
      "op": "DUP4"
    },
    "3139": {
      "op": "CODECOPY"
    },
    "3140": {
      "op": "DUP2"
    },
    "3141": {
      "op": "MLOAD"
    },
    "3142": {
      "op": "SWAP2"
    },
    "3143": {
      "op": "MSTORE"
    },
    "3144": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5130,
        5131
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 34
    },
    "3145": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5127,
        5128
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3146": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5120,
        5135
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "3147": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5116,
        5135
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3148": {
      "op": "POP"
    },
    "3149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3151": {
      "op": "DUP1"
    },
    "3152": {
      "op": "MLOAD"
    },
    "3153": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3155": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3158": {
      "op": "DUP4"
    },
    "3159": {
      "op": "CODECOPY"
    },
    "3160": {
      "op": "DUP2"
    },
    "3161": {
      "op": "MLOAD"
    },
    "3162": {
      "op": "SWAP2"
    },
    "3163": {
      "op": "MSTORE"
    },
    "3164": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5163,
        5164
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 35
    },
    "3165": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5160,
        5161
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3166": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5153,
        5168
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "3167": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5149,
        5168
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3168": {
      "op": "POP"
    },
    "3169": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3171": {
      "op": "DUP1"
    },
    "3172": {
      "op": "MLOAD"
    },
    "3173": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3175": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3178": {
      "op": "DUP4"
    },
    "3179": {
      "op": "CODECOPY"
    },
    "3180": {
      "op": "DUP2"
    },
    "3181": {
      "op": "MLOAD"
    },
    "3182": {
      "op": "SWAP2"
    },
    "3183": {
      "op": "MSTORE"
    },
    "3184": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5196,
        5197
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 36,
      "value": "0x3"
    },
    "3186": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5193,
        5194
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3187": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5186,
        5201
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "3188": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5182,
        5201
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3189": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5182,
        5201
      ],
      "op": "POP",
      "path": "0"
    },
    "3190": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5228,
        5235
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 37,
      "value": "0xC7E"
    },
    "3193": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5233,
        5234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3194": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5228,
        5232
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCBA"
    },
    "3197": {
      "fn": "BLS.mapToPoint",
      "jump": "i",
      "offset": [
        5228,
        5235
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3198": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5228,
        5235
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3199": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5215,
        5235
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3200": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5215,
        5235
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3201": {
      "op": "POP"
    },
    "3202": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5215,
        5235
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3203": {
      "op": "POP"
    },
    "3204": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5249,
        5350
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3205": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5249,
        5350
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3206": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5249,
        5350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC98"
    },
    "3209": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5249,
        5350
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3210": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5278,
        5286
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 38
    },
    "3211": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5278,
        5286
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3212": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5278,
        5286
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3213": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5278,
        5282
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3215": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5304,
        5308
      ],
      "op": "DUP5",
      "path": "0",
      "statement": 39
    },
    "3216": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5304,
        5308
      ],
      "op": "ADD",
      "path": "0"
    },
    "3217": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5304,
        5312
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3218": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5304,
        5312
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3219": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5304,
        5312
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3220": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5330,
        5335
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 40,
      "value": "0xCB2"
    },
    "3223": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5330,
        5335
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3224": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5249,
        5350
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3225": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3227": {
      "op": "DUP1"
    },
    "3228": {
      "op": "MLOAD"
    },
    "3229": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3231": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3234": {
      "op": "DUP4"
    },
    "3235": {
      "op": "CODECOPY"
    },
    "3236": {
      "op": "DUP2"
    },
    "3237": {
      "op": "MLOAD"
    },
    "3238": {
      "op": "SWAP2"
    },
    "3239": {
      "op": "MSTORE"
    },
    "3240": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5377,
        5378
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 41,
      "value": "0x1"
    },
    "3242": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5374,
        5375
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3243": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5367,
        5382
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "3244": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5363,
        5382
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3245": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5363,
        5382
      ],
      "op": "POP",
      "path": "0"
    },
    "3246": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5089,
        5393
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC38"
    },
    "3249": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5089,
        5393
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3250": {
      "fn": "BLS.mapToPoint",
      "offset": [
        5089,
        5393
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3251": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4995,
        5399
      ],
      "op": "POP",
      "path": "0"
    },
    "3252": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4995,
        5399
      ],
      "op": "POP",
      "path": "0"
    },
    "3253": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4995,
        5399
      ],
      "op": "POP",
      "path": "0"
    },
    "3254": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4919,
        5399
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3255": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4919,
        5399
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3256": {
      "fn": "BLS.mapToPoint",
      "offset": [
        4919,
        5399
      ],
      "op": "POP",
      "path": "0"
    },
    "3257": {
      "fn": "BLS.mapToPoint",
      "jump": "o",
      "offset": [
        4919,
        5399
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3258": {
      "fn": "BLS.sqrt",
      "offset": [
        14932,
        15962
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3259": {
      "fn": "BLS.sqrt",
      "offset": [
        14981,
        14990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3261": {
      "fn": "BLS.sqrt",
      "offset": [
        14992,
        15004
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3262": {
      "fn": "BLS.sqrt",
      "offset": [
        15016,
        15032
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3264": {
      "fn": "BLS.sqrt",
      "offset": [
        15150,
        15154
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3266": {
      "fn": "BLS.sqrt",
      "offset": [
        15144,
        15155
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3267": {
      "fn": "BLS.sqrt",
      "offset": [
        15184,
        15188
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3269": {
      "fn": "BLS.sqrt",
      "offset": [
        15175,
        15182
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3270": {
      "fn": "BLS.sqrt",
      "offset": [
        15168,
        15189
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3271": {
      "fn": "BLS.sqrt",
      "offset": [
        15229,
        15233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3273": {
      "fn": "BLS.sqrt",
      "offset": [
        15222,
        15226
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3274": {
      "fn": "BLS.sqrt",
      "offset": [
        15213,
        15220
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3275": {
      "fn": "BLS.sqrt",
      "offset": [
        15209,
        15227
      ],
      "op": "ADD",
      "path": "0"
    },
    "3276": {
      "fn": "BLS.sqrt",
      "offset": [
        15202,
        15234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3277": {
      "fn": "BLS.sqrt",
      "offset": [
        15274,
        15278
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3279": {
      "fn": "BLS.sqrt",
      "offset": [
        15267,
        15271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3281": {
      "fn": "BLS.sqrt",
      "offset": [
        15258,
        15265
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3282": {
      "fn": "BLS.sqrt",
      "offset": [
        15254,
        15272
      ],
      "op": "ADD",
      "path": "0"
    },
    "3283": {
      "fn": "BLS.sqrt",
      "offset": [
        15247,
        15279
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3284": {
      "fn": "BLS.sqrt",
      "offset": [
        15319,
        15321
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3285": {
      "fn": "BLS.sqrt",
      "offset": [
        15312,
        15316
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3287": {
      "fn": "BLS.sqrt",
      "offset": [
        15303,
        15310
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3288": {
      "fn": "BLS.sqrt",
      "offset": [
        15299,
        15317
      ],
      "op": "ADD",
      "path": "0"
    },
    "3289": {
      "fn": "BLS.sqrt",
      "offset": [
        15292,
        15322
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3290": {
      "fn": "BLS.sqrt",
      "offset": [
        15457,
        15522
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xC19139CB84C680A6E14116DA060561765E05AA45A1C72A34F082305B61F3F52"
    },
    "3323": {
      "fn": "BLS.sqrt",
      "offset": [
        15450,
        15454
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "3325": {
      "fn": "BLS.sqrt",
      "offset": [
        15441,
        15448
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3326": {
      "fn": "BLS.sqrt",
      "offset": [
        15437,
        15455
      ],
      "op": "ADD",
      "path": "0"
    },
    "3327": {
      "fn": "BLS.sqrt",
      "offset": [
        15430,
        15523
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3330": {
      "op": "DUP1"
    },
    "3331": {
      "op": "MLOAD"
    },
    "3332": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3334": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3337": {
      "op": "DUP4"
    },
    "3338": {
      "op": "CODECOPY"
    },
    "3339": {
      "op": "DUP2"
    },
    "3340": {
      "op": "MLOAD"
    },
    "3341": {
      "op": "SWAP2"
    },
    "3342": {
      "op": "MSTORE"
    },
    "3343": {
      "fn": "BLS.sqrt",
      "offset": [
        15642,
        15646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA0"
    },
    "3345": {
      "fn": "BLS.sqrt",
      "offset": [
        15633,
        15640
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3346": {
      "fn": "BLS.sqrt",
      "offset": [
        15629,
        15647
      ],
      "op": "ADD",
      "path": "0"
    },
    "3347": {
      "fn": "BLS.sqrt",
      "offset": [
        15622,
        15716
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3348": {
      "fn": "BLS.sqrt",
      "offset": [
        15800,
        15804
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3350": {
      "fn": "BLS.sqrt",
      "offset": [
        15791,
        15798
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3351": {
      "fn": "BLS.sqrt",
      "offset": [
        15785,
        15789
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xC0"
    },
    "3353": {
      "fn": "BLS.sqrt",
      "offset": [
        15776,
        15783
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3354": {
      "fn": "BLS.sqrt",
      "offset": [
        15773,
        15774
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "3356": {
      "fn": "BLS.sqrt",
      "offset": [
        15766,
        15770
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D0"
    },
    "3359": {
      "fn": "BLS.sqrt",
      "offset": [
        15759,
        15764
      ],
      "op": "GAS",
      "path": "0"
    },
    "3360": {
      "fn": "BLS.sqrt",
      "offset": [
        15755,
        15771
      ],
      "op": "SUB",
      "path": "0"
    },
    "3361": {
      "fn": "BLS.sqrt",
      "offset": [
        15744,
        15805
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "3362": {
      "fn": "BLS.sqrt",
      "offset": [
        15823,
        15837
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3363": {
      "fn": "BLS.sqrt",
      "offset": [
        15823,
        15837
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3364": {
      "fn": "BLS.sqrt",
      "offset": [
        15823,
        15837
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3365": {
      "op": "POP"
    },
    "3366": {
      "fn": "BLS.sqrt",
      "offset": [
        15729,
        15805
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3367": {
      "op": "POP"
    },
    "3368": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3370": {
      "op": "DUP1"
    },
    "3371": {
      "op": "MLOAD"
    },
    "3372": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3374": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "3377": {
      "op": "DUP4"
    },
    "3378": {
      "op": "CODECOPY"
    },
    "3379": {
      "op": "DUP2"
    },
    "3380": {
      "op": "MLOAD"
    },
    "3381": {
      "op": "SWAP2"
    },
    "3382": {
      "op": "MSTORE"
    },
    "3383": {
      "fn": "BLS.sqrt",
      "offset": [
        15823,
        15837
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3384": {
      "fn": "BLS.sqrt",
      "offset": [
        15823,
        15837
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3385": {
      "fn": "BLS.sqrt",
      "offset": [
        15868,
        15883
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "3386": {
      "fn": "BLS.sqrt",
      "offset": [
        15864,
        15866
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3387": {
      "fn": "BLS.sqrt",
      "offset": [
        15861,
        15884
      ],
      "op": "EQ",
      "path": "0"
    },
    "3388": {
      "fn": "BLS.sqrt",
      "offset": [
        15850,
        15884
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3389": {
      "fn": "BLS.sqrt",
      "offset": [
        15850,
        15884
      ],
      "op": "POP",
      "path": "0"
    },
    "3390": {
      "branch": 47,
      "fn": "BLS.sqrt",
      "offset": [
        15911,
        15922
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 42
    },
    "3391": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD8A"
    },
    "3394": {
      "branch": 47,
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3395": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3397": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3398": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3402": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3404": {
      "op": "SHL"
    },
    "3405": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3406": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3407": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3409": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3411": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3412": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "ADD",
      "path": "0"
    },
    "3413": {
      "op": "MSTORE"
    },
    "3414": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "3416": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3418": {
      "op": "DUP3"
    },
    "3419": {
      "op": "ADD"
    },
    "3420": {
      "op": "MSTORE"
    },
    "3421": {
      "op": "PUSH32",
      "value": "0x424C533A2073717274206D6F646578702063616C6C206661696C656400000000"
    },
    "3454": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3456": {
      "op": "DUP3"
    },
    "3457": {
      "op": "ADD"
    },
    "3458": {
      "op": "MSTORE"
    },
    "3459": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3461": {
      "op": "ADD"
    },
    "3462": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B4"
    },
    "3465": {
      "op": "JUMP"
    },
    "3466": {
      "fn": "BLS.sqrt",
      "offset": [
        15903,
        15955
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3467": {
      "fn": "BLS.sqrt",
      "offset": [
        15006,
        15962
      ],
      "op": "POP",
      "path": "0"
    },
    "3468": {
      "fn": "BLS.sqrt",
      "offset": [
        14932,
        15962
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3469": {
      "fn": "BLS.sqrt",
      "offset": [
        14932,
        15962
      ],
      "op": "POP",
      "path": "0"
    },
    "3470": {
      "fn": "BLS.sqrt",
      "offset": [
        14932,
        15962
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3471": {
      "fn": "BLS.sqrt",
      "jump": "o",
      "offset": [
        14932,
        15962
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3472": {
      "op": "JUMPDEST"
    },
    "3473": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3475": {
      "op": "MLOAD"
    },
    "3476": {
      "op": "DUP1"
    },
    "3477": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3479": {
      "op": "ADD"
    },
    "3480": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3482": {
      "op": "MSTORE"
    },
    "3483": {
      "op": "DUP1"
    },
    "3484": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "3486": {
      "op": "SWAP1"
    },
    "3487": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3489": {
      "op": "DUP3"
    },
    "3490": {
      "op": "MUL"
    },
    "3491": {
      "op": "DUP1"
    },
    "3492": {
      "op": "CALLDATASIZE"
    },
    "3493": {
      "op": "DUP4"
    },
    "3494": {
      "op": "CALLDATACOPY"
    },
    "3495": {
      "op": "POP"
    },
    "3496": {
      "op": "SWAP2"
    },
    "3497": {
      "op": "SWAP3"
    },
    "3498": {
      "op": "SWAP2"
    },
    "3499": {
      "op": "POP"
    },
    "3500": {
      "op": "POP"
    },
    "3501": {
      "jump": "o",
      "op": "JUMP"
    },
    "3502": {
      "op": "JUMPDEST"
    },
    "3503": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3505": {
      "op": "MLOAD"
    },
    "3506": {
      "op": "DUP1"
    },
    "3507": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3509": {
      "op": "ADD"
    },
    "3510": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3512": {
      "op": "MSTORE"
    },
    "3513": {
      "op": "DUP1"
    },
    "3514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3516": {
      "op": "SWAP1"
    },
    "3517": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3519": {
      "op": "DUP3"
    },
    "3520": {
      "op": "MUL"
    },
    "3521": {
      "op": "DUP1"
    },
    "3522": {
      "op": "CALLDATASIZE"
    },
    "3523": {
      "op": "DUP4"
    },
    "3524": {
      "op": "CALLDATACOPY"
    },
    "3525": {
      "op": "POP"
    },
    "3526": {
      "op": "SWAP2"
    },
    "3527": {
      "op": "SWAP3"
    },
    "3528": {
      "op": "SWAP2"
    },
    "3529": {
      "op": "POP"
    },
    "3530": {
      "op": "POP"
    },
    "3531": {
      "jump": "o",
      "op": "JUMP"
    },
    "3532": {
      "op": "JUMPDEST"
    },
    "3533": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3535": {
      "op": "DUP1"
    },
    "3536": {
      "op": "DUP3"
    },
    "3537": {
      "op": "MSTORE"
    },
    "3538": {
      "op": "DUP3"
    },
    "3539": {
      "op": "MLOAD"
    },
    "3540": {
      "op": "DUP3"
    },
    "3541": {
      "op": "DUP3"
    },
    "3542": {
      "op": "ADD"
    },
    "3543": {
      "op": "DUP2"
    },
    "3544": {
      "op": "SWAP1"
    },
    "3545": {
      "op": "MSTORE"
    },
    "3546": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3548": {
      "op": "SWAP2"
    },
    "3549": {
      "op": "SWAP1"
    },
    "3550": {
      "op": "DUP5"
    },
    "3551": {
      "op": "DUP3"
    },
    "3552": {
      "op": "ADD"
    },
    "3553": {
      "op": "SWAP1"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3556": {
      "op": "DUP6"
    },
    "3557": {
      "op": "ADD"
    },
    "3558": {
      "op": "SWAP1"
    },
    "3559": {
      "op": "DUP5"
    },
    "3560": {
      "op": "JUMPDEST"
    },
    "3561": {
      "op": "DUP2"
    },
    "3562": {
      "op": "DUP2"
    },
    "3563": {
      "op": "LT"
    },
    "3564": {
      "op": "ISZERO"
    },
    "3565": {
      "op": "PUSH2",
      "value": "0xE0D"
    },
    "3568": {
      "op": "JUMPI"
    },
    "3569": {
      "op": "DUP4"
    },
    "3570": {
      "op": "MLOAD"
    },
    "3571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3575": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3577": {
      "op": "SHL"
    },
    "3578": {
      "op": "SUB"
    },
    "3579": {
      "op": "AND"
    },
    "3580": {
      "op": "DUP4"
    },
    "3581": {
      "op": "MSTORE"
    },
    "3582": {
      "op": "SWAP3"
    },
    "3583": {
      "op": "DUP5"
    },
    "3584": {
      "op": "ADD"
    },
    "3585": {
      "op": "SWAP3"
    },
    "3586": {
      "op": "SWAP2"
    },
    "3587": {
      "op": "DUP5"
    },
    "3588": {
      "op": "ADD"
    },
    "3589": {
      "op": "SWAP2"
    },
    "3590": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3592": {
      "op": "ADD"
    },
    "3593": {
      "op": "PUSH2",
      "value": "0xDE8"
    },
    "3596": {
      "op": "JUMP"
    },
    "3597": {
      "op": "JUMPDEST"
    },
    "3598": {
      "op": "POP"
    },
    "3599": {
      "op": "SWAP1"
    },
    "3600": {
      "op": "SWAP7"
    },
    "3601": {
      "op": "SWAP6"
    },
    "3602": {
      "op": "POP"
    },
    "3603": {
      "op": "POP"
    },
    "3604": {
      "op": "POP"
    },
    "3605": {
      "op": "POP"
    },
    "3606": {
      "op": "POP"
    },
    "3607": {
      "op": "POP"
    },
    "3608": {
      "jump": "o",
      "op": "JUMP"
    },
    "3609": {
      "op": "JUMPDEST"
    },
    "3610": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3612": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3614": {
      "op": "DUP3"
    },
    "3615": {
      "op": "DUP5"
    },
    "3616": {
      "op": "SUB"
    },
    "3617": {
      "op": "SLT"
    },
    "3618": {
      "op": "ISZERO"
    },
    "3619": {
      "op": "PUSH2",
      "value": "0xE2B"
    },
    "3622": {
      "op": "JUMPI"
    },
    "3623": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3625": {
      "op": "DUP1"
    },
    "3626": {
      "op": "REVERT"
    },
    "3627": {
      "op": "JUMPDEST"
    },
    "3628": {
      "op": "POP"
    },
    "3629": {
      "op": "CALLDATALOAD"
    },
    "3630": {
      "op": "SWAP2"
    },
    "3631": {
      "op": "SWAP1"
    },
    "3632": {
      "op": "POP"
    },
    "3633": {
      "jump": "o",
      "op": "JUMP"
    },
    "3634": {
      "op": "JUMPDEST"
    },
    "3635": {
      "op": "DUP1"
    },
    "3636": {
      "op": "CALLDATALOAD"
    },
    "3637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3643": {
      "op": "SHL"
    },
    "3644": {
      "op": "SUB"
    },
    "3645": {
      "op": "DUP2"
    },
    "3646": {
      "op": "AND"
    },
    "3647": {
      "op": "DUP2"
    },
    "3648": {
      "op": "EQ"
    },
    "3649": {
      "op": "PUSH2",
      "value": "0xE49"
    },
    "3652": {
      "op": "JUMPI"
    },
    "3653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3655": {
      "op": "DUP1"
    },
    "3656": {
      "op": "REVERT"
    },
    "3657": {
      "op": "JUMPDEST"
    },
    "3658": {
      "op": "SWAP2"
    },
    "3659": {
      "op": "SWAP1"
    },
    "3660": {
      "op": "POP"
    },
    "3661": {
      "jump": "o",
      "op": "JUMP"
    },
    "3662": {
      "op": "JUMPDEST"
    },
    "3663": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3665": {
      "op": "DUP1"
    },
    "3666": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3668": {
      "op": "DUP4"
    },
    "3669": {
      "op": "DUP6"
    },
    "3670": {
      "op": "SUB"
    },
    "3671": {
      "op": "SLT"
    },
    "3672": {
      "op": "ISZERO"
    },
    "3673": {
      "op": "PUSH2",
      "value": "0xE61"
    },
    "3676": {
      "op": "JUMPI"
    },
    "3677": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3679": {
      "op": "DUP1"
    },
    "3680": {
      "op": "REVERT"
    },
    "3681": {
      "op": "JUMPDEST"
    },
    "3682": {
      "op": "PUSH2",
      "value": "0xE6A"
    },
    "3685": {
      "op": "DUP4"
    },
    "3686": {
      "op": "PUSH2",
      "value": "0xE32"
    },
    "3689": {
      "jump": "i",
      "op": "JUMP"
    },
    "3690": {
      "op": "JUMPDEST"
    },
    "3691": {
      "op": "SWAP5"
    },
    "3692": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3694": {
      "op": "SWAP4"
    },
    "3695": {
      "op": "SWAP1"
    },
    "3696": {
      "op": "SWAP4"
    },
    "3697": {
      "op": "ADD"
    },
    "3698": {
      "op": "CALLDATALOAD"
    },
    "3699": {
      "op": "SWAP4"
    },
    "3700": {
      "op": "POP"
    },
    "3701": {
      "op": "POP"
    },
    "3702": {
      "op": "POP"
    },
    "3703": {
      "jump": "o",
      "op": "JUMP"
    },
    "3704": {
      "op": "JUMPDEST"
    },
    "3705": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3707": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3709": {
      "op": "DUP3"
    },
    "3710": {
      "op": "DUP5"
    },
    "3711": {
      "op": "SUB"
    },
    "3712": {
      "op": "SLT"
    },
    "3713": {
      "op": "ISZERO"
    },
    "3714": {
      "op": "PUSH2",
      "value": "0xE8A"
    },
    "3717": {
      "op": "JUMPI"
    },
    "3718": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3720": {
      "op": "DUP1"
    },
    "3721": {
      "op": "REVERT"
    },
    "3722": {
      "op": "JUMPDEST"
    },
    "3723": {
      "op": "PUSH2",
      "value": "0xE93"
    },
    "3726": {
      "op": "DUP3"
    },
    "3727": {
      "op": "PUSH2",
      "value": "0xE32"
    },
    "3730": {
      "jump": "i",
      "op": "JUMP"
    },
    "3731": {
      "op": "JUMPDEST"
    },
    "3732": {
      "op": "SWAP4"
    },
    "3733": {
      "op": "SWAP3"
    },
    "3734": {
      "op": "POP"
    },
    "3735": {
      "op": "POP"
    },
    "3736": {
      "op": "POP"
    },
    "3737": {
      "jump": "o",
      "op": "JUMP"
    },
    "3738": {
      "op": "JUMPDEST"
    },
    "3739": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3741": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3743": {
      "op": "DUP3"
    },
    "3744": {
      "op": "DUP5"
    },
    "3745": {
      "op": "SUB"
    },
    "3746": {
      "op": "SLT"
    },
    "3747": {
      "op": "ISZERO"
    },
    "3748": {
      "op": "PUSH2",
      "value": "0xEAC"
    },
    "3751": {
      "op": "JUMPI"
    },
    "3752": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3754": {
      "op": "DUP1"
    },
    "3755": {
      "op": "REVERT"
    },
    "3756": {
      "op": "JUMPDEST"
    },
    "3757": {
      "op": "DUP3"
    },
    "3758": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3760": {
      "op": "DUP4"
    },
    "3761": {
      "op": "ADD"
    },
    "3762": {
      "op": "GT"
    },
    "3763": {
      "op": "ISZERO"
    },
    "3764": {
      "op": "PUSH2",
      "value": "0xA0C"
    },
    "3767": {
      "op": "JUMPI"
    },
    "3768": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3770": {
      "op": "DUP1"
    },
    "3771": {
      "op": "REVERT"
    },
    "3772": {
      "op": "JUMPDEST"
    },
    "3773": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3778": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3780": {
      "op": "SHL"
    },
    "3781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3783": {
      "op": "MSTORE"
    },
    "3784": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3786": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3788": {
      "op": "MSTORE"
    },
    "3789": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3791": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3793": {
      "op": "REVERT"
    },
    "3794": {
      "op": "JUMPDEST"
    },
    "3795": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3797": {
      "op": "DUP1"
    },
    "3798": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3800": {
      "op": "DUP4"
    },
    "3801": {
      "op": "DUP6"
    },
    "3802": {
      "op": "SUB"
    },
    "3803": {
      "op": "SLT"
    },
    "3804": {
      "op": "ISZERO"
    },
    "3805": {
      "op": "PUSH2",
      "value": "0xEE5"
    },
    "3808": {
      "op": "JUMPI"
    },
    "3809": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3811": {
      "op": "DUP1"
    },
    "3812": {
      "op": "REVERT"
    },
    "3813": {
      "op": "JUMPDEST"
    },
    "3814": {
      "op": "DUP3"
    },
    "3815": {
      "op": "CALLDATALOAD"
    },
    "3816": {
      "op": "SWAP2"
    },
    "3817": {
      "op": "POP"
    },
    "3818": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3820": {
      "op": "DUP5"
    },
    "3821": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3823": {
      "op": "DUP6"
    },
    "3824": {
      "op": "ADD"
    },
    "3825": {
      "op": "SLT"
    },
    "3826": {
      "op": "PUSH2",
      "value": "0xEFA"
    },
    "3829": {
      "op": "JUMPI"
    },
    "3830": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3832": {
      "op": "DUP1"
    },
    "3833": {
      "op": "REVERT"
    },
    "3834": {
      "op": "JUMPDEST"
    },
    "3835": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3837": {
      "op": "MLOAD"
    },
    "3838": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3840": {
      "op": "DUP2"
    },
    "3841": {
      "op": "ADD"
    },
    "3842": {
      "op": "DUP2"
    },
    "3843": {
      "op": "DUP2"
    },
    "3844": {
      "op": "LT"
    },
    "3845": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3854": {
      "op": "DUP3"
    },
    "3855": {
      "op": "GT"
    },
    "3856": {
      "op": "OR"
    },
    "3857": {
      "op": "ISZERO"
    },
    "3858": {
      "op": "PUSH2",
      "value": "0xF1D"
    },
    "3861": {
      "op": "JUMPI"
    },
    "3862": {
      "op": "PUSH2",
      "value": "0xF1D"
    },
    "3865": {
      "op": "PUSH2",
      "value": "0xEBC"
    },
    "3868": {
      "jump": "i",
      "op": "JUMP"
    },
    "3869": {
      "op": "JUMPDEST"
    },
    "3870": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3872": {
      "op": "MSTORE"
    },
    "3873": {
      "op": "DUP1"
    },
    "3874": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3876": {
      "op": "DUP7"
    },
    "3877": {
      "op": "ADD"
    },
    "3878": {
      "op": "DUP8"
    },
    "3879": {
      "op": "DUP2"
    },
    "3880": {
      "op": "GT"
    },
    "3881": {
      "op": "ISZERO"
    },
    "3882": {
      "op": "PUSH2",
      "value": "0xF32"
    },
    "3885": {
      "op": "JUMPI"
    },
    "3886": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3888": {
      "op": "DUP1"
    },
    "3889": {
      "op": "REVERT"
    },
    "3890": {
      "op": "JUMPDEST"
    },
    "3891": {
      "op": "DUP4"
    },
    "3892": {
      "op": "DUP8"
    },
    "3893": {
      "op": "ADD"
    },
    "3894": {
      "op": "JUMPDEST"
    },
    "3895": {
      "op": "DUP2"
    },
    "3896": {
      "op": "DUP2"
    },
    "3897": {
      "op": "LT"
    },
    "3898": {
      "op": "ISZERO"
    },
    "3899": {
      "op": "PUSH2",
      "value": "0xF4D"
    },
    "3902": {
      "op": "JUMPI"
    },
    "3903": {
      "op": "DUP1"
    },
    "3904": {
      "op": "CALLDATALOAD"
    },
    "3905": {
      "op": "DUP4"
    },
    "3906": {
      "op": "MSTORE"
    },
    "3907": {
      "op": "SWAP2"
    },
    "3908": {
      "op": "DUP5"
    },
    "3909": {
      "op": "ADD"
    },
    "3910": {
      "op": "SWAP2"
    },
    "3911": {
      "op": "DUP5"
    },
    "3912": {
      "op": "ADD"
    },
    "3913": {
      "op": "PUSH2",
      "value": "0xF36"
    },
    "3916": {
      "op": "JUMP"
    },
    "3917": {
      "op": "JUMPDEST"
    },
    "3918": {
      "op": "POP"
    },
    "3919": {
      "op": "POP"
    },
    "3920": {
      "op": "POP"
    },
    "3921": {
      "op": "DUP1"
    },
    "3922": {
      "op": "SWAP3"
    },
    "3923": {
      "op": "POP"
    },
    "3924": {
      "op": "POP"
    },
    "3925": {
      "op": "POP"
    },
    "3926": {
      "op": "SWAP3"
    },
    "3927": {
      "op": "POP"
    },
    "3928": {
      "op": "SWAP3"
    },
    "3929": {
      "op": "SWAP1"
    },
    "3930": {
      "op": "POP"
    },
    "3931": {
      "jump": "o",
      "op": "JUMP"
    },
    "3932": {
      "op": "JUMPDEST"
    },
    "3933": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3935": {
      "op": "DUP1"
    },
    "3936": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3938": {
      "op": "DUP4"
    },
    "3939": {
      "op": "DUP6"
    },
    "3940": {
      "op": "SUB"
    },
    "3941": {
      "op": "SLT"
    },
    "3942": {
      "op": "ISZERO"
    },
    "3943": {
      "op": "PUSH2",
      "value": "0xF6F"
    },
    "3946": {
      "op": "JUMPI"
    },
    "3947": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3949": {
      "op": "DUP1"
    },
    "3950": {
      "op": "REVERT"
    },
    "3951": {
      "op": "JUMPDEST"
    },
    "3952": {
      "op": "DUP3"
    },
    "3953": {
      "op": "CALLDATALOAD"
    },
    "3954": {
      "op": "SWAP2"
    },
    "3955": {
      "op": "POP"
    },
    "3956": {
      "op": "PUSH2",
      "value": "0xF7F"
    },
    "3959": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3961": {
      "op": "DUP5"
    },
    "3962": {
      "op": "ADD"
    },
    "3963": {
      "op": "PUSH2",
      "value": "0xE32"
    },
    "3966": {
      "jump": "i",
      "op": "JUMP"
    },
    "3967": {
      "op": "JUMPDEST"
    },
    "3968": {
      "op": "SWAP1"
    },
    "3969": {
      "op": "POP"
    },
    "3970": {
      "op": "SWAP3"
    },
    "3971": {
      "op": "POP"
    },
    "3972": {
      "op": "SWAP3"
    },
    "3973": {
      "op": "SWAP1"
    },
    "3974": {
      "op": "POP"
    },
    "3975": {
      "jump": "o",
      "op": "JUMP"
    },
    "3976": {
      "op": "JUMPDEST"
    },
    "3977": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3979": {
      "op": "DUP1"
    },
    "3980": {
      "op": "DUP3"
    },
    "3981": {
      "op": "MSTORE"
    },
    "3982": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3984": {
      "op": "SWAP1"
    },
    "3985": {
      "op": "DUP3"
    },
    "3986": {
      "op": "ADD"
    },
    "3987": {
      "op": "MSTORE"
    },
    "3988": {
      "op": "PUSH32",
      "value": "0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F"
    },
    "4021": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4023": {
      "op": "DUP3"
    },
    "4024": {
      "op": "ADD"
    },
    "4025": {
      "op": "MSTORE"
    },
    "4026": {
      "op": "PUSH2",
      "value": "0x3717"
    },
    "4029": {
      "op": "PUSH1",
      "value": "0xF1"
    },
    "4031": {
      "op": "SHL"
    },
    "4032": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4034": {
      "op": "DUP3"
    },
    "4035": {
      "op": "ADD"
    },
    "4036": {
      "op": "MSTORE"
    },
    "4037": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4039": {
      "op": "ADD"
    },
    "4040": {
      "op": "SWAP1"
    },
    "4041": {
      "jump": "o",
      "op": "JUMP"
    },
    "4042": {
      "op": "JUMPDEST"
    },
    "4043": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4048": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4050": {
      "op": "SHL"
    },
    "4051": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4053": {
      "op": "MSTORE"
    },
    "4054": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4058": {
      "op": "MSTORE"
    },
    "4059": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4061": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4063": {
      "op": "REVERT"
    },
    "4064": {
      "op": "JUMPDEST"
    },
    "4065": {
      "op": "DUP1"
    },
    "4066": {
      "op": "DUP3"
    },
    "4067": {
      "op": "ADD"
    },
    "4068": {
      "op": "DUP1"
    },
    "4069": {
      "op": "DUP3"
    },
    "4070": {
      "op": "GT"
    },
    "4071": {
      "op": "ISZERO"
    },
    "4072": {
      "op": "PUSH2",
      "value": "0x7D1"
    },
    "4075": {
      "op": "JUMPI"
    },
    "4076": {
      "op": "PUSH2",
      "value": "0x7D1"
    },
    "4079": {
      "op": "PUSH2",
      "value": "0xFCA"
    },
    "4082": {
      "jump": "i",
      "op": "JUMP"
    },
    "4083": {
      "op": "JUMPDEST"
    },
    "4084": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4089": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4091": {
      "op": "SHL"
    },
    "4092": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4094": {
      "op": "MSTORE"
    },
    "4095": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4097": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4099": {
      "op": "MSTORE"
    },
    "4100": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4102": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4104": {
      "op": "REVERT"
    },
    "4105": {
      "op": "JUMPDEST"
    },
    "4106": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4111": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4113": {
      "op": "SHL"
    },
    "4114": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4116": {
      "op": "MSTORE"
    },
    "4117": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4119": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4121": {
      "op": "MSTORE"
    },
    "4122": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4124": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4126": {
      "op": "REVERT"
    },
    "4127": {
      "op": "JUMPDEST"
    },
    "4128": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4130": {
      "op": "DUP3"
    },
    "4131": {
      "op": "PUSH2",
      "value": "0x102E"
    },
    "4134": {
      "op": "JUMPI"
    },
    "4135": {
      "op": "PUSH2",
      "value": "0x102E"
    },
    "4138": {
      "op": "PUSH2",
      "value": "0x1009"
    },
    "4141": {
      "jump": "i",
      "op": "JUMP"
    },
    "4142": {
      "op": "JUMPDEST"
    },
    "4143": {
      "op": "POP"
    },
    "4144": {
      "op": "DIV"
    },
    "4145": {
      "op": "SWAP1"
    },
    "4146": {
      "jump": "o",
      "op": "JUMP"
    },
    "4147": {
      "op": "JUMPDEST"
    },
    "4148": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4150": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4152": {
      "op": "DUP3"
    },
    "4153": {
      "op": "ADD"
    },
    "4154": {
      "op": "PUSH2",
      "value": "0x1045"
    },
    "4157": {
      "op": "JUMPI"
    },
    "4158": {
      "op": "PUSH2",
      "value": "0x1045"
    },
    "4161": {
      "op": "PUSH2",
      "value": "0xFCA"
    },
    "4164": {
      "jump": "i",
      "op": "JUMP"
    },
    "4165": {
      "op": "JUMPDEST"
    },
    "4166": {
      "op": "POP"
    },
    "4167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4169": {
      "op": "ADD"
    },
    "4170": {
      "op": "SWAP1"
    },
    "4171": {
      "jump": "o",
      "op": "JUMP"
    },
    "4172": {
      "op": "JUMPDEST"
    },
    "4173": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4175": {
      "op": "DUP3"
    },
    "4176": {
      "op": "PUSH2",
      "value": "0x105B"
    },
    "4179": {
      "op": "JUMPI"
    },
    "4180": {
      "op": "PUSH2",
      "value": "0x105B"
    },
    "4183": {
      "op": "PUSH2",
      "value": "0x1009"
    },
    "4186": {
      "jump": "i",
      "op": "JUMP"
    },
    "4187": {
      "op": "JUMPDEST"
    },
    "4188": {
      "op": "POP"
    },
    "4189": {
      "op": "MOD"
    },
    "4190": {
      "op": "SWAP1"
    },
    "4191": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "870ea7daaab0aeacc8d5598243901287803049b5",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.18;\n\nimport {BLS} from \"./BLS.sol\";\n\ncontract Dividends {\n    address public owner;\n    uint256 public totalInvestment;\n    uint256 public totalFirstInvestment;\n    uint256 public totalSecondInvestment;\n    uint256[4] public aggBlsPublicKey;\n    uint256[2] public tempMemHash;\n    \n    struct Shareholder {\n        uint256 firstInvestment;\n        uint256 secondInvestment;\n        uint256 income;\n    }\n\n    struct DividendProposal {\n        uint256 id;\n        bool hasVerified;\n        mapping(address => uint256) shareholderDividends;\n    }\n\n    mapping(address => Shareholder) public shareholders;\n    address[] public shareholderAddresses;\n    mapping(uint256 => DividendProposal) public proposals;\n    uint256 public proposalCount;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n        proposalCount = 0;\n    }\n\n    function addFirstInvestment(address _shareholder, uint256 _amount) public onlyOwner {\n        require(shareholders[_shareholder].firstInvestment == 0, \"First investment already made.\");\n        shareholders[_shareholder].firstInvestment = _amount;\n        totalInvestment += _amount;\n        totalFirstInvestment += _amount;\n        shareholderAddresses.push(_shareholder);\n    }\n\n    function addSecondInvestment(address _shareholder, uint256 _amount) public {\n        require(shareholders[_shareholder].firstInvestment > 0, \"First investment not made yet.\");\n        shareholders[_shareholder].secondInvestment += _amount;\n        totalSecondInvestment += _amount;\n        totalInvestment += _amount;\n    }\n\n    function setShareholderIncome(address _shareholder, uint256 _income) public onlyOwner {\n        require(shareholders[_shareholder].firstInvestment > 0, \"First investment not made yet.\");\n        shareholders[_shareholder].income = _income;\n    }\n\n    function setAggBlsPublicKey(uint256[4] calldata _bls_public_key) public onlyOwner {\n        aggBlsPublicKey[0] = _bls_public_key[0];\n        aggBlsPublicKey[1] = _bls_public_key[1];\n        aggBlsPublicKey[2] = _bls_public_key[2];\n        aggBlsPublicKey[3] = _bls_public_key[3];\n    }\n    \n    function calculateTotalIncome() private view returns (uint256) {\n        uint256 totalIncome = 0;\n        for (uint256 i = 0; i < shareholderAddresses.length; i++) {\n            address _shareholder = shareholderAddresses[i];\n            totalIncome += shareholders[_shareholder].income;\n        }\n        return totalIncome;\n    }\n\n    function calculateDividends(address _shareholder) public view returns (uint256) {\n        Shareholder memory s = shareholders[_shareholder];\n        uint256 totalIncome = calculateTotalIncome();\n        uint256 conversionShares = (s.firstInvestment/totalFirstInvestment) / 2;\n        uint256 conversionEarnings = 0;\n        if (totalIncome != 0) {\n            conversionEarnings = s.income / totalIncome;\n        }\n        uint256 secondInvestmentRatio = (s.secondInvestment) / totalInvestment;\n        uint256 actualDividends = (conversionShares / 4) + (conversionEarnings / 2) + (secondInvestmentRatio / 4);\n        return actualDividends;\n    }\n\n    function createProposalStruct (DividendProposal storage proposal, uint256 _id) internal {\n        proposal.id = _id;\n        proposal.hasVerified = false;\n        for (uint256 i = 0; i < shareholderAddresses.length; i++) {\n            address shareholder = shareholderAddresses[i];\n            uint256 dividends = calculateDividends(shareholder);\n            proposal.shareholderDividends[shareholder] = dividends;\n        }\n    }\n\n    function createProposal() public onlyOwner {\n        DividendProposal storage newProposal = proposals[proposalCount];\n        createProposalStruct(newProposal, proposalCount);\n        proposalCount += 1;\n    }\n\n    function verifyProposal(uint256 _proposalId,\n                            uint256[2] memory _aggSignature) public onlyOwner returns (bool) {\n        uint256[2] memory _memHash = BLS.hashToPoint(abi.encodePacked(_proposalId));\n        tempMemHash[0] = _memHash[0];\n        tempMemHash[1] = _memHash[1];\n        require(BLS.verifySingle(_aggSignature, aggBlsPublicKey, _memHash), \"BLS not verified.\");\n        proposals[_proposalId].hasVerified = true;\n        return true;\n    }\n                             \n    function getShareholderAddresses() public view returns (address[] memory) {\n        return shareholderAddresses;\n    }\n\n    function getShareholderDividends(uint256 _proposalId, address _shareholder) public view returns (uint256) {\n        return proposals[_proposalId].shareholderDividends[_shareholder];\n    }\n    \n}\n",
  "sourceMap": "95:4640:2:-:0;;;923:76;;;;;;;;;-1:-1:-1;947:5:2;:18;;-1:-1:-1;;;;;;947:18:2;955:10;947:18;;;975:13;:17;95:4640;;;;;;",
  "sourcePath": "contracts/Dividends.sol",
  "type": "contract"
}